{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"902bd8e0fad59929b96c2165469a6b8c709f2bdb","modified":1473421869486},{"_id":"themes/spfk/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1473507688056},{"_id":"themes/spfk/README.md","hash":"8749e56d2f2fb3076038b105a6618fa3ec97a1ab","modified":1473507688056},{"_id":"themes/spfk/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1473507689016},{"_id":"themes/spfk/_config.yml","hash":"0438815e2fc3742b84ea7c989d2aa4673fe43d56","modified":1473655038924},{"_id":"source/404/index.md","hash":"7a15941da3fdc211ca9d44ba7ffc94b04d416602","modified":1473578988774},{"_id":"source/_posts/CraftyJs初探.md","hash":"77ce36b632ecc25ca18b7dd043ec40b73d457ef8","modified":1473580944061},{"_id":"source/_posts/Git命令学习.md","hash":"5b007a2fefd964252942b970d334ec4a9b382441","modified":1473581586616},{"_id":"source/_posts/JAVA处理跨域问题.md","hash":"0966ff6d04db98e030a27e0258cd52150fd7ddeb","modified":1473580927207},{"_id":"source/about/index.html","hash":"82e7515de43b90383eafc0a4c5ddf8f4b623ff34","modified":1473498215069},{"_id":"source/categories/index.md","hash":"3001744d51adbd7ba53f6fcbe10c75ea70391155","modified":1473654290901},{"_id":"source/tags/index.md","hash":"28e7d2e5a8660071bbfae41c76b5456f1d8f2341","modified":1473497208887},{"_id":"themes/spfk/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1473507688024},{"_id":"themes/spfk/.git/config","hash":"e982ab9811e4397474601f6a3e284ef45b913363","modified":1473655038916},{"_id":"themes/spfk/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1473507658984},{"_id":"themes/spfk/.git/index","hash":"a34d2b5c57874edca6c844b62fad1d366b30b632","modified":1473655039036},{"_id":"themes/spfk/.git/packed-refs","hash":"45b859e56106dcd6f627216c37495d48427b463d","modified":1473507688024},{"_id":"themes/spfk/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1473507688118},{"_id":"themes/spfk/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1473507688118},{"_id":"themes/spfk/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1473507688118},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1473507688134},{"_id":"themes/spfk/languages/pt-BR","hash":"9e8a1942a32af8720c9fbca8db14eb89d76c21bd","modified":1473507688134},{"_id":"themes/spfk/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1473507688134},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1473507688149},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1473507688149},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1473507688149},{"_id":"themes/spfk/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1473507688149},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1473507689000},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1473507689000},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1473507689000},{"_id":"themes/spfk/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1473507689016},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1473507689016},{"_id":"themes/spfk/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1473507689016},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1473507689016},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1473507689016},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1473507689016},{"_id":"themes/spfk/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1473507658984},{"_id":"themes/spfk/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1473507658984},{"_id":"themes/spfk/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1473507659000},{"_id":"themes/spfk/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1473507659000},{"_id":"themes/spfk/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1473507659000},{"_id":"themes/spfk/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1473507659000},{"_id":"themes/spfk/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1473507659000},{"_id":"themes/spfk/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1473507659062},{"_id":"themes/spfk/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1473654519750},{"_id":"themes/spfk/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1473507659062},{"_id":"themes/spfk/.git/logs/HEAD","hash":"001f51aed916bbb308740c3cf7d0a03919a29c75","modified":1473655038915},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"686daa64647a37c61cb348eaa55118b73d866d1b","modified":1473507688212},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1473507688274},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1473507688290},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"33a9e21698fe3038a7dfcf0f34d73901482c49db","modified":1473507688337},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"054cbde2b775dd05f942e62d3ba5374ff8c71fea","modified":1473507688353},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1473507688368},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"ff7174ff79bfe82a70b03a07d78583b1e8d1827f","modified":1473507688368},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"db08f6276c2b501ad16a335f5d0d06c1b4e24d35","modified":1473655038931},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"d037a5fb0f81571ae454187deaae68f1285db56d","modified":1473507688556},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1473507688587},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"21ffa5e590b1588b61b7de66c81a992ff87e9b36","modified":1473507688603},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"a891989f050ccc5e4765c5629f6442482b9daba9","modified":1473507688618},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"34b2d7050db88fed9f70b8233f16f451bad501f4","modified":1473507688665},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"d4565d52e6536465c740ad8dc5737c2e8eed9f05","modified":1473507688681},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"112353124225cada3e44644151f069655db9494b","modified":1473507688728},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1473507688728},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"31592c7f86fa062f20ed2afb2e5656ae8151ba80","modified":1473507688745},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1473507688937},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1473507688984},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"c46a2b624281b09d4aeacf2921cd712837469a1d","modified":1473507689000},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"f0191892b19a19d7bb59f97c659611208b53c81d","modified":1473507689000},{"_id":"themes/spfk/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1473507689219},{"_id":"themes/spfk/source/css/_variables.styl","hash":"11fe650f1f335795ab971965c3ec0ed36e211956","modified":1473507689344},{"_id":"themes/spfk/source/css/loading-style.css","hash":"ef12c256b59ed836994afed35bf02556248133ce","modified":1473507689344},{"_id":"themes/spfk/source/css/showshare.css","hash":"bb1fc0da63d3a4584c8c15391e089271e4e82f81","modified":1473507689391},{"_id":"themes/spfk/source/css/style.styl","hash":"5564c0ebba7da680b4958beed2e1a3174dc04fb8","modified":1473507689391},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473507689672},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473507689672},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473507689672},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473507689672},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473507689672},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473507689688},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1473507689702},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1473507689717},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1473507689733},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1473507689889},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1473507689889},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1473507689889},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1473507689952},{"_id":"themes/spfk/source/img/favicon.ico","hash":"88697c9f333e0346f57c2b71a69f300ed9c1d466","modified":1471353701854},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1473507689952},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1473507689952},{"_id":"themes/spfk/source/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1473655039026},{"_id":"themes/spfk/source/img/head.png","hash":"e629265bfe78445d2e382a8c373ed5a21aede5be","modified":1473583555113},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1473507689967},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1473507689967},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1473507689967},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1473507689967},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1473507689967},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1473507689967},{"_id":"themes/spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1473507689967},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1473507689967},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1473507689967},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1473507689967},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1473507689967},{"_id":"themes/spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1473507689967},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1473507689967},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1473507689967},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"1f60b6ccd135d181b78254468ffda1c7b9d51556","modified":1473507690061},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1473507690139},{"_id":"themes/spfk/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1473507690202},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1473507690249},{"_id":"themes/spfk/source/js/main.js","hash":"99558632eb0cc7e387fcd7fa942b46cc1e1efc07","modified":1473507690280},{"_id":"themes/spfk/source/js/mobile.js","hash":"baed8d560883c842c2b8c3e0fadcf359f97140d0","modified":1473507690296},{"_id":"themes/spfk/source/js/pace.js","hash":"d9cfcb7e1fc4b827a64491726c9a78b9886b3793","modified":1473507690342},{"_id":"themes/spfk/source/js/pc.js","hash":"482dc45356756150f0bee80c8d9a0987965b89ea","modified":1473507690342},{"_id":"themes/spfk/source/js/plugins.js","hash":"63e93eee75d6a83717af73dcc9829983123e01c1","modified":1473507690342},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1473507690108},{"_id":"themes/spfk/source/js/embed.js","hash":"0c4047c10bffdc5289f4e61700cc7dfbb56ccb0d","modified":1473507690186},{"_id":"themes/spfk/.git/objects/pack/pack-ef4fac4a4b56741b01f027efdd2ccb7c39a6e5e8.idx","hash":"332a3443502a655f634677c72cd999e4c5d758e2","modified":1473507687665},{"_id":"themes/spfk/.git/refs/heads/master","hash":"d2869431e25e2dd434d4d906e6947906bafae102","modified":1473507688024},{"_id":"themes/spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1473507688274},{"_id":"themes/spfk/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1473507688274},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1473507688384},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"23d58903983a3e40099f75f3d7a5462a95dc4636","modified":1473507688384},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1473507688509},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"a1b64506cd6aba3cd8ab48cf3ee0d6477123d6b1","modified":1473507688828},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1473507688828},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1473507688828},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1473507688844},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"2605463dd8738b75f7c9c97929248e72792183f0","modified":1473507688859},{"_id":"themes/spfk/layout/_partial/post/swiftype.ejs","hash":"90f03e7f0ca811f3caeeaaeb2aaf5283e3ab4bb5","modified":1473507688859},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1473507688875},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1473507688875},{"_id":"themes/spfk/layout/_partial/share/baidu-share.ejs","hash":"136d1ffb6176e220e034a601df9c86f005fd9b4f","modified":1473507688937},{"_id":"themes/spfk/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1473507688953},{"_id":"themes/spfk/layout/_partial/share/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1473507688984},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1473507689031},{"_id":"themes/spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1473507689078},{"_id":"themes/spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1473507689078},{"_id":"themes/spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1473507689141},{"_id":"themes/spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1473507689172},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1473507689187},{"_id":"themes/spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1473507689219},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"dc3c5531589dc2858e20d01a0db5d116d6b7f507","modified":1473507689281},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"4df95b4bb2d092fb4edacaace6da75b68b76ffc9","modified":1473507689281},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"90667bc0a860c9932c316447dee99c335c355c16","modified":1473507689281},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"a38dd264db83942da95713b78311e4cca0d99325","modified":1473507689297},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"2bccdb4f3c12c7889598a97532de95e8d3f92d29","modified":1473507689313},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1473507689297},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1473507689313},{"_id":"themes/spfk/source/css/_partial/mains.styl","hash":"ff793a58c239a46474dc369b40ab2a71f547338e","modified":1473507689313},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"d80d2acea8c84d330272d5f58a334eefb110c351","modified":1473507689313},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1473507689313},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"fd30cf933e39ee348e69cc8458455cc4f622b7e9","modified":1473507689328},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"05bec94ed9f9fafa284926a8711aa52de7c56279","modified":1473507689313},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"98b6db59fbedee6f2a35b76624cce7b5f8ffce94","modified":1473507689328},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1473507689328},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1473507689328},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"ddcfef2526e6d98f84ae88a87c1ec911649ef791","modified":1473507689328},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1473507689328},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1473507689344},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1473507689344},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"65ce5d4aac09e570914a075a4fd17941c9a51c47","modified":1473507689344},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473507689691},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1473507689693},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1473507689696},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1473507689698},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1473507689700},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1473507689702},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1473507689749},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1473507689749},{"_id":"themes/spfk/source/img/head1.png","hash":"b8e5fa9559e3b6c80efa016f9f15791f179914ca","modified":1473584353580},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1473507690046},{"_id":"themes/spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1473507689141},{"_id":"themes/spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1473507689187},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1473507689203},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1473507689764},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1473507689796},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1473507689874},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1473507689889},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1473507690030},{"_id":"themes/spfk/.git/logs/refs/heads/master","hash":"001f51aed916bbb308740c3cf7d0a03919a29c75","modified":1473655038914},{"_id":"themes/spfk/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1473507688024},{"_id":"themes/spfk/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1473507689125},{"_id":"themes/spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1473507689219},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1473507689297},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"edfed5def2ad4f7fdad0eb50b26a51c3b010c2b1","modified":1473507689297},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1473507689297},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1473507689328},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1473507689874},{"_id":"themes/spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1473507689156},{"_id":"themes/spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1473507689172},{"_id":"themes/spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1473507689172},{"_id":"themes/spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1473507689187},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1473507689203},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1473507689203},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1473507689219},{"_id":"themes/spfk/.git/logs/refs/remotes/origin/HEAD","hash":"001f51aed916bbb308740c3cf7d0a03919a29c75","modified":1473655038912},{"_id":"themes/spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1473507689063},{"_id":"themes/spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1473507689109},{"_id":"themes/spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1473507689156},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1473507689889},{"_id":"themes/spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1473507689094},{"_id":"themes/spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1473507689109},{"_id":"themes/spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1473507689141},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1473507689858},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1473507689172},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1473507689203},{"_id":"themes/spfk/.git/objects/pack/pack-ef4fac4a4b56741b01f027efdd2ccb7c39a6e5e8.pack","hash":"34739ab5345a61b84db33a52f7f85fbba7a95c8c","modified":1473507687759},{"_id":"source/_posts/CraftyJs-Start.md","hash":"29a7cef476fbbb050fc308b362663a6bc4cc8e7c","modified":1473653567416},{"_id":"source/_posts/Git-Command-Start.md","hash":"ac1c69fb463c92e73c310a94ef66104be310d109","modified":1473667749788},{"_id":"source/_posts/Java-Ajax.md","hash":"2c0c29b9037fdb072dc13c8ad77c88983e9bbdff","modified":1473653572441},{"_id":"themes/spfk/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1473655039024},{"_id":"source/_posts/Git-Command-End.md","hash":"4b6a1f894447539c7572f2cc2742ef47fe9a66bd","modified":1473666883314}],"Category":[{"name":"技术","_id":"cisye3zco0004mknqryknjsyv"},{"name":"编程","_id":"ciszndblk0002fcfiyplmiqkl"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"fancybox":false,"noDate":"true","_content":"\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<div class=\"pic\">\n<img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe>\n</div>","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\nfancybox: false\nnoDate: \"true\"\n---\n\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<div class=\"pic\">\n<img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe>\n</div>","date":"2016-09-11T07:30:55.843Z","updated":"2016-09-11T07:29:48.774Z","path":"/404.html","layout":"page","_id":"cisye3zcg0001mknq5p24td5o","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<div class=\"pic\"><br><img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"320\" height=\"330\" src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe><br></div>","excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<div class=\"pic\"><br><img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe><br></div>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul>    \n    <li>WebSite：<a href=\"http://www.xieyufei.com\">http://www.xieyufei.com</a></li>\n    <li>Email：<a href=\"http://mail.163.com/\">corner_scofield@163.com</a></li>\n<!--     <li>GitHub：<a href=\"https://github.com/AnSwErYWJ\">AnSwErYWJ</a></li> -->\n    <li>Blog：<a href=\"http://www.xieyufei.com\">谢小飞的博客</a></li>\n    <!-- <li>Weibo：<a href=\"http://weibo.com/1783591593\">@AnSwEr不是答案</a></p></li> -->\n</ul>\n</body>\n</html>","source":"about/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul>    \n    <li>WebSite：<a href=\"http://www.xieyufei.com\">http://www.xieyufei.com</a></li>\n    <li>Email：<a href=\"http://mail.163.com/\">corner_scofield@163.com</a></li>\n<!--     <li>GitHub：<a href=\"https://github.com/AnSwErYWJ\">AnSwErYWJ</a></li> -->\n    <li>Blog：<a href=\"http://www.xieyufei.com\">谢小飞的博客</a></li>\n    <!-- <li>Weibo：<a href=\"http://weibo.com/1783591593\">@AnSwEr不是答案</a></p></li> -->\n</ul>\n</body>\n</html>","date":"2016-09-10T09:03:35.069Z","updated":"2016-09-10T09:03:35.069Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cisye3zcm0003mknqx99ujaho","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul>    \n    <li>WebSite：<a href=\"http://www.xieyufei.com\" target=\"_blank\" rel=\"external\">http://www.xieyufei.com</a></li>\n    <li>Email：<a href=\"http://mail.163.com/\" target=\"_blank\" rel=\"external\">corner_scofield@163.com</a></li>\n<!--     <li>GitHub：<a href=\"https://github.com/AnSwErYWJ\">AnSwErYWJ</a></li> -->\n    <li>Blog：<a href=\"http://www.xieyufei.com\" target=\"_blank\" rel=\"external\">谢小飞的博客</a></li>\n    <!-- <li>Weibo：<a href=\"http://weibo.com/1783591593\">@AnSwEr不是答案</a></p></li> -->\n</ul>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul>    \n    <li>WebSite：<a href=\"http://www.xieyufei.com\">http://www.xieyufei.com</a></li>\n    <li>Email：<a href=\"http://mail.163.com/\">corner_scofield@163.com</a></li>\n<!--     <li>GitHub：<a href=\"https://github.com/AnSwErYWJ\">AnSwErYWJ</a></li> -->\n    <li>Blog：<a href=\"http://www.xieyufei.com\">谢小飞的博客</a></li>\n    <!-- <li>Weibo：<a href=\"http://weibo.com/1783591593\">@AnSwEr不是答案</a></p></li> -->\n</ul>\n</body>\n</html>"},{"title":"分类","Antuor":"Corner","comments":0,"date":"2016-09-12T05:39:58.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nAntuor: Corner\ncomments: false\ndate: 2016-09-12 13:39:58\ntype: \"categories\"\n---\n","updated":"2016-09-12T04:24:50.901Z","path":"categories/index.html","_id":"cisye3zcx0007mknqg41hoxgu","layout":"page","content":"","excerpt":"","more":""},{"title":"标签","Antuor":"AnSwEr(Weijie Yuan)","date":"2016-07-10T05:36:38.000Z","comments":0,"type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nAntuor: AnSwEr(Weijie Yuan)\ndate: 2016-07-10 13:36:38\ncomments: false\ntype: \"tags\"\n---\n","updated":"2016-09-10T08:46:48.887Z","path":"tags/index.html","layout":"page","_id":"cisye3zcz0008mknqpliwbi08","content":"","excerpt":"","more":""}],"Post":[{"title":"CraftyJs初探","date":"2016-07-08T14:00:00.000Z","description":null,"toc":true,"author":null,"comments":1,"original":null,"photos":[],"_content":"　　前不久听了一趟分享课，分享课的主题是JS游戏的制作，但是如果是自己写游戏比较的繁琐，如果能应用一个游戏引擎，就能大大的简化游戏的开发速度和开发效率，于是我在网上参考了几个游戏引擎，找到了CraftyJs这个游戏引擎还是挺不错的，但是苦于网上的教程不是很全面，所以今天就开个坑，写个入门级的教程，仅供参考。\n<!-- more -->\n\n\n### 1. 初始化\n首先从[官网](http://craftyjs.com/)上下载CraftyJs的脚本引用到项目中来。然后就可以开始写我们自己的程序了。\n```\nCraftyJs.init(this.config.width,this.config.height);\n```\n这段代码用于初始化整个stage，用官方的话来说就是舞台，所有的元素将在这整个舞台里活动。这个舞台的宽度是this.config.width(px)，高度是this.config.height(px)。如果有元素超出了舞台的范围，这个元素将被遮住，因为整个舞台设置了样式overflow:hidden将超出的元素隐藏掉。\n```\nCrafty.background(\"#f0f0f0\");\n```\n你还可以通过background()方法给整个舞台设置背景颜色\n\n### 2. 放置场景\n当整个舞台初始化后就可以玩游戏了吧？不！你去剧院看戏一入座演员就给你演戏么，当然不是，还需要一些场景的带入和切换。这些场景比如加载动画、菜单选项等一系列。\n```\nCrafty.defineScene(\"loading\", function() {\n\tCrafty.background(\"#000\");\n\tCrafty.e(\"2D, DOM, Text\").attr({\n\t\tw: 100,\n\t\th: 20,\n\t\tx: 150,\n\t\ty: 120\n\t}).text(\"Loading\").css({\n\t\t\"text-align\": \"center\"\n\t}).textColor(\"#FFFFFF\");\n});\n```\n我们可以使用Crafty.defineScene()方法来定义一个场景。在这里我们定义了一个叫loading的场景，里面只有一个元素就是一行\"Loading\"的字。但是定义好了场景并没有显示在舞台上，因为这个场景并没有被调用到。\n```\nCrafty.enterScene(\"loading\");\n```\n通过enterScene()这个方法来展示刚才我们定义好场景，你会在舞台上看到这个场景。这个展示舞台的方法可以在任何地方被调用。但是需要注意的是这个方法会清除舞台上所有的元素，除了那些有\"Persist\"组件的元素（组件这一名词下面会解释到）。\n\n### 3. 实体/组件系统\n现在到了CraftyJS最重要的部分来了，就是CraftyJS独特的实体/组件系统。这个系统有点面向对象编程的意思。整个系统分为两个部分。\n##### (1) 组件系统\n所谓的组件，有点类似JAVA中的对象（不是现实里的对象），看不见摸不着，是对实体的抽象。每个组件里封装了对应的方法，可以在实体中直接调用。CraftyJS中有很多已经被预先定义好的组件可以直接拿来使用，而且组件可以被重复地继承。\n##### (2) 实体系统\n实体是真正看得见的元素，是对组件的“实例化”。一个单一的实体能够继承多个实体。\n```\nvar square = Crafty.e('2D, DOM, Color');\n```\n这样就通过e()方法定义了几个叫\"square\"的实体。这个实体继承了三个组件\"2D\"、\"DOM\"和\"Color\"，这三个组件预先在CraftyJS中就已经被定义好了。如果你觉得单单使用这三个组件还不够，你可以后续往\"square\"这个实体中再添加组件。\n```\nsquare.addComponent(\"Text\");\n```\n通过addComponent()方法向实体中加入\"Text\"组件，这个方法支持一次添加多个组件。\n```\nsquare.addComponent(\"Text,Mouse\");//这是可以的\n```\n\n你还可以通过has()方法判断某个实体中是否含有某个组件\n```\nsquare.has(\"Mouse\");\n```\n这个方法返回一个boolean类型的值。但是需要注意的是这个方法一次性只能判断一个组件存在，并不支持同时判定多个组件比如：\n```\nsquare.has(\"2D,DOM\");//这是错误的\n```\n\n如果你对某个组件不满意，你还可以把它删掉，这个方法也不支持传入两个以上的组件名称\n```\nsquare.removeComponent(\"2D\");\n```\n### 4. 常用的属性和方法\n##### (1) \"2D\"组件\n2D组件是CraftyJS预先给我们定义好的一个组件，是最常用的组件之一。他提供了一个attr()的方法让我们来设置实体的属性值。\n\n```\nsquare.attr({\n  x: 150,\n  y: 150,\n  w: 100,\n  h: 100,\n  alpha: 0.5,\n  rotation: 45,\n  visible:true\n  });\n```\n这里的x和y是实体相对于舞台左上角的位置，单位都为像素(px)。w和h是实体的宽度和高度，单位也是像素(px)。alpha是实体的透明度，取值范围是0到1。visible代表实体是否可见，只能接受boolean类型的参数。x、y、w、h如果不设置值，默认为0。\n##### (2) \"Text\"组件\nText组件有四个方法可以使用，分别是text()、textColor()、textFont()和unselectable()。text()方法用于设置组件里面的内容。\n```\nCrafty.e(\"2D,DOM,Text\").text(\"hello world!\");\n```\ntext()方法支持传入一个方法，但是这个方法必须要返回一个字符串类型的参数，否则这个组件的内容将会显示undefined(未定义)。\n```\nCrafty.e(\"2D, Canvas, Text\").text(function () { \n\treturn \"hello world!\";\n});\n```\ntextColor()方法用来设置组件文字的颜色，你可以使用HEX、rgb或者rgba的方式来定义颜色。\n```\nCrafty.e(\"2D, DOM, Text\").textColor('#FF0000')\n\t\t.textColor('rgba(0, 255, 0, 0.5)')\n\t\t.textColor('white');\n```\ntextFont()方法用来设置文字的字体。如果有多个字体的属性，传入一个对象的方式进行设置，Crafty支持设置的属性有以下几个：\n```\nCrafty.e(\"2D, DOM, Text\").textFont({ 'type': 'italic', 'family': 'Arial' , 'size':'20px', 'weight':'bold', 'lineHeight':'30px'});\n```\nunselectable()方法设置Text组件中的内容不能被高亮选中。Canvas的Text是不能被高亮选中的，所以这个方法只对DOM的Text组件有效。\n\n```\nCrafty.e(\"2D, DOM, Text\").text('This text cannot be highlighted!').unselectable();\n```","source":"_posts/CraftyJs-Start.md","raw":"title: CraftyJs初探\ndate: 2016-07-08 22:00:00\ndescription: \ncategories:\n- 编程\ntags:\n- 前端\n- 游戏引擎\n- CraftyJs\ntoc: true\nauthor:\ncomments:\noriginal:\npermalink: \nphotos:\n---\n　　前不久听了一趟分享课，分享课的主题是JS游戏的制作，但是如果是自己写游戏比较的繁琐，如果能应用一个游戏引擎，就能大大的简化游戏的开发速度和开发效率，于是我在网上参考了几个游戏引擎，找到了CraftyJs这个游戏引擎还是挺不错的，但是苦于网上的教程不是很全面，所以今天就开个坑，写个入门级的教程，仅供参考。\n<!-- more -->\n\n\n### 1. 初始化\n首先从[官网](http://craftyjs.com/)上下载CraftyJs的脚本引用到项目中来。然后就可以开始写我们自己的程序了。\n```\nCraftyJs.init(this.config.width,this.config.height);\n```\n这段代码用于初始化整个stage，用官方的话来说就是舞台，所有的元素将在这整个舞台里活动。这个舞台的宽度是this.config.width(px)，高度是this.config.height(px)。如果有元素超出了舞台的范围，这个元素将被遮住，因为整个舞台设置了样式overflow:hidden将超出的元素隐藏掉。\n```\nCrafty.background(\"#f0f0f0\");\n```\n你还可以通过background()方法给整个舞台设置背景颜色\n\n### 2. 放置场景\n当整个舞台初始化后就可以玩游戏了吧？不！你去剧院看戏一入座演员就给你演戏么，当然不是，还需要一些场景的带入和切换。这些场景比如加载动画、菜单选项等一系列。\n```\nCrafty.defineScene(\"loading\", function() {\n\tCrafty.background(\"#000\");\n\tCrafty.e(\"2D, DOM, Text\").attr({\n\t\tw: 100,\n\t\th: 20,\n\t\tx: 150,\n\t\ty: 120\n\t}).text(\"Loading\").css({\n\t\t\"text-align\": \"center\"\n\t}).textColor(\"#FFFFFF\");\n});\n```\n我们可以使用Crafty.defineScene()方法来定义一个场景。在这里我们定义了一个叫loading的场景，里面只有一个元素就是一行\"Loading\"的字。但是定义好了场景并没有显示在舞台上，因为这个场景并没有被调用到。\n```\nCrafty.enterScene(\"loading\");\n```\n通过enterScene()这个方法来展示刚才我们定义好场景，你会在舞台上看到这个场景。这个展示舞台的方法可以在任何地方被调用。但是需要注意的是这个方法会清除舞台上所有的元素，除了那些有\"Persist\"组件的元素（组件这一名词下面会解释到）。\n\n### 3. 实体/组件系统\n现在到了CraftyJS最重要的部分来了，就是CraftyJS独特的实体/组件系统。这个系统有点面向对象编程的意思。整个系统分为两个部分。\n##### (1) 组件系统\n所谓的组件，有点类似JAVA中的对象（不是现实里的对象），看不见摸不着，是对实体的抽象。每个组件里封装了对应的方法，可以在实体中直接调用。CraftyJS中有很多已经被预先定义好的组件可以直接拿来使用，而且组件可以被重复地继承。\n##### (2) 实体系统\n实体是真正看得见的元素，是对组件的“实例化”。一个单一的实体能够继承多个实体。\n```\nvar square = Crafty.e('2D, DOM, Color');\n```\n这样就通过e()方法定义了几个叫\"square\"的实体。这个实体继承了三个组件\"2D\"、\"DOM\"和\"Color\"，这三个组件预先在CraftyJS中就已经被定义好了。如果你觉得单单使用这三个组件还不够，你可以后续往\"square\"这个实体中再添加组件。\n```\nsquare.addComponent(\"Text\");\n```\n通过addComponent()方法向实体中加入\"Text\"组件，这个方法支持一次添加多个组件。\n```\nsquare.addComponent(\"Text,Mouse\");//这是可以的\n```\n\n你还可以通过has()方法判断某个实体中是否含有某个组件\n```\nsquare.has(\"Mouse\");\n```\n这个方法返回一个boolean类型的值。但是需要注意的是这个方法一次性只能判断一个组件存在，并不支持同时判定多个组件比如：\n```\nsquare.has(\"2D,DOM\");//这是错误的\n```\n\n如果你对某个组件不满意，你还可以把它删掉，这个方法也不支持传入两个以上的组件名称\n```\nsquare.removeComponent(\"2D\");\n```\n### 4. 常用的属性和方法\n##### (1) \"2D\"组件\n2D组件是CraftyJS预先给我们定义好的一个组件，是最常用的组件之一。他提供了一个attr()的方法让我们来设置实体的属性值。\n\n```\nsquare.attr({\n  x: 150,\n  y: 150,\n  w: 100,\n  h: 100,\n  alpha: 0.5,\n  rotation: 45,\n  visible:true\n  });\n```\n这里的x和y是实体相对于舞台左上角的位置，单位都为像素(px)。w和h是实体的宽度和高度，单位也是像素(px)。alpha是实体的透明度，取值范围是0到1。visible代表实体是否可见，只能接受boolean类型的参数。x、y、w、h如果不设置值，默认为0。\n##### (2) \"Text\"组件\nText组件有四个方法可以使用，分别是text()、textColor()、textFont()和unselectable()。text()方法用于设置组件里面的内容。\n```\nCrafty.e(\"2D,DOM,Text\").text(\"hello world!\");\n```\ntext()方法支持传入一个方法，但是这个方法必须要返回一个字符串类型的参数，否则这个组件的内容将会显示undefined(未定义)。\n```\nCrafty.e(\"2D, Canvas, Text\").text(function () { \n\treturn \"hello world!\";\n});\n```\ntextColor()方法用来设置组件文字的颜色，你可以使用HEX、rgb或者rgba的方式来定义颜色。\n```\nCrafty.e(\"2D, DOM, Text\").textColor('#FF0000')\n\t\t.textColor('rgba(0, 255, 0, 0.5)')\n\t\t.textColor('white');\n```\ntextFont()方法用来设置文字的字体。如果有多个字体的属性，传入一个对象的方式进行设置，Crafty支持设置的属性有以下几个：\n```\nCrafty.e(\"2D, DOM, Text\").textFont({ 'type': 'italic', 'family': 'Arial' , 'size':'20px', 'weight':'bold', 'lineHeight':'30px'});\n```\nunselectable()方法设置Text组件中的内容不能被高亮选中。Canvas的Text是不能被高亮选中的，所以这个方法只对DOM的Text组件有效。\n\n```\nCrafty.e(\"2D, DOM, Text\").text('This text cannot be highlighted!').unselectable();\n```","slug":"CraftyJs-Start","published":1,"updated":"2016-09-12T04:12:47.416Z","layout":"post","link":"","_id":"ciszndbl40000fcfi647jh10r","content":"<p>　　前不久听了一趟分享课，分享课的主题是JS游戏的制作，但是如果是自己写游戏比较的繁琐，如果能应用一个游戏引擎，就能大大的简化游戏的开发速度和开发效率，于是我在网上参考了几个游戏引擎，找到了CraftyJs这个游戏引擎还是挺不错的，但是苦于网上的教程不是很全面，所以今天就开个坑，写个入门级的教程，仅供参考。<br><a id=\"more\"></a></p>\n<h3 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h3><p>首先从<a href=\"http://craftyjs.com/\" target=\"_blank\" rel=\"external\">官网</a>上下载CraftyJs的脚本引用到项目中来。然后就可以开始写我们自己的程序了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CraftyJs.init(this.config.width,this.config.height);</div></pre></td></tr></table></figure></p>\n<p>这段代码用于初始化整个stage，用官方的话来说就是舞台，所有的元素将在这整个舞台里活动。这个舞台的宽度是this.config.width(px)，高度是this.config.height(px)。如果有元素超出了舞台的范围，这个元素将被遮住，因为整个舞台设置了样式overflow:hidden将超出的元素隐藏掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.background(&quot;#f0f0f0&quot;);</div></pre></td></tr></table></figure></p>\n<p>你还可以通过background()方法给整个舞台设置背景颜色</p>\n<h3 id=\"2-放置场景\"><a href=\"#2-放置场景\" class=\"headerlink\" title=\"2. 放置场景\"></a>2. 放置场景</h3><p>当整个舞台初始化后就可以玩游戏了吧？不！你去剧院看戏一入座演员就给你演戏么，当然不是，还需要一些场景的带入和切换。这些场景比如加载动画、菜单选项等一系列。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.defineScene(&quot;loading&quot;, function() &#123;</div><div class=\"line\">\tCrafty.background(&quot;#000&quot;);</div><div class=\"line\">\tCrafty.e(&quot;2D, DOM, Text&quot;).attr(&#123;</div><div class=\"line\">\t\tw: 100,</div><div class=\"line\">\t\th: 20,</div><div class=\"line\">\t\tx: 150,</div><div class=\"line\">\t\ty: 120</div><div class=\"line\">\t&#125;).text(&quot;Loading&quot;).css(&#123;</div><div class=\"line\">\t\t&quot;text-align&quot;: &quot;center&quot;</div><div class=\"line\">\t&#125;).textColor(&quot;#FFFFFF&quot;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们可以使用Crafty.defineScene()方法来定义一个场景。在这里我们定义了一个叫loading的场景，里面只有一个元素就是一行”Loading”的字。但是定义好了场景并没有显示在舞台上，因为这个场景并没有被调用到。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.enterScene(&quot;loading&quot;);</div></pre></td></tr></table></figure></p>\n<p>通过enterScene()这个方法来展示刚才我们定义好场景，你会在舞台上看到这个场景。这个展示舞台的方法可以在任何地方被调用。但是需要注意的是这个方法会清除舞台上所有的元素，除了那些有”Persist”组件的元素（组件这一名词下面会解释到）。</p>\n<h3 id=\"3-实体-组件系统\"><a href=\"#3-实体-组件系统\" class=\"headerlink\" title=\"3. 实体/组件系统\"></a>3. 实体/组件系统</h3><p>现在到了CraftyJS最重要的部分来了，就是CraftyJS独特的实体/组件系统。这个系统有点面向对象编程的意思。整个系统分为两个部分。</p>\n<h5 id=\"1-组件系统\"><a href=\"#1-组件系统\" class=\"headerlink\" title=\"(1) 组件系统\"></a>(1) 组件系统</h5><p>所谓的组件，有点类似JAVA中的对象（不是现实里的对象），看不见摸不着，是对实体的抽象。每个组件里封装了对应的方法，可以在实体中直接调用。CraftyJS中有很多已经被预先定义好的组件可以直接拿来使用，而且组件可以被重复地继承。</p>\n<h5 id=\"2-实体系统\"><a href=\"#2-实体系统\" class=\"headerlink\" title=\"(2) 实体系统\"></a>(2) 实体系统</h5><p>实体是真正看得见的元素，是对组件的“实例化”。一个单一的实体能够继承多个实体。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var square = Crafty.e(&apos;2D, DOM, Color&apos;);</div></pre></td></tr></table></figure></p>\n<p>这样就通过e()方法定义了几个叫”square”的实体。这个实体继承了三个组件”2D”、”DOM”和”Color”，这三个组件预先在CraftyJS中就已经被定义好了。如果你觉得单单使用这三个组件还不够，你可以后续往”square”这个实体中再添加组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.addComponent(&quot;Text&quot;);</div></pre></td></tr></table></figure></p>\n<p>通过addComponent()方法向实体中加入”Text”组件，这个方法支持一次添加多个组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.addComponent(&quot;Text,Mouse&quot;);//这是可以的</div></pre></td></tr></table></figure></p>\n<p>你还可以通过has()方法判断某个实体中是否含有某个组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.has(&quot;Mouse&quot;);</div></pre></td></tr></table></figure></p>\n<p>这个方法返回一个boolean类型的值。但是需要注意的是这个方法一次性只能判断一个组件存在，并不支持同时判定多个组件比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.has(&quot;2D,DOM&quot;);//这是错误的</div></pre></td></tr></table></figure></p>\n<p>如果你对某个组件不满意，你还可以把它删掉，这个方法也不支持传入两个以上的组件名称<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.removeComponent(&quot;2D&quot;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-常用的属性和方法\"><a href=\"#4-常用的属性和方法\" class=\"headerlink\" title=\"4. 常用的属性和方法\"></a>4. 常用的属性和方法</h3><h5 id=\"1-“2D”组件\"><a href=\"#1-“2D”组件\" class=\"headerlink\" title=\"(1) “2D”组件\"></a>(1) “2D”组件</h5><p>2D组件是CraftyJS预先给我们定义好的一个组件，是最常用的组件之一。他提供了一个attr()的方法让我们来设置实体的属性值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.attr(&#123;</div><div class=\"line\">  x: 150,</div><div class=\"line\">  y: 150,</div><div class=\"line\">  w: 100,</div><div class=\"line\">  h: 100,</div><div class=\"line\">  alpha: 0.5,</div><div class=\"line\">  rotation: 45,</div><div class=\"line\">  visible:true</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>这里的x和y是实体相对于舞台左上角的位置，单位都为像素(px)。w和h是实体的宽度和高度，单位也是像素(px)。alpha是实体的透明度，取值范围是0到1。visible代表实体是否可见，只能接受boolean类型的参数。x、y、w、h如果不设置值，默认为0。</p>\n<h5 id=\"2-“Text”组件\"><a href=\"#2-“Text”组件\" class=\"headerlink\" title=\"(2) “Text”组件\"></a>(2) “Text”组件</h5><p>Text组件有四个方法可以使用，分别是text()、textColor()、textFont()和unselectable()。text()方法用于设置组件里面的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D,DOM,Text&quot;).text(&quot;hello world!&quot;);</div></pre></td></tr></table></figure></p>\n<p>text()方法支持传入一个方法，但是这个方法必须要返回一个字符串类型的参数，否则这个组件的内容将会显示undefined(未定义)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, Canvas, Text&quot;).text(function () &#123; </div><div class=\"line\">\treturn &quot;hello world!&quot;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>textColor()方法用来设置组件文字的颜色，你可以使用HEX、rgb或者rgba的方式来定义颜色。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).textColor(&apos;#FF0000&apos;)</div><div class=\"line\">\t\t.textColor(&apos;rgba(0, 255, 0, 0.5)&apos;)</div><div class=\"line\">\t\t.textColor(&apos;white&apos;);</div></pre></td></tr></table></figure></p>\n<p>textFont()方法用来设置文字的字体。如果有多个字体的属性，传入一个对象的方式进行设置，Crafty支持设置的属性有以下几个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).textFont(&#123; &apos;type&apos;: &apos;italic&apos;, &apos;family&apos;: &apos;Arial&apos; , &apos;size&apos;:&apos;20px&apos;, &apos;weight&apos;:&apos;bold&apos;, &apos;lineHeight&apos;:&apos;30px&apos;&#125;);</div></pre></td></tr></table></figure></p>\n<p>unselectable()方法设置Text组件中的内容不能被高亮选中。Canvas的Text是不能被高亮选中的，所以这个方法只对DOM的Text组件有效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).text(&apos;This text cannot be highlighted!&apos;).unselectable();</div></pre></td></tr></table></figure>","excerpt":"<p>　　前不久听了一趟分享课，分享课的主题是JS游戏的制作，但是如果是自己写游戏比较的繁琐，如果能应用一个游戏引擎，就能大大的简化游戏的开发速度和开发效率，于是我在网上参考了几个游戏引擎，找到了CraftyJs这个游戏引擎还是挺不错的，但是苦于网上的教程不是很全面，所以今天就开个坑，写个入门级的教程，仅供参考。<br>","more":"</p>\n<h3 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h3><p>首先从<a href=\"http://craftyjs.com/\">官网</a>上下载CraftyJs的脚本引用到项目中来。然后就可以开始写我们自己的程序了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CraftyJs.init(this.config.width,this.config.height);</div></pre></td></tr></table></figure></p>\n<p>这段代码用于初始化整个stage，用官方的话来说就是舞台，所有的元素将在这整个舞台里活动。这个舞台的宽度是this.config.width(px)，高度是this.config.height(px)。如果有元素超出了舞台的范围，这个元素将被遮住，因为整个舞台设置了样式overflow:hidden将超出的元素隐藏掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.background(&quot;#f0f0f0&quot;);</div></pre></td></tr></table></figure></p>\n<p>你还可以通过background()方法给整个舞台设置背景颜色</p>\n<h3 id=\"2-放置场景\"><a href=\"#2-放置场景\" class=\"headerlink\" title=\"2. 放置场景\"></a>2. 放置场景</h3><p>当整个舞台初始化后就可以玩游戏了吧？不！你去剧院看戏一入座演员就给你演戏么，当然不是，还需要一些场景的带入和切换。这些场景比如加载动画、菜单选项等一系列。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.defineScene(&quot;loading&quot;, function() &#123;</div><div class=\"line\">\tCrafty.background(&quot;#000&quot;);</div><div class=\"line\">\tCrafty.e(&quot;2D, DOM, Text&quot;).attr(&#123;</div><div class=\"line\">\t\tw: 100,</div><div class=\"line\">\t\th: 20,</div><div class=\"line\">\t\tx: 150,</div><div class=\"line\">\t\ty: 120</div><div class=\"line\">\t&#125;).text(&quot;Loading&quot;).css(&#123;</div><div class=\"line\">\t\t&quot;text-align&quot;: &quot;center&quot;</div><div class=\"line\">\t&#125;).textColor(&quot;#FFFFFF&quot;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们可以使用Crafty.defineScene()方法来定义一个场景。在这里我们定义了一个叫loading的场景，里面只有一个元素就是一行”Loading”的字。但是定义好了场景并没有显示在舞台上，因为这个场景并没有被调用到。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.enterScene(&quot;loading&quot;);</div></pre></td></tr></table></figure></p>\n<p>通过enterScene()这个方法来展示刚才我们定义好场景，你会在舞台上看到这个场景。这个展示舞台的方法可以在任何地方被调用。但是需要注意的是这个方法会清除舞台上所有的元素，除了那些有”Persist”组件的元素（组件这一名词下面会解释到）。</p>\n<h3 id=\"3-实体-组件系统\"><a href=\"#3-实体-组件系统\" class=\"headerlink\" title=\"3. 实体/组件系统\"></a>3. 实体/组件系统</h3><p>现在到了CraftyJS最重要的部分来了，就是CraftyJS独特的实体/组件系统。这个系统有点面向对象编程的意思。整个系统分为两个部分。</p>\n<h5 id=\"1-组件系统\"><a href=\"#1-组件系统\" class=\"headerlink\" title=\"(1) 组件系统\"></a>(1) 组件系统</h5><p>所谓的组件，有点类似JAVA中的对象（不是现实里的对象），看不见摸不着，是对实体的抽象。每个组件里封装了对应的方法，可以在实体中直接调用。CraftyJS中有很多已经被预先定义好的组件可以直接拿来使用，而且组件可以被重复地继承。</p>\n<h5 id=\"2-实体系统\"><a href=\"#2-实体系统\" class=\"headerlink\" title=\"(2) 实体系统\"></a>(2) 实体系统</h5><p>实体是真正看得见的元素，是对组件的“实例化”。一个单一的实体能够继承多个实体。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var square = Crafty.e(&apos;2D, DOM, Color&apos;);</div></pre></td></tr></table></figure></p>\n<p>这样就通过e()方法定义了几个叫”square”的实体。这个实体继承了三个组件”2D”、”DOM”和”Color”，这三个组件预先在CraftyJS中就已经被定义好了。如果你觉得单单使用这三个组件还不够，你可以后续往”square”这个实体中再添加组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.addComponent(&quot;Text&quot;);</div></pre></td></tr></table></figure></p>\n<p>通过addComponent()方法向实体中加入”Text”组件，这个方法支持一次添加多个组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.addComponent(&quot;Text,Mouse&quot;);//这是可以的</div></pre></td></tr></table></figure></p>\n<p>你还可以通过has()方法判断某个实体中是否含有某个组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.has(&quot;Mouse&quot;);</div></pre></td></tr></table></figure></p>\n<p>这个方法返回一个boolean类型的值。但是需要注意的是这个方法一次性只能判断一个组件存在，并不支持同时判定多个组件比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.has(&quot;2D,DOM&quot;);//这是错误的</div></pre></td></tr></table></figure></p>\n<p>如果你对某个组件不满意，你还可以把它删掉，这个方法也不支持传入两个以上的组件名称<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.removeComponent(&quot;2D&quot;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-常用的属性和方法\"><a href=\"#4-常用的属性和方法\" class=\"headerlink\" title=\"4. 常用的属性和方法\"></a>4. 常用的属性和方法</h3><h5 id=\"1-“2D”组件\"><a href=\"#1-“2D”组件\" class=\"headerlink\" title=\"(1) “2D”组件\"></a>(1) “2D”组件</h5><p>2D组件是CraftyJS预先给我们定义好的一个组件，是最常用的组件之一。他提供了一个attr()的方法让我们来设置实体的属性值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.attr(&#123;</div><div class=\"line\">  x: 150,</div><div class=\"line\">  y: 150,</div><div class=\"line\">  w: 100,</div><div class=\"line\">  h: 100,</div><div class=\"line\">  alpha: 0.5,</div><div class=\"line\">  rotation: 45,</div><div class=\"line\">  visible:true</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>这里的x和y是实体相对于舞台左上角的位置，单位都为像素(px)。w和h是实体的宽度和高度，单位也是像素(px)。alpha是实体的透明度，取值范围是0到1。visible代表实体是否可见，只能接受boolean类型的参数。x、y、w、h如果不设置值，默认为0。</p>\n<h5 id=\"2-“Text”组件\"><a href=\"#2-“Text”组件\" class=\"headerlink\" title=\"(2) “Text”组件\"></a>(2) “Text”组件</h5><p>Text组件有四个方法可以使用，分别是text()、textColor()、textFont()和unselectable()。text()方法用于设置组件里面的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D,DOM,Text&quot;).text(&quot;hello world!&quot;);</div></pre></td></tr></table></figure></p>\n<p>text()方法支持传入一个方法，但是这个方法必须要返回一个字符串类型的参数，否则这个组件的内容将会显示undefined(未定义)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, Canvas, Text&quot;).text(function () &#123; </div><div class=\"line\">\treturn &quot;hello world!&quot;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>textColor()方法用来设置组件文字的颜色，你可以使用HEX、rgb或者rgba的方式来定义颜色。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).textColor(&apos;#FF0000&apos;)</div><div class=\"line\">\t\t.textColor(&apos;rgba(0, 255, 0, 0.5)&apos;)</div><div class=\"line\">\t\t.textColor(&apos;white&apos;);</div></pre></td></tr></table></figure></p>\n<p>textFont()方法用来设置文字的字体。如果有多个字体的属性，传入一个对象的方式进行设置，Crafty支持设置的属性有以下几个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).textFont(&#123; &apos;type&apos;: &apos;italic&apos;, &apos;family&apos;: &apos;Arial&apos; , &apos;size&apos;:&apos;20px&apos;, &apos;weight&apos;:&apos;bold&apos;, &apos;lineHeight&apos;:&apos;30px&apos;&#125;);</div></pre></td></tr></table></figure></p>\n<p>unselectable()方法设置Text组件中的内容不能被高亮选中。Canvas的Text是不能被高亮选中的，所以这个方法只对DOM的Text组件有效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).text(&apos;This text cannot be highlighted!&apos;).unselectable();</div></pre></td></tr></table></figure>"},{"title":"Git命令学习（上）","date":"2016-09-11T01:48:00.000Z","description":null,"toc":true,"author":null,"comments":1,"original":null,"photos":[],"_content":"　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的基本操作。\n<!-- more -->\n\n\n## 1. 创建版本库\n\n### 创建目录\n```\nmkdir example\ncd example\n```\n### 将这个目录变成版本库\n```\ngit init\n```\n目录下多一个.git目录，用来跟踪管理版本库，你也可以把线上的项目克隆到本地，使用下面的命令\n\n```\ngit clone [url]\n```\n## 2.将文件添加到版本库\n\n### 追踪文件\n```\ngit add [filename]\n```\n或者一次性添加所有未追踪的文件\n```\ngit add .\n```\n### 提交到仓库\n```\ngit commit -m \"[you description]\"\n```\n\n## 3.查看当前仓库的状态\n\n```\ngit status\n```\n\n这个命令用来查看仓库的详细状态，添加-s查看简要的状态(s表示short)\n\n```\ngit status -s\n```\n\n简要状态下前面的符号代表的意思：\n\n* ?? 表示添加文件后而未追踪的文件\n* M 表示修改文件(Modify)\n* A 表示添加文件后追踪了该文件(Add)\n* D 表示删除文件(Delete)\n\n简要状态下颜色的不同也有区别。如果是红色，则表示该文件修改后没有追踪；是绿色则表示修改后追踪了改文件。\n\n## 4.对比文件差异\n\ngit diff(difference)此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容\n```\ngit diff\n```\n如果使用add命令追踪该文件后，diff命令失效。\n## 5.显示提交的日志\n```\ngit log\n```\nlog命令用于显示从最近到以前的提交日志，commit后面显示的一长串字符数字是该次提交所对应的版本号，每次都不会重复的。log命令显示的信息比较多，可以加上 --pretty=oneline 参数\n```\ngit log --pretty=oneline\n```\n在下面的版本回退中需要用到提交日志的版本号，这时候就需要复制这个版本号。在windows下复制git窗口中的内容的快捷键是Ctrl+Insert，粘贴是Insert\n\n## 6.版本回退\n```\ngit reset --hard [LogId]\n```\nreset命令用于控制版本回退到之前提交时的状态。这边的LogId就是上一节中复制出来的版本号。\n\n## 7.撤销修改\n```\ngit checkout -- [filename]\n```\ncheckout命令让你在工作区做的修改全部撤销，回到上一次commit时的状态。\n\n## 8.删除文件\n如果你在工作区删除了一个文件，那么status就会提醒你工作区和暂存区不一致。这时候你有两种选择，一个是git rm命令确认删除，\n```\ngit rm [filename]\n```\n这个命令相当于同时进行了删除命令和追踪文件命令，其等价命令如下：\n```\nrm [filename]\ngit add [filename]\n```\n另一个是通过checkout命令找回删除的文件\n```\ngit checkout -- [filename]\n```\n","source":"_posts/Git-Command-Start.md","raw":"title: Git命令学习（上）\ndate: 2016-09-11 09:48:00\ndescription: \ncategories:\n- 编程\ntags:\n- git\ntoc: true\nauthor:\ncomments:\noriginal:\npermalink: \nphotos:\n---\n　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的基本操作。\n<!-- more -->\n\n\n## 1. 创建版本库\n\n### 创建目录\n```\nmkdir example\ncd example\n```\n### 将这个目录变成版本库\n```\ngit init\n```\n目录下多一个.git目录，用来跟踪管理版本库，你也可以把线上的项目克隆到本地，使用下面的命令\n\n```\ngit clone [url]\n```\n## 2.将文件添加到版本库\n\n### 追踪文件\n```\ngit add [filename]\n```\n或者一次性添加所有未追踪的文件\n```\ngit add .\n```\n### 提交到仓库\n```\ngit commit -m \"[you description]\"\n```\n\n## 3.查看当前仓库的状态\n\n```\ngit status\n```\n\n这个命令用来查看仓库的详细状态，添加-s查看简要的状态(s表示short)\n\n```\ngit status -s\n```\n\n简要状态下前面的符号代表的意思：\n\n* ?? 表示添加文件后而未追踪的文件\n* M 表示修改文件(Modify)\n* A 表示添加文件后追踪了该文件(Add)\n* D 表示删除文件(Delete)\n\n简要状态下颜色的不同也有区别。如果是红色，则表示该文件修改后没有追踪；是绿色则表示修改后追踪了改文件。\n\n## 4.对比文件差异\n\ngit diff(difference)此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容\n```\ngit diff\n```\n如果使用add命令追踪该文件后，diff命令失效。\n## 5.显示提交的日志\n```\ngit log\n```\nlog命令用于显示从最近到以前的提交日志，commit后面显示的一长串字符数字是该次提交所对应的版本号，每次都不会重复的。log命令显示的信息比较多，可以加上 --pretty=oneline 参数\n```\ngit log --pretty=oneline\n```\n在下面的版本回退中需要用到提交日志的版本号，这时候就需要复制这个版本号。在windows下复制git窗口中的内容的快捷键是Ctrl+Insert，粘贴是Insert\n\n## 6.版本回退\n```\ngit reset --hard [LogId]\n```\nreset命令用于控制版本回退到之前提交时的状态。这边的LogId就是上一节中复制出来的版本号。\n\n## 7.撤销修改\n```\ngit checkout -- [filename]\n```\ncheckout命令让你在工作区做的修改全部撤销，回到上一次commit时的状态。\n\n## 8.删除文件\n如果你在工作区删除了一个文件，那么status就会提醒你工作区和暂存区不一致。这时候你有两种选择，一个是git rm命令确认删除，\n```\ngit rm [filename]\n```\n这个命令相当于同时进行了删除命令和追踪文件命令，其等价命令如下：\n```\nrm [filename]\ngit add [filename]\n```\n另一个是通过checkout命令找回删除的文件\n```\ngit checkout -- [filename]\n```\n","slug":"Git-Command-Start","published":1,"updated":"2016-09-12T08:09:09.788Z","_id":"ciszndblh0001fcfid73xshfy","layout":"post","link":"","content":"<p>　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的基本操作。<br><a id=\"more\"></a></p>\n<h2 id=\"1-创建版本库\"><a href=\"#1-创建版本库\" class=\"headerlink\" title=\"1. 创建版本库\"></a>1. 创建版本库</h2><h3 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir example</div><div class=\"line\">cd example</div></pre></td></tr></table></figure>\n<h3 id=\"将这个目录变成版本库\"><a href=\"#将这个目录变成版本库\" class=\"headerlink\" title=\"将这个目录变成版本库\"></a>将这个目录变成版本库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure>\n<p>目录下多一个.git目录，用来跟踪管理版本库，你也可以把线上的项目克隆到本地，使用下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone [url]</div></pre></td></tr></table></figure>\n<h2 id=\"2-将文件添加到版本库\"><a href=\"#2-将文件添加到版本库\" class=\"headerlink\" title=\"2.将文件添加到版本库\"></a>2.将文件添加到版本库</h2><h3 id=\"追踪文件\"><a href=\"#追踪文件\" class=\"headerlink\" title=\"追踪文件\"></a>追踪文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add [filename]</div></pre></td></tr></table></figure>\n<p>或者一次性添加所有未追踪的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div></pre></td></tr></table></figure></p>\n<h3 id=\"提交到仓库\"><a href=\"#提交到仓库\" class=\"headerlink\" title=\"提交到仓库\"></a>提交到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;[you description]&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"3-查看当前仓库的状态\"><a href=\"#3-查看当前仓库的状态\" class=\"headerlink\" title=\"3.查看当前仓库的状态\"></a>3.查看当前仓库的状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p>这个命令用来查看仓库的详细状态，添加-s查看简要的状态(s表示short)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status -s</div></pre></td></tr></table></figure>\n<p>简要状态下前面的符号代表的意思：</p>\n<ul>\n<li>?? 表示添加文件后而未追踪的文件</li>\n<li>M 表示修改文件(Modify)</li>\n<li>A 表示添加文件后追踪了该文件(Add)</li>\n<li>D 表示删除文件(Delete)</li>\n</ul>\n<p>简要状态下颜色的不同也有区别。如果是红色，则表示该文件修改后没有追踪；是绿色则表示修改后追踪了改文件。</p>\n<h2 id=\"4-对比文件差异\"><a href=\"#4-对比文件差异\" class=\"headerlink\" title=\"4.对比文件差异\"></a>4.对比文件差异</h2><p>git diff(difference)此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div></pre></td></tr></table></figure></p>\n<p>如果使用add命令追踪该文件后，diff命令失效。</p>\n<h2 id=\"5-显示提交的日志\"><a href=\"#5-显示提交的日志\" class=\"headerlink\" title=\"5.显示提交的日志\"></a>5.显示提交的日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div></pre></td></tr></table></figure>\n<p>log命令用于显示从最近到以前的提交日志，commit后面显示的一长串字符数字是该次提交所对应的版本号，每次都不会重复的。log命令显示的信息比较多，可以加上 –pretty=oneline 参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --pretty=oneline</div></pre></td></tr></table></figure></p>\n<p>在下面的版本回退中需要用到提交日志的版本号，这时候就需要复制这个版本号。在windows下复制git窗口中的内容的快捷键是Ctrl+Insert，粘贴是Insert</p>\n<h2 id=\"6-版本回退\"><a href=\"#6-版本回退\" class=\"headerlink\" title=\"6.版本回退\"></a>6.版本回退</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard [LogId]</div></pre></td></tr></table></figure>\n<p>reset命令用于控制版本回退到之前提交时的状态。这边的LogId就是上一节中复制出来的版本号。</p>\n<h2 id=\"7-撤销修改\"><a href=\"#7-撤销修改\" class=\"headerlink\" title=\"7.撤销修改\"></a>7.撤销修改</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- [filename]</div></pre></td></tr></table></figure>\n<p>checkout命令让你在工作区做的修改全部撤销，回到上一次commit时的状态。</p>\n<h2 id=\"8-删除文件\"><a href=\"#8-删除文件\" class=\"headerlink\" title=\"8.删除文件\"></a>8.删除文件</h2><p>如果你在工作区删除了一个文件，那么status就会提醒你工作区和暂存区不一致。这时候你有两种选择，一个是git rm命令确认删除，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm [filename]</div></pre></td></tr></table></figure></p>\n<p>这个命令相当于同时进行了删除命令和追踪文件命令，其等价命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm [filename]</div><div class=\"line\">git add [filename]</div></pre></td></tr></table></figure></p>\n<p>另一个是通过checkout命令找回删除的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- [filename]</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的基本操作。<br>","more":"</p>\n<h2 id=\"1-创建版本库\"><a href=\"#1-创建版本库\" class=\"headerlink\" title=\"1. 创建版本库\"></a>1. 创建版本库</h2><h3 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir example</div><div class=\"line\">cd example</div></pre></td></tr></table></figure>\n<h3 id=\"将这个目录变成版本库\"><a href=\"#将这个目录变成版本库\" class=\"headerlink\" title=\"将这个目录变成版本库\"></a>将这个目录变成版本库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure>\n<p>目录下多一个.git目录，用来跟踪管理版本库，你也可以把线上的项目克隆到本地，使用下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone [url]</div></pre></td></tr></table></figure>\n<h2 id=\"2-将文件添加到版本库\"><a href=\"#2-将文件添加到版本库\" class=\"headerlink\" title=\"2.将文件添加到版本库\"></a>2.将文件添加到版本库</h2><h3 id=\"追踪文件\"><a href=\"#追踪文件\" class=\"headerlink\" title=\"追踪文件\"></a>追踪文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add [filename]</div></pre></td></tr></table></figure>\n<p>或者一次性添加所有未追踪的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div></pre></td></tr></table></figure></p>\n<h3 id=\"提交到仓库\"><a href=\"#提交到仓库\" class=\"headerlink\" title=\"提交到仓库\"></a>提交到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;[you description]&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"3-查看当前仓库的状态\"><a href=\"#3-查看当前仓库的状态\" class=\"headerlink\" title=\"3.查看当前仓库的状态\"></a>3.查看当前仓库的状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p>这个命令用来查看仓库的详细状态，添加-s查看简要的状态(s表示short)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status -s</div></pre></td></tr></table></figure>\n<p>简要状态下前面的符号代表的意思：</p>\n<ul>\n<li>?? 表示添加文件后而未追踪的文件</li>\n<li>M 表示修改文件(Modify)</li>\n<li>A 表示添加文件后追踪了该文件(Add)</li>\n<li>D 表示删除文件(Delete)</li>\n</ul>\n<p>简要状态下颜色的不同也有区别。如果是红色，则表示该文件修改后没有追踪；是绿色则表示修改后追踪了改文件。</p>\n<h2 id=\"4-对比文件差异\"><a href=\"#4-对比文件差异\" class=\"headerlink\" title=\"4.对比文件差异\"></a>4.对比文件差异</h2><p>git diff(difference)此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div></pre></td></tr></table></figure></p>\n<p>如果使用add命令追踪该文件后，diff命令失效。</p>\n<h2 id=\"5-显示提交的日志\"><a href=\"#5-显示提交的日志\" class=\"headerlink\" title=\"5.显示提交的日志\"></a>5.显示提交的日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div></pre></td></tr></table></figure>\n<p>log命令用于显示从最近到以前的提交日志，commit后面显示的一长串字符数字是该次提交所对应的版本号，每次都不会重复的。log命令显示的信息比较多，可以加上 –pretty=oneline 参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --pretty=oneline</div></pre></td></tr></table></figure></p>\n<p>在下面的版本回退中需要用到提交日志的版本号，这时候就需要复制这个版本号。在windows下复制git窗口中的内容的快捷键是Ctrl+Insert，粘贴是Insert</p>\n<h2 id=\"6-版本回退\"><a href=\"#6-版本回退\" class=\"headerlink\" title=\"6.版本回退\"></a>6.版本回退</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard [LogId]</div></pre></td></tr></table></figure>\n<p>reset命令用于控制版本回退到之前提交时的状态。这边的LogId就是上一节中复制出来的版本号。</p>\n<h2 id=\"7-撤销修改\"><a href=\"#7-撤销修改\" class=\"headerlink\" title=\"7.撤销修改\"></a>7.撤销修改</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- [filename]</div></pre></td></tr></table></figure>\n<p>checkout命令让你在工作区做的修改全部撤销，回到上一次commit时的状态。</p>\n<h2 id=\"8-删除文件\"><a href=\"#8-删除文件\" class=\"headerlink\" title=\"8.删除文件\"></a>8.删除文件</h2><p>如果你在工作区删除了一个文件，那么status就会提醒你工作区和暂存区不一致。这时候你有两种选择，一个是git rm命令确认删除，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm [filename]</div></pre></td></tr></table></figure></p>\n<p>这个命令相当于同时进行了删除命令和追踪文件命令，其等价命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm [filename]</div><div class=\"line\">git add [filename]</div></pre></td></tr></table></figure></p>\n<p>另一个是通过checkout命令找回删除的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- [filename]</div></pre></td></tr></table></figure></p>"},{"title":"JAVA处理跨域问题","date":"2016-05-28T05:58:00.000Z","description":null,"toc":true,"author":null,"comments":1,"original":null,"photos":[],"_content":"　　在写前端脚本的时候我们经常会遇到发送数据到后台的情况，但是由于浏览器的限制，不同域名之间的数据是不能互相访问的，那前端怎么和后端如何进行数据之间的交换呢？\n<!-- more -->\n\n\nJavaScript由于安全性方面的考虑，不允许页面跨域调用其他页面的对象，那么问题来了，什么是跨域问题？\n答：这是由于浏览器同源策略的限制，现在所有支持JavaScript的浏览器都使用了这个策略。那么什么是同源呢？所谓的同源是指三个方面“相同”：\n1. 域名相同\n2. 协议相同\n3. 端口相同\n下面就举几个例子来帮助更好的理解同源策略。\n\n| URL        |      说明      | 是否允许通信  |\n| ---------- | -------------- | ------------- |\n| http://www.a.com/a.js <br> http://www.a.com/b.js       | 同一域名           |  允许    |\n| http://www.a.com/a.js <br> http://www.b.com/a.js       | 不同域名           |  不允许  |\n| http://www.a.com:8000/a.js<br>http://www.a.com/b.js    |  同一域名不同端口  |  不允许  |\n| https://www.a.com/a.js <br> http://www.a.com/b.js      | 同一域名不同协议   |  不允许  |\n\n\n在JAVA中处理跨域问题，通常有以下两种常用的解决方法。\n\n#### 第一种解决方法\n后台代码在被请求的Servlet中添加Header设置：\n\n```\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\nPrintWriter out =null;\ntry\n{\n\tout = response.getWriter();\n} catch (IOException e)\n{\n\t// TODO Auto-generated catch block\n\te.printStackTrace();\n}\nout.print(\"{'status':'ok'}\");\nout.flush();\nout.close();\n```\n\nAccess-Control-Allow-Origin这个Header在W3C标准里用来检查该跨域请求是否可以被通过，如果值为*则表明当前页面可以跨域访问。默认的情况下是不允许的。\n在前端JS中需要向Servlet发出请求，请求代码如下所示：\n\n```\n$.ajax({\n  url: \"your url\",\n  type:\"get or post\",\n  dataType:\"json\",\n  data:{\n    ....\n  },\n  success:function(data){\n    ...\n  }\n```\n\n#### 第二种解决方法\n通过jsonp跨域请求的方式。JSONP和JSON虽然只有一个字母的区别，但是他们完全就是两回事，很多人很容易把他们搞混。JSON是一种数据交换的格式，而JSONP则是一种非官方跨域数据交互协议。\n首先来说一下前端JS是怎么发送请求。代码如下所示：\n\n```\n$.ajax({\n  url:\"your url\",\n  type:\"get or post\",\n  async:false,\n  dataType : \"jsonp\",\n  //服务端用于接收callback调用的function名的参数\n  jsonp:\"callbackparam\",\n  //callback的function名称\n  jsonpCallback:\"success_jsonpCallback\",\n  success:function(data){\n    console.log(data);\n  },\n  error:function(data){\n    console.log(data);\n  }\n});\n```\n\n这里的callbackparam和success_jsonpCallback可以理解为发送的data数据的键值对，可以自定义，但是callbackparam需要和后台约定好参数名称，因为后台需要获取到这个参数里面的值（即success_jsonpCallback）。\n下面，最重要的来了，后台怎么样获取和返回数据呢。代码如下所示:\n\n```\n  PrintWriter out =null;\n  String callback=req.getParameter(\"callbackparam\");\n  String json=callback+\"({'status':'ok'})\";\n  try\n  {\n    out = resp.getWriter();\n  } catch (IOException e)\n  {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n  out.print(json);\n  out.flush();\n  out.close();\n```\n\n首先需要获取参数名为callbackparam的值，这里获取到的值就是“success_jsonpCallback”。然后将这个值加上一对小括号。小括号里放入你需要返回的数据内容，比如这里我返回一个JSON对象。当然你也可以返回其他对象，比如只返回一个字符串类型数据也可以。最后前端JS返回的数据就是这样的：\n\n```\nsuccess_jsonpCallback({'status':'ok'})\n```\n\n浏览器会自动解析为json对象，这时候你只需要在success回调函数中直接用data.status就可以了。\n\n\n\n\n\n","source":"_posts/Java-Ajax.md","raw":"title: JAVA处理跨域问题\ndate: 2016-05-28 13:58:00\ndescription: \ncategories:\n- 编程\ntags:\n- JAVA\n- 异步跨域\ntoc: true\nauthor:\ncomments:\noriginal:\npermalink: \nphotos:\n---\n　　在写前端脚本的时候我们经常会遇到发送数据到后台的情况，但是由于浏览器的限制，不同域名之间的数据是不能互相访问的，那前端怎么和后端如何进行数据之间的交换呢？\n<!-- more -->\n\n\nJavaScript由于安全性方面的考虑，不允许页面跨域调用其他页面的对象，那么问题来了，什么是跨域问题？\n答：这是由于浏览器同源策略的限制，现在所有支持JavaScript的浏览器都使用了这个策略。那么什么是同源呢？所谓的同源是指三个方面“相同”：\n1. 域名相同\n2. 协议相同\n3. 端口相同\n下面就举几个例子来帮助更好的理解同源策略。\n\n| URL        |      说明      | 是否允许通信  |\n| ---------- | -------------- | ------------- |\n| http://www.a.com/a.js <br> http://www.a.com/b.js       | 同一域名           |  允许    |\n| http://www.a.com/a.js <br> http://www.b.com/a.js       | 不同域名           |  不允许  |\n| http://www.a.com:8000/a.js<br>http://www.a.com/b.js    |  同一域名不同端口  |  不允许  |\n| https://www.a.com/a.js <br> http://www.a.com/b.js      | 同一域名不同协议   |  不允许  |\n\n\n在JAVA中处理跨域问题，通常有以下两种常用的解决方法。\n\n#### 第一种解决方法\n后台代码在被请求的Servlet中添加Header设置：\n\n```\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\nPrintWriter out =null;\ntry\n{\n\tout = response.getWriter();\n} catch (IOException e)\n{\n\t// TODO Auto-generated catch block\n\te.printStackTrace();\n}\nout.print(\"{'status':'ok'}\");\nout.flush();\nout.close();\n```\n\nAccess-Control-Allow-Origin这个Header在W3C标准里用来检查该跨域请求是否可以被通过，如果值为*则表明当前页面可以跨域访问。默认的情况下是不允许的。\n在前端JS中需要向Servlet发出请求，请求代码如下所示：\n\n```\n$.ajax({\n  url: \"your url\",\n  type:\"get or post\",\n  dataType:\"json\",\n  data:{\n    ....\n  },\n  success:function(data){\n    ...\n  }\n```\n\n#### 第二种解决方法\n通过jsonp跨域请求的方式。JSONP和JSON虽然只有一个字母的区别，但是他们完全就是两回事，很多人很容易把他们搞混。JSON是一种数据交换的格式，而JSONP则是一种非官方跨域数据交互协议。\n首先来说一下前端JS是怎么发送请求。代码如下所示：\n\n```\n$.ajax({\n  url:\"your url\",\n  type:\"get or post\",\n  async:false,\n  dataType : \"jsonp\",\n  //服务端用于接收callback调用的function名的参数\n  jsonp:\"callbackparam\",\n  //callback的function名称\n  jsonpCallback:\"success_jsonpCallback\",\n  success:function(data){\n    console.log(data);\n  },\n  error:function(data){\n    console.log(data);\n  }\n});\n```\n\n这里的callbackparam和success_jsonpCallback可以理解为发送的data数据的键值对，可以自定义，但是callbackparam需要和后台约定好参数名称，因为后台需要获取到这个参数里面的值（即success_jsonpCallback）。\n下面，最重要的来了，后台怎么样获取和返回数据呢。代码如下所示:\n\n```\n  PrintWriter out =null;\n  String callback=req.getParameter(\"callbackparam\");\n  String json=callback+\"({'status':'ok'})\";\n  try\n  {\n    out = resp.getWriter();\n  } catch (IOException e)\n  {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n  out.print(json);\n  out.flush();\n  out.close();\n```\n\n首先需要获取参数名为callbackparam的值，这里获取到的值就是“success_jsonpCallback”。然后将这个值加上一对小括号。小括号里放入你需要返回的数据内容，比如这里我返回一个JSON对象。当然你也可以返回其他对象，比如只返回一个字符串类型数据也可以。最后前端JS返回的数据就是这样的：\n\n```\nsuccess_jsonpCallback({'status':'ok'})\n```\n\n浏览器会自动解析为json对象，这时候你只需要在success回调函数中直接用data.status就可以了。\n\n\n\n\n\n","slug":"Java-Ajax","published":1,"updated":"2016-09-12T04:12:52.441Z","layout":"post","link":"","_id":"ciszndblq0004fcfikz05j5r2","content":"<p>　　在写前端脚本的时候我们经常会遇到发送数据到后台的情况，但是由于浏览器的限制，不同域名之间的数据是不能互相访问的，那前端怎么和后端如何进行数据之间的交换呢？<br><a id=\"more\"></a></p>\n<p>JavaScript由于安全性方面的考虑，不允许页面跨域调用其他页面的对象，那么问题来了，什么是跨域问题？<br>答：这是由于浏览器同源策略的限制，现在所有支持JavaScript的浏览器都使用了这个策略。那么什么是同源呢？所谓的同源是指三个方面“相同”：</p>\n<ol>\n<li>域名相同</li>\n<li>协议相同</li>\n<li>端口相同<br>下面就举几个例子来帮助更好的理解同源策略。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br> <a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br> <a href=\"http://www.b.com/a.js\" target=\"_blank\" rel=\"external\">http://www.b.com/a.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com:8000/a.js</a><br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"https://www.a.com/a.js\" target=\"_blank\" rel=\"external\">https://www.a.com/a.js</a> <br> <a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名不同协议</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<p>在JAVA中处理跨域问题，通常有以下两种常用的解决方法。</p>\n<h4 id=\"第一种解决方法\"><a href=\"#第一种解决方法\" class=\"headerlink\" title=\"第一种解决方法\"></a>第一种解决方法</h4><p>后台代码在被请求的Servlet中添加Header设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class=\"line\">PrintWriter out =null;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">\tout = response.getWriter();</div><div class=\"line\">&#125; catch (IOException e)</div><div class=\"line\">&#123;</div><div class=\"line\">\t// TODO Auto-generated catch block</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">out.print(&quot;&#123;&apos;status&apos;:&apos;ok&apos;&#125;&quot;);</div><div class=\"line\">out.flush();</div><div class=\"line\">out.close();</div></pre></td></tr></table></figure>\n<p>Access-Control-Allow-Origin这个Header在W3C标准里用来检查该跨域请求是否可以被通过，如果值为*则表明当前页面可以跨域访问。默认的情况下是不允许的。<br>在前端JS中需要向Servlet发出请求，请求代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url: &quot;your url&quot;,</div><div class=\"line\">  type:&quot;get or post&quot;,</div><div class=\"line\">  dataType:&quot;json&quot;,</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    ....</div><div class=\"line\">  &#125;,</div><div class=\"line\">  success:function(data)&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"第二种解决方法\"><a href=\"#第二种解决方法\" class=\"headerlink\" title=\"第二种解决方法\"></a>第二种解决方法</h4><p>通过jsonp跨域请求的方式。JSONP和JSON虽然只有一个字母的区别，但是他们完全就是两回事，很多人很容易把他们搞混。JSON是一种数据交换的格式，而JSONP则是一种非官方跨域数据交互协议。<br>首先来说一下前端JS是怎么发送请求。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url:&quot;your url&quot;,</div><div class=\"line\">  type:&quot;get or post&quot;,</div><div class=\"line\">  async:false,</div><div class=\"line\">  dataType : &quot;jsonp&quot;,</div><div class=\"line\">  //服务端用于接收callback调用的function名的参数</div><div class=\"line\">  jsonp:&quot;callbackparam&quot;,</div><div class=\"line\">  //callback的function名称</div><div class=\"line\">  jsonpCallback:&quot;success_jsonpCallback&quot;,</div><div class=\"line\">  success:function(data)&#123;</div><div class=\"line\">    console.log(data);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  error:function(data)&#123;</div><div class=\"line\">    console.log(data);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这里的callbackparam和success_jsonpCallback可以理解为发送的data数据的键值对，可以自定义，但是callbackparam需要和后台约定好参数名称，因为后台需要获取到这个参数里面的值（即success_jsonpCallback）。<br>下面，最重要的来了，后台怎么样获取和返回数据呢。代码如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">PrintWriter out =null;</div><div class=\"line\">String callback=req.getParameter(&quot;callbackparam&quot;);</div><div class=\"line\">String json=callback+&quot;(&#123;&apos;status&apos;:&apos;ok&apos;&#125;)&quot;;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">  out = resp.getWriter();</div><div class=\"line\">&#125; catch (IOException e)</div><div class=\"line\">&#123;</div><div class=\"line\">  // TODO Auto-generated catch block</div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">out.print(json);</div><div class=\"line\">out.flush();</div><div class=\"line\">out.close();</div></pre></td></tr></table></figure>\n<p>首先需要获取参数名为callbackparam的值，这里获取到的值就是“success_jsonpCallback”。然后将这个值加上一对小括号。小括号里放入你需要返回的数据内容，比如这里我返回一个JSON对象。当然你也可以返回其他对象，比如只返回一个字符串类型数据也可以。最后前端JS返回的数据就是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">success_jsonpCallback(&#123;&apos;status&apos;:&apos;ok&apos;&#125;)</div></pre></td></tr></table></figure>\n<p>浏览器会自动解析为json对象，这时候你只需要在success回调函数中直接用data.status就可以了。</p>\n","excerpt":"<p>　　在写前端脚本的时候我们经常会遇到发送数据到后台的情况，但是由于浏览器的限制，不同域名之间的数据是不能互相访问的，那前端怎么和后端如何进行数据之间的交换呢？<br>","more":"</p>\n<p>JavaScript由于安全性方面的考虑，不允许页面跨域调用其他页面的对象，那么问题来了，什么是跨域问题？<br>答：这是由于浏览器同源策略的限制，现在所有支持JavaScript的浏览器都使用了这个策略。那么什么是同源呢？所谓的同源是指三个方面“相同”：</p>\n<ol>\n<li>域名相同</li>\n<li>协议相同</li>\n<li>端口相同<br>下面就举几个例子来帮助更好的理解同源策略。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br> <a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br> <a href=\"http://www.b.com/a.js\">http://www.b.com/a.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\">http://www.a.com:8000/a.js</a><br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"https://www.a.com/a.js\">https://www.a.com/a.js</a> <br> <a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名不同协议</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<p>在JAVA中处理跨域问题，通常有以下两种常用的解决方法。</p>\n<h4 id=\"第一种解决方法\"><a href=\"#第一种解决方法\" class=\"headerlink\" title=\"第一种解决方法\"></a>第一种解决方法</h4><p>后台代码在被请求的Servlet中添加Header设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class=\"line\">PrintWriter out =null;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">\tout = response.getWriter();</div><div class=\"line\">&#125; catch (IOException e)</div><div class=\"line\">&#123;</div><div class=\"line\">\t// TODO Auto-generated catch block</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">out.print(&quot;&#123;&apos;status&apos;:&apos;ok&apos;&#125;&quot;);</div><div class=\"line\">out.flush();</div><div class=\"line\">out.close();</div></pre></td></tr></table></figure>\n<p>Access-Control-Allow-Origin这个Header在W3C标准里用来检查该跨域请求是否可以被通过，如果值为*则表明当前页面可以跨域访问。默认的情况下是不允许的。<br>在前端JS中需要向Servlet发出请求，请求代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url: &quot;your url&quot;,</div><div class=\"line\">  type:&quot;get or post&quot;,</div><div class=\"line\">  dataType:&quot;json&quot;,</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    ....</div><div class=\"line\">  &#125;,</div><div class=\"line\">  success:function(data)&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"第二种解决方法\"><a href=\"#第二种解决方法\" class=\"headerlink\" title=\"第二种解决方法\"></a>第二种解决方法</h4><p>通过jsonp跨域请求的方式。JSONP和JSON虽然只有一个字母的区别，但是他们完全就是两回事，很多人很容易把他们搞混。JSON是一种数据交换的格式，而JSONP则是一种非官方跨域数据交互协议。<br>首先来说一下前端JS是怎么发送请求。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url:&quot;your url&quot;,</div><div class=\"line\">  type:&quot;get or post&quot;,</div><div class=\"line\">  async:false,</div><div class=\"line\">  dataType : &quot;jsonp&quot;,</div><div class=\"line\">  //服务端用于接收callback调用的function名的参数</div><div class=\"line\">  jsonp:&quot;callbackparam&quot;,</div><div class=\"line\">  //callback的function名称</div><div class=\"line\">  jsonpCallback:&quot;success_jsonpCallback&quot;,</div><div class=\"line\">  success:function(data)&#123;</div><div class=\"line\">    console.log(data);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  error:function(data)&#123;</div><div class=\"line\">    console.log(data);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这里的callbackparam和success_jsonpCallback可以理解为发送的data数据的键值对，可以自定义，但是callbackparam需要和后台约定好参数名称，因为后台需要获取到这个参数里面的值（即success_jsonpCallback）。<br>下面，最重要的来了，后台怎么样获取和返回数据呢。代码如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">PrintWriter out =null;</div><div class=\"line\">String callback=req.getParameter(&quot;callbackparam&quot;);</div><div class=\"line\">String json=callback+&quot;(&#123;&apos;status&apos;:&apos;ok&apos;&#125;)&quot;;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">  out = resp.getWriter();</div><div class=\"line\">&#125; catch (IOException e)</div><div class=\"line\">&#123;</div><div class=\"line\">  // TODO Auto-generated catch block</div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">out.print(json);</div><div class=\"line\">out.flush();</div><div class=\"line\">out.close();</div></pre></td></tr></table></figure>\n<p>首先需要获取参数名为callbackparam的值，这里获取到的值就是“success_jsonpCallback”。然后将这个值加上一对小括号。小括号里放入你需要返回的数据内容，比如这里我返回一个JSON对象。当然你也可以返回其他对象，比如只返回一个字符串类型数据也可以。最后前端JS返回的数据就是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">success_jsonpCallback(&#123;&apos;status&apos;:&apos;ok&apos;&#125;)</div></pre></td></tr></table></figure>\n<p>浏览器会自动解析为json对象，这时候你只需要在success回调函数中直接用data.status就可以了。</p>"},{"title":"Git命令学习（下）","date":"2016-09-12T07:54:00.000Z","description":null,"toc":true,"author":null,"comments":1,"original":null,"photos":[],"_content":"　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的。\n<!-- more -->\n\n\n\n","source":"_posts/Git-Command-End.md","raw":"title: Git命令学习（下）\ndate: 2016-09-12 15:54:00\ndescription: \ncategories:\n- 编程\ntags:\n- git\ntoc: true\nauthor:\ncomments:\noriginal:\npermalink: \nphotos:\n---\n　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的。\n<!-- more -->\n\n\n\n","slug":"Git-Command-End","published":1,"updated":"2016-09-12T07:54:43.314Z","layout":"post","link":"","_id":"ciszrzu6q0000ukfi5iukemhl","content":"<p>　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的。<br><a id=\"more\"></a></p>\n","excerpt":"<p>　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的。<br>","more":"</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciszndbl40000fcfi647jh10r","category_id":"ciszndblk0002fcfiyplmiqkl","_id":"ciszndblw0009fcfi02611vdk"},{"post_id":"ciszndblh0001fcfid73xshfy","category_id":"ciszndblk0002fcfiyplmiqkl","_id":"ciszndbly000dfcfii7gsr0na"},{"post_id":"ciszndblq0004fcfikz05j5r2","category_id":"ciszndblk0002fcfiyplmiqkl","_id":"ciszndblz000efcfifxxnme73"},{"post_id":"ciszrzu6q0000ukfi5iukemhl","category_id":"ciszndblk0002fcfiyplmiqkl","_id":"ciszrzu760002ukfim0j2nc9n"}],"PostTag":[{"post_id":"ciszndbl40000fcfi647jh10r","tag_id":"cisye3zct0005mknqywn1e8ii","_id":"ciszndblp0003fcfiqutkk9en"},{"post_id":"ciszndbl40000fcfi647jh10r","tag_id":"cisye3zd4000amknqgr2cs0xr","_id":"ciszndbls0005fcfixhdeafrf"},{"post_id":"ciszndbl40000fcfi647jh10r","tag_id":"cisye3zd8000dmknqlh66d3sz","_id":"ciszndblt0006fcfiqfqnl3bh"},{"post_id":"ciszndblh0001fcfid73xshfy","tag_id":"cisye3zd9000fmknq8608f7vj","_id":"ciszndblv0008fcfi35nf8f48"},{"post_id":"ciszndblq0004fcfikz05j5r2","tag_id":"cisye3zdb000jmknqb0z6rs35","_id":"ciszndblx000afcfibjfwnf3e"},{"post_id":"ciszndblq0004fcfikz05j5r2","tag_id":"cisye3zdf000mmknqek8n3jft","_id":"ciszndbly000cfcfik0qj45p4"},{"post_id":"ciszrzu6q0000ukfi5iukemhl","tag_id":"cisye3zd9000fmknq8608f7vj","_id":"ciszrzu750001ukfigd5yd75v"}],"Tag":[{"name":"前端","_id":"cisye3zct0005mknqywn1e8ii"},{"name":"游戏引擎","_id":"cisye3zd4000amknqgr2cs0xr"},{"name":"CraftyJs","_id":"cisye3zd8000dmknqlh66d3sz"},{"name":"git","_id":"cisye3zd9000fmknq8608f7vj"},{"name":"JAVA","_id":"cisye3zdb000jmknqb0z6rs35"},{"name":"异步跨域","_id":"cisye3zdf000mmknqek8n3jft"}]}}