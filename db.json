{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"source/images/Windows-Tools-Recommend/FastStone-Capture.png","path":"images/Windows-Tools-Recommend/FastStone-Capture.png","modified":1,"renderable":0},{"_id":"source/images/Windows-Tools-Recommend/Beyond-Compare.png","path":"images/Windows-Tools-Recommend/Beyond-Compare.png","modified":1,"renderable":0},{"_id":"source/images/Windows-Tools-Recommend/everything.png","path":"images/Windows-Tools-Recommend/everything.png","modified":1,"renderable":0},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/head.png","path":"img/head.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/qq.png","path":"img/qq.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"source/images/Windows-Tools-Recommend/DesktopNotes.jpg","path":"images/Windows-Tools-Recommend/DesktopNotes.jpg","modified":1,"renderable":0},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"source/images/Windows-Tools-Recommend/YNote.png","path":"images/Windows-Tools-Recommend/YNote.png","modified":1,"renderable":0},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"source/images/Windows-Tools-Recommend/Sublime-UI.png","path":"images/Windows-Tools-Recommend/Sublime-UI.png","modified":1,"renderable":0},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/head1.png","path":"img/head1.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":1,"renderable":1},{"_id":"source/images/Windows-Tools-Recommend/chrome.jpg","path":"images/Windows-Tools-Recommend/chrome.jpg","modified":1,"renderable":0},{"_id":"themes/spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"902bd8e0fad59929b96c2165469a6b8c709f2bdb","modified":1473649626064},{"_id":"themes/spfk/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1473732161835},{"_id":"themes/spfk/README.md","hash":"8749e56d2f2fb3076038b105a6618fa3ec97a1ab","modified":1473732161835},{"_id":"themes/spfk/_config.yml","hash":"5773c47094155ffc8ca484faa9754c62aee33657","modified":1473732161835},{"_id":"themes/spfk/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1473732161857},{"_id":"source/_posts/CraftyJs-Start.md","hash":"99cc37886f839668e2114fb08b684d0c3ba0bc30","modified":1473669175030},{"_id":"source/_posts/Explain-Js-This.md","hash":"662b64d02025ec8896aa35ce413e2952b90d06a9","modified":1474423069047},{"_id":"source/_posts/Git-Command-Start.md","hash":"738e0c58c4d3990191993ed5a4d0ce4c17dcfab6","modified":1473732161720},{"_id":"source/_posts/Git-Command-End.md","hash":"84f913e6578c739b5c15ce5b07b80629e728f60c","modified":1473669188258},{"_id":"source/_posts/HexoGitHub-Start.md","hash":"e60708b7958d50bc5f0b1c94c71563a8448abcd7","modified":1473757252313},{"_id":"source/_posts/JS-Variate-Scope.md","hash":"d1bbf382c52accb81b76c809782a44842acd8248","modified":1474445697109},{"_id":"source/_posts/Js-Closure.md","hash":"c86be05b6495f633af1ebadc0c974e5ec553e9ab","modified":1474445647837},{"_id":"source/_posts/Java-Ajax.md","hash":"5aa8d946823c80022e7d2c5af247e3263096566f","modified":1473732161721},{"_id":"source/_posts/Windows-Tools-Recommend.md","hash":"20a82906484784a109c7f07fdf1989442c3d29cb","modified":1474169621934},{"_id":"source/404/index.md","hash":"0f27e6069aefafa833dd73db0ed21f0657af025e","modified":1473732161720},{"_id":"source/categories/index.md","hash":"3001744d51adbd7ba53f6fcbe10c75ea70391155","modified":1473654290901},{"_id":"source/tags/index.md","hash":"cea5d7b08ac6578e5ecd49d977357e249206b2ec","modified":1473732161721},{"_id":"source/about/index.html","hash":"82e7515de43b90383eafc0a4c5ddf8f4b623ff34","modified":1473649626066},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1473732161854},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1473732161854},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1473732161855},{"_id":"themes/spfk/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1473732161855},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1473732161856},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1473732161857},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1473732161855},{"_id":"themes/spfk/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1473732161856},{"_id":"themes/spfk/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1473732161836},{"_id":"themes/spfk/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1473732161836},{"_id":"themes/spfk/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1473732161837},{"_id":"themes/spfk/languages/pt-BR","hash":"9e8a1942a32af8720c9fbca8db14eb89d76c21bd","modified":1473732161837},{"_id":"themes/spfk/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1473732161838},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1473732161838},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1473732161837},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1473732161839},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1473732161839},{"_id":"themes/spfk/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1473732161839},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1473732161857},{"_id":"themes/spfk/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1473655038913},{"_id":"themes/spfk/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1473654519747},{"_id":"themes/spfk/.git/config","hash":"e982ab9811e4397474601f6a3e284ef45b913363","modified":1473655038916},{"_id":"themes/spfk/.git/index","hash":"d250b6d3b61b7b7e8f9669960f6d3e813b348deb","modified":1474351774929},{"_id":"themes/spfk/.git/packed-refs","hash":"45b859e56106dcd6f627216c37495d48427b463d","modified":1473655038907},{"_id":"source/images/Windows-Tools-Recommend/FastStone-Capture.png","hash":"d9a29285fd80dc3f0970e59111b4b10dd95c1e6d","modified":1474169108352},{"_id":"source/images/Windows-Tools-Recommend/Beyond-Compare.png","hash":"414286545d09b61c903e0eb259060fbba9c1da80","modified":1474169108348},{"_id":"source/images/Windows-Tools-Recommend/everything.png","hash":"ee3a1161dec9929b30fc98f33e1e8aa89b62b69d","modified":1474169108362},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1473732161841},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"686daa64647a37c61cb348eaa55118b73d866d1b","modified":1473732161840},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"ff7174ff79bfe82a70b03a07d78583b1e8d1827f","modified":1473732161843},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1473732161841},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"33a9e21698fe3038a7dfcf0f34d73901482c49db","modified":1473732161842},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1473732161842},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"21ffa5e590b1588b61b7de66c81a992ff87e9b36","modified":1473732161846},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"34b2d7050db88fed9f70b8233f16f451bad501f4","modified":1473732161847},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"9b15be55aecbb33c4ad958e29eab89d83fe072cc","modified":1473732161844},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"d037a5fb0f81571ae454187deaae68f1285db56d","modified":1473732161845},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1473732161845},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"054cbde2b775dd05f942e62d3ba5374ff8c71fea","modified":1473732161842},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"a891989f050ccc5e4765c5629f6442482b9daba9","modified":1473732161846},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1473732161848},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1473732161853},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"d4565d52e6536465c740ad8dc5737c2e8eed9f05","modified":1473732161847},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"112353124225cada3e44644151f069655db9494b","modified":1473732161847},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"c46a2b624281b09d4aeacf2921cd712837469a1d","modified":1473732161853},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1473732161851},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"f0191892b19a19d7bb59f97c659611208b53c81d","modified":1473732161854},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"31592c7f86fa062f20ed2afb2e5656ae8151ba80","modified":1473732161848},{"_id":"themes/spfk/source/css/_variables.styl","hash":"11fe650f1f335795ab971965c3ec0ed36e211956","modified":1473732161996},{"_id":"themes/spfk/source/css/loading-style.css","hash":"ef12c256b59ed836994afed35bf02556248133ce","modified":1473732161996},{"_id":"themes/spfk/source/css/showshare.css","hash":"bb1fc0da63d3a4584c8c15391e089271e4e82f81","modified":1473732161997},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473732161998},{"_id":"themes/spfk/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1473732161986},{"_id":"themes/spfk/source/css/style.styl","hash":"5564c0ebba7da680b4958beed2e1a3174dc04fb8","modified":1473732161998},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473732162000},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473732161999},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473732161999},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1473732162003},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473732162000},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1473732162004},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1473732162021},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473732162001},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1473732162005},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1473732162022},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1473732162022},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1473732162022},{"_id":"themes/spfk/source/img/favicon.ico","hash":"88697c9f333e0346f57c2b71a69f300ed9c1d466","modified":1473732162023},{"_id":"themes/spfk/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1473655039024},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1473732162023},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1473732162023},{"_id":"themes/spfk/source/img/head.jpg","hash":"0260190e51c16197bbac28bbf03147400a935c18","modified":1473732162024},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1473732162026},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1473732162027},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1473732162028},{"_id":"themes/spfk/source/img/head.png","hash":"e629265bfe78445d2e382a8c373ed5a21aede5be","modified":1473732162025},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1473732162027},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1473732162028},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1473732162030},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1473732162028},{"_id":"themes/spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1473732162029},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1473732162029},{"_id":"themes/spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1473732162031},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1473732162029},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1473732162031},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1473732162031},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"1f60b6ccd135d181b78254468ffda1c7b9d51556","modified":1473732162033},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1473732162035},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1473732162030},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1473732162037},{"_id":"themes/spfk/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1473732162037},{"_id":"themes/spfk/source/js/pace.js","hash":"d9cfcb7e1fc4b827a64491726c9a78b9886b3793","modified":1473732162039},{"_id":"themes/spfk/source/js/main.js","hash":"99558632eb0cc7e387fcd7fa942b46cc1e1efc07","modified":1473732162038},{"_id":"themes/spfk/source/js/pc.js","hash":"482dc45356756150f0bee80c8d9a0987965b89ea","modified":1473732162039},{"_id":"source/images/Windows-Tools-Recommend/DesktopNotes.jpg","hash":"71cfda4d4cbf1d1eaae1c61cc75ca3ac3a1b3cb7","modified":1474169108350},{"_id":"themes/spfk/source/js/mobile.js","hash":"baed8d560883c842c2b8c3e0fadcf359f97140d0","modified":1473732162038},{"_id":"source/images/Windows-Tools-Recommend/YNote.png","hash":"7ebb65f1e7517dab76dc0d8f3b6f4ecd00bbef36","modified":1474169108356},{"_id":"themes/spfk/source/js/plugins.js","hash":"63e93eee75d6a83717af73dcc9829983123e01c1","modified":1473732162039},{"_id":"themes/spfk/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1473654519748},{"_id":"themes/spfk/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1473654519748},{"_id":"themes/spfk/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1473654519748},{"_id":"themes/spfk/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1473654519748},{"_id":"themes/spfk/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1473654519750},{"_id":"themes/spfk/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1473654519749},{"_id":"themes/spfk/.git/logs/HEAD","hash":"001f51aed916bbb308740c3cf7d0a03919a29c75","modified":1473655038915},{"_id":"themes/spfk/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1473654519749},{"_id":"themes/spfk/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1473654519750},{"_id":"themes/spfk/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1473654519749},{"_id":"themes/spfk/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1473654519750},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1473732162035},{"_id":"themes/spfk/source/js/embed.js","hash":"0c4047c10bffdc5289f4e61700cc7dfbb56ccb0d","modified":1473732162036},{"_id":"source/images/Windows-Tools-Recommend/Sublime-UI.png","hash":"c50477a9e4a0821259556b5fca447cfa7978a67b","modified":1474169108355},{"_id":"themes/spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1473732161840},{"_id":"themes/spfk/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1473732161841},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1473732161844},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1473732161849},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"23d58903983a3e40099f75f3d7a5462a95dc4636","modified":1473732161844},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1473732161843},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1473732161849},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1473732161850},{"_id":"themes/spfk/layout/_partial/post/swiftype.ejs","hash":"90f03e7f0ca811f3caeeaaeb2aaf5283e3ab4bb5","modified":1473732161850},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1473732161851},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1473732161851},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"a1b64506cd6aba3cd8ab48cf3ee0d6477123d6b1","modified":1473732161849},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"2605463dd8738b75f7c9c97929248e72792183f0","modified":1473732161850},{"_id":"themes/spfk/layout/_partial/share/baidu-share.ejs","hash":"136d1ffb6176e220e034a601df9c86f005fd9b4f","modified":1473732161852},{"_id":"themes/spfk/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1473732161852},{"_id":"themes/spfk/layout/_partial/share/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1473732161853},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1473732161859},{"_id":"themes/spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1473732161866},{"_id":"themes/spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1473732161868},{"_id":"themes/spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1473732161907},{"_id":"themes/spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1473732161930},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1473732161953},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"4df95b4bb2d092fb4edacaace6da75b68b76ffc9","modified":1473732161987},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"a38dd264db83942da95713b78311e4cca0d99325","modified":1473732161989},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"dc3c5531589dc2858e20d01a0db5d116d6b7f507","modified":1473732161986},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"90667bc0a860c9932c316447dee99c335c355c16","modified":1473732161987},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1473732161990},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"2bccdb4f3c12c7889598a97532de95e8d3f92d29","modified":1473732161990},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"fd30cf933e39ee348e69cc8458455cc4f622b7e9","modified":1473732161993},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1473732161990},{"_id":"themes/spfk/source/css/_partial/mains.styl","hash":"ff793a58c239a46474dc369b40ab2a71f547338e","modified":1473732161991},{"_id":"themes/spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1473732161985},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"d80d2acea8c84d330272d5f58a334eefb110c351","modified":1473732161991},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1473732161992},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1473732161994},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"98b6db59fbedee6f2a35b76624cce7b5f8ffce94","modified":1473732161993},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1473732161995},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"05bec94ed9f9fafa284926a8711aa52de7c56279","modified":1473732161992},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1473732161994},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"ddcfef2526e6d98f84ae88a87c1ec911649ef791","modified":1473732161995},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"65ce5d4aac09e570914a075a4fd17941c9a51c47","modified":1473732161997},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1473732161996},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1473732161995},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1473732162002},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473732162001},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1473732162003},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1473732162001},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1473732162003},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1473732162002},{"_id":"themes/spfk/source/img/head1.png","hash":"b8e5fa9559e3b6c80efa016f9f15791f179914ca","modified":1473732162026},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1473732162005},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1473732162006},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1473732162033},{"_id":"source/images/Windows-Tools-Recommend/chrome.jpg","hash":"434012fce17a4025abc677fd240a8413ed5a8f88","modified":1474169108360},{"_id":"themes/spfk/.git/refs/heads/master","hash":"d2869431e25e2dd434d4d906e6947906bafae102","modified":1473655038914},{"_id":"themes/spfk/.git/objects/pack/pack-ef4fac4a4b56741b01f027efdd2ccb7c39a6e5e8.idx","hash":"332a3443502a655f634677c72cd999e4c5d758e2","modified":1473655038818},{"_id":"themes/spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1473732161898},{"_id":"themes/spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1473732161944},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1473732161975},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1473732162007},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1473732162010},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1473732162014},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1473732162015},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1473732162032},{"_id":"themes/spfk/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1473732161894},{"_id":"themes/spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1473732161984},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1473732161988},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"edfed5def2ad4f7fdad0eb50b26a51c3b010c2b1","modified":1473732161988},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1473732161989},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1473732161993},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1473732162013},{"_id":"themes/spfk/.git/logs/refs/heads/master","hash":"001f51aed916bbb308740c3cf7d0a03919a29c75","modified":1473655038914},{"_id":"themes/spfk/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1473655038909},{"_id":"themes/spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1473732161918},{"_id":"themes/spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1473732161935},{"_id":"themes/spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1473732161941},{"_id":"themes/spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1473732161950},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1473732161958},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1473732161971},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1473732161979},{"_id":"themes/spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1473732161864},{"_id":"themes/spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1473732161881},{"_id":"themes/spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1473732161913},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1473732162021},{"_id":"themes/spfk/.git/logs/refs/remotes/origin/HEAD","hash":"001f51aed916bbb308740c3cf7d0a03919a29c75","modified":1473655038912},{"_id":"themes/spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1473732161876},{"_id":"themes/spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1473732161889},{"_id":"themes/spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1473732161904},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1473732162012},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1473732161927},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1473732161967},{"_id":"themes/spfk/.git/objects/pack/pack-ef4fac4a4b56741b01f027efdd2ccb7c39a6e5e8.pack","hash":"34739ab5345a61b84db33a52f7f85fbba7a95c8c","modified":1473655038823}],"Category":[{"name":"编程","_id":"citcmx7510003y4fi2k4hm3ho"},{"name":"工具","_id":"citcmx75n000my4fiudvhudyi"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"fancybox":false,"noDate":"true","_content":"\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<div class=\"pic\">\n\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=131099154&auto=0&height=430\"></iframe>\n</div>","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\nfancybox: false\nnoDate: \"true\"\n---\n\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<div class=\"pic\">\n\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=131099154&auto=0&height=430\"></iframe>\n</div>","date":"2016-09-13T02:02:41.720Z","updated":"2016-09-13T02:02:41.720Z","path":"/404.html","layout":"page","_id":"citcmx74w0001y4fidzhwq6c1","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<div class=\"pic\"><br><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"320\" height=\"330\" src=\"http://music.163.com/outchain/player?type=0&id=131099154&auto=0&height=430\"></iframe><br></div>","excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<div class=\"pic\"><br><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=131099154&auto=0&height=430\"></iframe><br></div>"},{"title":"分类","Antuor":"Corner","comments":0,"date":"2016-09-12T05:39:58.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nAntuor: Corner\ncomments: false\ndate: 2016-09-12 13:39:58\ntype: \"categories\"\n---\n","updated":"2016-09-12T04:24:50.901Z","path":"categories/index.html","layout":"page","_id":"citcmx76o001fy4fiz5dp3kv8","content":"","excerpt":"","more":""},{"title":"标签","Antuor":"Corner","date":"2016-07-10T05:36:38.000Z","comments":0,"type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nAntuor: Corner\ndate: 2016-07-10 13:36:38\ncomments: false\ntype: \"tags\"\n---\n","updated":"2016-09-13T02:02:41.721Z","path":"tags/index.html","layout":"page","_id":"citcmx76q001gy4fix9upcnsm","content":"","excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul>    \n    <li>WebSite：<a href=\"http://www.xieyufei.com\">http://www.xieyufei.com</a></li>\n    <li>Email：<a href=\"http://mail.163.com/\">corner_scofield@163.com</a></li>\n<!--     <li>GitHub：<a href=\"https://github.com/AnSwErYWJ\">AnSwErYWJ</a></li> -->\n    <li>Blog：<a href=\"http://www.xieyufei.com\">谢小飞的博客</a></li>\n    <!-- <li>Weibo：<a href=\"http://weibo.com/1783591593\">@AnSwEr不是答案</a></p></li> -->\n</ul>\n</body>\n</html>","source":"about/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul>    \n    <li>WebSite：<a href=\"http://www.xieyufei.com\">http://www.xieyufei.com</a></li>\n    <li>Email：<a href=\"http://mail.163.com/\">corner_scofield@163.com</a></li>\n<!--     <li>GitHub：<a href=\"https://github.com/AnSwErYWJ\">AnSwErYWJ</a></li> -->\n    <li>Blog：<a href=\"http://www.xieyufei.com\">谢小飞的博客</a></li>\n    <!-- <li>Weibo：<a href=\"http://weibo.com/1783591593\">@AnSwEr不是答案</a></p></li> -->\n</ul>\n</body>\n</html>","date":"2016-09-12T03:07:06.066Z","updated":"2016-09-12T03:07:06.066Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"citcmx76u001hy4fi4kp29g8s","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul>    \n    <li>WebSite：<a href=\"http://www.xieyufei.com\" target=\"_blank\" rel=\"external\">http://www.xieyufei.com</a></li>\n    <li>Email：<a href=\"http://mail.163.com/\" target=\"_blank\" rel=\"external\">corner_scofield@163.com</a></li>\n<!--     <li>GitHub：<a href=\"https://github.com/AnSwErYWJ\">AnSwErYWJ</a></li> -->\n    <li>Blog：<a href=\"http://www.xieyufei.com\" target=\"_blank\" rel=\"external\">谢小飞的博客</a></li>\n    <!-- <li>Weibo：<a href=\"http://weibo.com/1783591593\">@AnSwEr不是答案</a></p></li> -->\n</ul>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<ul>    \n    <li>WebSite：<a href=\"http://www.xieyufei.com\">http://www.xieyufei.com</a></li>\n    <li>Email：<a href=\"http://mail.163.com/\">corner_scofield@163.com</a></li>\n<!--     <li>GitHub：<a href=\"https://github.com/AnSwErYWJ\">AnSwErYWJ</a></li> -->\n    <li>Blog：<a href=\"http://www.xieyufei.com\">谢小飞的博客</a></li>\n    <!-- <li>Weibo：<a href=\"http://weibo.com/1783591593\">@AnSwEr不是答案</a></p></li> -->\n</ul>\n</body>\n</html>"}],"Post":[{"title":"CraftyJs初探","date":"2016-07-08T14:00:00.000Z","description":null,"toc":true,"author":"Corner","comments":1,"original":null,"photos":[],"_content":"　　前不久听了一趟分享课，分享课的主题是JS游戏的制作，但是如果是自己写游戏比较的繁琐，如果能应用一个游戏引擎，就能大大的简化游戏的开发速度和开发效率，于是我在网上参考了几个游戏引擎，找到了CraftyJs这个游戏引擎还是挺不错的，但是苦于网上的教程不是很全面，所以今天就开个坑，写个入门级的教程，仅供参考。\n<!-- more -->\n\n\n### 1. 初始化\n首先从[官网](http://craftyjs.com/)上下载CraftyJs的脚本引用到项目中来。然后就可以开始写我们自己的程序了。\n```\nCraftyJs.init(this.config.width,this.config.height);\n```\n这段代码用于初始化整个stage，用官方的话来说就是舞台，所有的元素将在这整个舞台里活动。这个舞台的宽度是this.config.width(px)，高度是this.config.height(px)。如果有元素超出了舞台的范围，这个元素将被遮住，因为整个舞台设置了样式overflow:hidden将超出的元素隐藏掉。\n```\nCrafty.background(\"#f0f0f0\");\n```\n你还可以通过background()方法给整个舞台设置背景颜色\n\n### 2. 放置场景\n当整个舞台初始化后就可以玩游戏了吧？不！你去剧院看戏一入座演员就给你演戏么，当然不是，还需要一些场景的带入和切换。这些场景比如加载动画、菜单选项等一系列。\n```\nCrafty.defineScene(\"loading\", function() {\n\tCrafty.background(\"#000\");\n\tCrafty.e(\"2D, DOM, Text\").attr({\n\t\tw: 100,\n\t\th: 20,\n\t\tx: 150,\n\t\ty: 120\n\t}).text(\"Loading\").css({\n\t\t\"text-align\": \"center\"\n\t}).textColor(\"#FFFFFF\");\n});\n```\n我们可以使用Crafty.defineScene()方法来定义一个场景。在这里我们定义了一个叫loading的场景，里面只有一个元素就是一行\"Loading\"的字。但是定义好了场景并没有显示在舞台上，因为这个场景并没有被调用到。\n```\nCrafty.enterScene(\"loading\");\n```\n通过enterScene()这个方法来展示刚才我们定义好场景，你会在舞台上看到这个场景。这个展示舞台的方法可以在任何地方被调用。但是需要注意的是这个方法会清除舞台上所有的元素，除了那些有\"Persist\"组件的元素（组件这一名词下面会解释到）。\n\n### 3. 实体/组件系统\n现在到了CraftyJS最重要的部分来了，就是CraftyJS独特的实体/组件系统。这个系统有点面向对象编程的意思。整个系统分为两个部分。\n##### (1) 组件系统\n所谓的组件，有点类似JAVA中的对象（不是现实里的对象），看不见摸不着，是对实体的抽象。每个组件里封装了对应的方法，可以在实体中直接调用。CraftyJS中有很多已经被预先定义好的组件可以直接拿来使用，而且组件可以被重复地继承。\n##### (2) 实体系统\n实体是真正看得见的元素，是对组件的“实例化”。一个单一的实体能够继承多个实体。\n```\nvar square = Crafty.e('2D, DOM, Color');\n```\n这样就通过e()方法定义了几个叫\"square\"的实体。这个实体继承了三个组件\"2D\"、\"DOM\"和\"Color\"，这三个组件预先在CraftyJS中就已经被定义好了。如果你觉得单单使用这三个组件还不够，你可以后续往\"square\"这个实体中再添加组件。\n```\nsquare.addComponent(\"Text\");\n```\n通过addComponent()方法向实体中加入\"Text\"组件，这个方法支持一次添加多个组件。\n```\nsquare.addComponent(\"Text,Mouse\");//这是可以的\n```\n\n你还可以通过has()方法判断某个实体中是否含有某个组件\n```\nsquare.has(\"Mouse\");\n```\n这个方法返回一个boolean类型的值。但是需要注意的是这个方法一次性只能判断一个组件存在，并不支持同时判定多个组件比如：\n```\nsquare.has(\"2D,DOM\");//这是错误的\n```\n\n如果你对某个组件不满意，你还可以把它删掉，这个方法也不支持传入两个以上的组件名称\n```\nsquare.removeComponent(\"2D\");\n```\n### 4. 常用的属性和方法\n##### (1) \"2D\"组件\n2D组件是CraftyJS预先给我们定义好的一个组件，是最常用的组件之一。他提供了一个attr()的方法让我们来设置实体的属性值。\n\n```\nsquare.attr({\n  x: 150,\n  y: 150,\n  w: 100,\n  h: 100,\n  alpha: 0.5,\n  rotation: 45,\n  visible:true\n  });\n```\n这里的x和y是实体相对于舞台左上角的位置，单位都为像素(px)。w和h是实体的宽度和高度，单位也是像素(px)。alpha是实体的透明度，取值范围是0到1。visible代表实体是否可见，只能接受boolean类型的参数。x、y、w、h如果不设置值，默认为0。\n##### (2) \"Text\"组件\nText组件有四个方法可以使用，分别是text()、textColor()、textFont()和unselectable()。text()方法用于设置组件里面的内容。\n```\nCrafty.e(\"2D,DOM,Text\").text(\"hello world!\");\n```\ntext()方法支持传入一个方法，但是这个方法必须要返回一个字符串类型的参数，否则这个组件的内容将会显示undefined(未定义)。\n```\nCrafty.e(\"2D, Canvas, Text\").text(function () { \n\treturn \"hello world!\";\n});\n```\ntextColor()方法用来设置组件文字的颜色，你可以使用HEX、rgb或者rgba的方式来定义颜色。\n```\nCrafty.e(\"2D, DOM, Text\").textColor('#FF0000')\n\t\t.textColor('rgba(0, 255, 0, 0.5)')\n\t\t.textColor('white');\n```\ntextFont()方法用来设置文字的字体。如果有多个字体的属性，传入一个对象的方式进行设置，Crafty支持设置的属性有以下几个：\n```\nCrafty.e(\"2D, DOM, Text\").textFont({ 'type': 'italic', 'family': 'Arial' , 'size':'20px', 'weight':'bold', 'lineHeight':'30px'});\n```\nunselectable()方法设置Text组件中的内容不能被高亮选中。Canvas的Text是不能被高亮选中的，所以这个方法只对DOM的Text组件有效。\n\n```\nCrafty.e(\"2D, DOM, Text\").text('This text cannot be highlighted!').unselectable();\n```","source":"_posts/CraftyJs-Start.md","raw":"title: CraftyJs初探\ndate: 2016-07-08 22:00:00\ndescription: \ncategories:\n- 编程\ntags:\n- 前端\n- 游戏引擎\n- CraftyJs\ntoc: true\nauthor: Corner\ncomments:\noriginal:\npermalink: \nphotos:\n---\n　　前不久听了一趟分享课，分享课的主题是JS游戏的制作，但是如果是自己写游戏比较的繁琐，如果能应用一个游戏引擎，就能大大的简化游戏的开发速度和开发效率，于是我在网上参考了几个游戏引擎，找到了CraftyJs这个游戏引擎还是挺不错的，但是苦于网上的教程不是很全面，所以今天就开个坑，写个入门级的教程，仅供参考。\n<!-- more -->\n\n\n### 1. 初始化\n首先从[官网](http://craftyjs.com/)上下载CraftyJs的脚本引用到项目中来。然后就可以开始写我们自己的程序了。\n```\nCraftyJs.init(this.config.width,this.config.height);\n```\n这段代码用于初始化整个stage，用官方的话来说就是舞台，所有的元素将在这整个舞台里活动。这个舞台的宽度是this.config.width(px)，高度是this.config.height(px)。如果有元素超出了舞台的范围，这个元素将被遮住，因为整个舞台设置了样式overflow:hidden将超出的元素隐藏掉。\n```\nCrafty.background(\"#f0f0f0\");\n```\n你还可以通过background()方法给整个舞台设置背景颜色\n\n### 2. 放置场景\n当整个舞台初始化后就可以玩游戏了吧？不！你去剧院看戏一入座演员就给你演戏么，当然不是，还需要一些场景的带入和切换。这些场景比如加载动画、菜单选项等一系列。\n```\nCrafty.defineScene(\"loading\", function() {\n\tCrafty.background(\"#000\");\n\tCrafty.e(\"2D, DOM, Text\").attr({\n\t\tw: 100,\n\t\th: 20,\n\t\tx: 150,\n\t\ty: 120\n\t}).text(\"Loading\").css({\n\t\t\"text-align\": \"center\"\n\t}).textColor(\"#FFFFFF\");\n});\n```\n我们可以使用Crafty.defineScene()方法来定义一个场景。在这里我们定义了一个叫loading的场景，里面只有一个元素就是一行\"Loading\"的字。但是定义好了场景并没有显示在舞台上，因为这个场景并没有被调用到。\n```\nCrafty.enterScene(\"loading\");\n```\n通过enterScene()这个方法来展示刚才我们定义好场景，你会在舞台上看到这个场景。这个展示舞台的方法可以在任何地方被调用。但是需要注意的是这个方法会清除舞台上所有的元素，除了那些有\"Persist\"组件的元素（组件这一名词下面会解释到）。\n\n### 3. 实体/组件系统\n现在到了CraftyJS最重要的部分来了，就是CraftyJS独特的实体/组件系统。这个系统有点面向对象编程的意思。整个系统分为两个部分。\n##### (1) 组件系统\n所谓的组件，有点类似JAVA中的对象（不是现实里的对象），看不见摸不着，是对实体的抽象。每个组件里封装了对应的方法，可以在实体中直接调用。CraftyJS中有很多已经被预先定义好的组件可以直接拿来使用，而且组件可以被重复地继承。\n##### (2) 实体系统\n实体是真正看得见的元素，是对组件的“实例化”。一个单一的实体能够继承多个实体。\n```\nvar square = Crafty.e('2D, DOM, Color');\n```\n这样就通过e()方法定义了几个叫\"square\"的实体。这个实体继承了三个组件\"2D\"、\"DOM\"和\"Color\"，这三个组件预先在CraftyJS中就已经被定义好了。如果你觉得单单使用这三个组件还不够，你可以后续往\"square\"这个实体中再添加组件。\n```\nsquare.addComponent(\"Text\");\n```\n通过addComponent()方法向实体中加入\"Text\"组件，这个方法支持一次添加多个组件。\n```\nsquare.addComponent(\"Text,Mouse\");//这是可以的\n```\n\n你还可以通过has()方法判断某个实体中是否含有某个组件\n```\nsquare.has(\"Mouse\");\n```\n这个方法返回一个boolean类型的值。但是需要注意的是这个方法一次性只能判断一个组件存在，并不支持同时判定多个组件比如：\n```\nsquare.has(\"2D,DOM\");//这是错误的\n```\n\n如果你对某个组件不满意，你还可以把它删掉，这个方法也不支持传入两个以上的组件名称\n```\nsquare.removeComponent(\"2D\");\n```\n### 4. 常用的属性和方法\n##### (1) \"2D\"组件\n2D组件是CraftyJS预先给我们定义好的一个组件，是最常用的组件之一。他提供了一个attr()的方法让我们来设置实体的属性值。\n\n```\nsquare.attr({\n  x: 150,\n  y: 150,\n  w: 100,\n  h: 100,\n  alpha: 0.5,\n  rotation: 45,\n  visible:true\n  });\n```\n这里的x和y是实体相对于舞台左上角的位置，单位都为像素(px)。w和h是实体的宽度和高度，单位也是像素(px)。alpha是实体的透明度，取值范围是0到1。visible代表实体是否可见，只能接受boolean类型的参数。x、y、w、h如果不设置值，默认为0。\n##### (2) \"Text\"组件\nText组件有四个方法可以使用，分别是text()、textColor()、textFont()和unselectable()。text()方法用于设置组件里面的内容。\n```\nCrafty.e(\"2D,DOM,Text\").text(\"hello world!\");\n```\ntext()方法支持传入一个方法，但是这个方法必须要返回一个字符串类型的参数，否则这个组件的内容将会显示undefined(未定义)。\n```\nCrafty.e(\"2D, Canvas, Text\").text(function () { \n\treturn \"hello world!\";\n});\n```\ntextColor()方法用来设置组件文字的颜色，你可以使用HEX、rgb或者rgba的方式来定义颜色。\n```\nCrafty.e(\"2D, DOM, Text\").textColor('#FF0000')\n\t\t.textColor('rgba(0, 255, 0, 0.5)')\n\t\t.textColor('white');\n```\ntextFont()方法用来设置文字的字体。如果有多个字体的属性，传入一个对象的方式进行设置，Crafty支持设置的属性有以下几个：\n```\nCrafty.e(\"2D, DOM, Text\").textFont({ 'type': 'italic', 'family': 'Arial' , 'size':'20px', 'weight':'bold', 'lineHeight':'30px'});\n```\nunselectable()方法设置Text组件中的内容不能被高亮选中。Canvas的Text是不能被高亮选中的，所以这个方法只对DOM的Text组件有效。\n\n```\nCrafty.e(\"2D, DOM, Text\").text('This text cannot be highlighted!').unselectable();\n```","slug":"CraftyJs-Start","published":1,"updated":"2016-09-12T08:32:55.030Z","layout":"post","link":"","_id":"citcmx74s0000y4fi6y7szxih","content":"<p>　　前不久听了一趟分享课，分享课的主题是JS游戏的制作，但是如果是自己写游戏比较的繁琐，如果能应用一个游戏引擎，就能大大的简化游戏的开发速度和开发效率，于是我在网上参考了几个游戏引擎，找到了CraftyJs这个游戏引擎还是挺不错的，但是苦于网上的教程不是很全面，所以今天就开个坑，写个入门级的教程，仅供参考。<br><a id=\"more\"></a></p>\n<h3 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h3><p>首先从<a href=\"http://craftyjs.com/\" target=\"_blank\" rel=\"external\">官网</a>上下载CraftyJs的脚本引用到项目中来。然后就可以开始写我们自己的程序了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CraftyJs.init(this.config.width,this.config.height);</div></pre></td></tr></table></figure></p>\n<p>这段代码用于初始化整个stage，用官方的话来说就是舞台，所有的元素将在这整个舞台里活动。这个舞台的宽度是this.config.width(px)，高度是this.config.height(px)。如果有元素超出了舞台的范围，这个元素将被遮住，因为整个舞台设置了样式overflow:hidden将超出的元素隐藏掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.background(&quot;#f0f0f0&quot;);</div></pre></td></tr></table></figure></p>\n<p>你还可以通过background()方法给整个舞台设置背景颜色</p>\n<h3 id=\"2-放置场景\"><a href=\"#2-放置场景\" class=\"headerlink\" title=\"2. 放置场景\"></a>2. 放置场景</h3><p>当整个舞台初始化后就可以玩游戏了吧？不！你去剧院看戏一入座演员就给你演戏么，当然不是，还需要一些场景的带入和切换。这些场景比如加载动画、菜单选项等一系列。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.defineScene(&quot;loading&quot;, function() &#123;</div><div class=\"line\">\tCrafty.background(&quot;#000&quot;);</div><div class=\"line\">\tCrafty.e(&quot;2D, DOM, Text&quot;).attr(&#123;</div><div class=\"line\">\t\tw: 100,</div><div class=\"line\">\t\th: 20,</div><div class=\"line\">\t\tx: 150,</div><div class=\"line\">\t\ty: 120</div><div class=\"line\">\t&#125;).text(&quot;Loading&quot;).css(&#123;</div><div class=\"line\">\t\t&quot;text-align&quot;: &quot;center&quot;</div><div class=\"line\">\t&#125;).textColor(&quot;#FFFFFF&quot;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们可以使用Crafty.defineScene()方法来定义一个场景。在这里我们定义了一个叫loading的场景，里面只有一个元素就是一行”Loading”的字。但是定义好了场景并没有显示在舞台上，因为这个场景并没有被调用到。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.enterScene(&quot;loading&quot;);</div></pre></td></tr></table></figure></p>\n<p>通过enterScene()这个方法来展示刚才我们定义好场景，你会在舞台上看到这个场景。这个展示舞台的方法可以在任何地方被调用。但是需要注意的是这个方法会清除舞台上所有的元素，除了那些有”Persist”组件的元素（组件这一名词下面会解释到）。</p>\n<h3 id=\"3-实体-组件系统\"><a href=\"#3-实体-组件系统\" class=\"headerlink\" title=\"3. 实体/组件系统\"></a>3. 实体/组件系统</h3><p>现在到了CraftyJS最重要的部分来了，就是CraftyJS独特的实体/组件系统。这个系统有点面向对象编程的意思。整个系统分为两个部分。</p>\n<h5 id=\"1-组件系统\"><a href=\"#1-组件系统\" class=\"headerlink\" title=\"(1) 组件系统\"></a>(1) 组件系统</h5><p>所谓的组件，有点类似JAVA中的对象（不是现实里的对象），看不见摸不着，是对实体的抽象。每个组件里封装了对应的方法，可以在实体中直接调用。CraftyJS中有很多已经被预先定义好的组件可以直接拿来使用，而且组件可以被重复地继承。</p>\n<h5 id=\"2-实体系统\"><a href=\"#2-实体系统\" class=\"headerlink\" title=\"(2) 实体系统\"></a>(2) 实体系统</h5><p>实体是真正看得见的元素，是对组件的“实例化”。一个单一的实体能够继承多个实体。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var square = Crafty.e(&apos;2D, DOM, Color&apos;);</div></pre></td></tr></table></figure></p>\n<p>这样就通过e()方法定义了几个叫”square”的实体。这个实体继承了三个组件”2D”、”DOM”和”Color”，这三个组件预先在CraftyJS中就已经被定义好了。如果你觉得单单使用这三个组件还不够，你可以后续往”square”这个实体中再添加组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.addComponent(&quot;Text&quot;);</div></pre></td></tr></table></figure></p>\n<p>通过addComponent()方法向实体中加入”Text”组件，这个方法支持一次添加多个组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.addComponent(&quot;Text,Mouse&quot;);//这是可以的</div></pre></td></tr></table></figure></p>\n<p>你还可以通过has()方法判断某个实体中是否含有某个组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.has(&quot;Mouse&quot;);</div></pre></td></tr></table></figure></p>\n<p>这个方法返回一个boolean类型的值。但是需要注意的是这个方法一次性只能判断一个组件存在，并不支持同时判定多个组件比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.has(&quot;2D,DOM&quot;);//这是错误的</div></pre></td></tr></table></figure></p>\n<p>如果你对某个组件不满意，你还可以把它删掉，这个方法也不支持传入两个以上的组件名称<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.removeComponent(&quot;2D&quot;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-常用的属性和方法\"><a href=\"#4-常用的属性和方法\" class=\"headerlink\" title=\"4. 常用的属性和方法\"></a>4. 常用的属性和方法</h3><h5 id=\"1-“2D”组件\"><a href=\"#1-“2D”组件\" class=\"headerlink\" title=\"(1) “2D”组件\"></a>(1) “2D”组件</h5><p>2D组件是CraftyJS预先给我们定义好的一个组件，是最常用的组件之一。他提供了一个attr()的方法让我们来设置实体的属性值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.attr(&#123;</div><div class=\"line\">  x: 150,</div><div class=\"line\">  y: 150,</div><div class=\"line\">  w: 100,</div><div class=\"line\">  h: 100,</div><div class=\"line\">  alpha: 0.5,</div><div class=\"line\">  rotation: 45,</div><div class=\"line\">  visible:true</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>这里的x和y是实体相对于舞台左上角的位置，单位都为像素(px)。w和h是实体的宽度和高度，单位也是像素(px)。alpha是实体的透明度，取值范围是0到1。visible代表实体是否可见，只能接受boolean类型的参数。x、y、w、h如果不设置值，默认为0。</p>\n<h5 id=\"2-“Text”组件\"><a href=\"#2-“Text”组件\" class=\"headerlink\" title=\"(2) “Text”组件\"></a>(2) “Text”组件</h5><p>Text组件有四个方法可以使用，分别是text()、textColor()、textFont()和unselectable()。text()方法用于设置组件里面的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D,DOM,Text&quot;).text(&quot;hello world!&quot;);</div></pre></td></tr></table></figure></p>\n<p>text()方法支持传入一个方法，但是这个方法必须要返回一个字符串类型的参数，否则这个组件的内容将会显示undefined(未定义)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, Canvas, Text&quot;).text(function () &#123; </div><div class=\"line\">\treturn &quot;hello world!&quot;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>textColor()方法用来设置组件文字的颜色，你可以使用HEX、rgb或者rgba的方式来定义颜色。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).textColor(&apos;#FF0000&apos;)</div><div class=\"line\">\t\t.textColor(&apos;rgba(0, 255, 0, 0.5)&apos;)</div><div class=\"line\">\t\t.textColor(&apos;white&apos;);</div></pre></td></tr></table></figure></p>\n<p>textFont()方法用来设置文字的字体。如果有多个字体的属性，传入一个对象的方式进行设置，Crafty支持设置的属性有以下几个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).textFont(&#123; &apos;type&apos;: &apos;italic&apos;, &apos;family&apos;: &apos;Arial&apos; , &apos;size&apos;:&apos;20px&apos;, &apos;weight&apos;:&apos;bold&apos;, &apos;lineHeight&apos;:&apos;30px&apos;&#125;);</div></pre></td></tr></table></figure></p>\n<p>unselectable()方法设置Text组件中的内容不能被高亮选中。Canvas的Text是不能被高亮选中的，所以这个方法只对DOM的Text组件有效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).text(&apos;This text cannot be highlighted!&apos;).unselectable();</div></pre></td></tr></table></figure>","excerpt":"<p>　　前不久听了一趟分享课，分享课的主题是JS游戏的制作，但是如果是自己写游戏比较的繁琐，如果能应用一个游戏引擎，就能大大的简化游戏的开发速度和开发效率，于是我在网上参考了几个游戏引擎，找到了CraftyJs这个游戏引擎还是挺不错的，但是苦于网上的教程不是很全面，所以今天就开个坑，写个入门级的教程，仅供参考。<br>","more":"</p>\n<h3 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h3><p>首先从<a href=\"http://craftyjs.com/\">官网</a>上下载CraftyJs的脚本引用到项目中来。然后就可以开始写我们自己的程序了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CraftyJs.init(this.config.width,this.config.height);</div></pre></td></tr></table></figure></p>\n<p>这段代码用于初始化整个stage，用官方的话来说就是舞台，所有的元素将在这整个舞台里活动。这个舞台的宽度是this.config.width(px)，高度是this.config.height(px)。如果有元素超出了舞台的范围，这个元素将被遮住，因为整个舞台设置了样式overflow:hidden将超出的元素隐藏掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.background(&quot;#f0f0f0&quot;);</div></pre></td></tr></table></figure></p>\n<p>你还可以通过background()方法给整个舞台设置背景颜色</p>\n<h3 id=\"2-放置场景\"><a href=\"#2-放置场景\" class=\"headerlink\" title=\"2. 放置场景\"></a>2. 放置场景</h3><p>当整个舞台初始化后就可以玩游戏了吧？不！你去剧院看戏一入座演员就给你演戏么，当然不是，还需要一些场景的带入和切换。这些场景比如加载动画、菜单选项等一系列。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.defineScene(&quot;loading&quot;, function() &#123;</div><div class=\"line\">\tCrafty.background(&quot;#000&quot;);</div><div class=\"line\">\tCrafty.e(&quot;2D, DOM, Text&quot;).attr(&#123;</div><div class=\"line\">\t\tw: 100,</div><div class=\"line\">\t\th: 20,</div><div class=\"line\">\t\tx: 150,</div><div class=\"line\">\t\ty: 120</div><div class=\"line\">\t&#125;).text(&quot;Loading&quot;).css(&#123;</div><div class=\"line\">\t\t&quot;text-align&quot;: &quot;center&quot;</div><div class=\"line\">\t&#125;).textColor(&quot;#FFFFFF&quot;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们可以使用Crafty.defineScene()方法来定义一个场景。在这里我们定义了一个叫loading的场景，里面只有一个元素就是一行”Loading”的字。但是定义好了场景并没有显示在舞台上，因为这个场景并没有被调用到。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.enterScene(&quot;loading&quot;);</div></pre></td></tr></table></figure></p>\n<p>通过enterScene()这个方法来展示刚才我们定义好场景，你会在舞台上看到这个场景。这个展示舞台的方法可以在任何地方被调用。但是需要注意的是这个方法会清除舞台上所有的元素，除了那些有”Persist”组件的元素（组件这一名词下面会解释到）。</p>\n<h3 id=\"3-实体-组件系统\"><a href=\"#3-实体-组件系统\" class=\"headerlink\" title=\"3. 实体/组件系统\"></a>3. 实体/组件系统</h3><p>现在到了CraftyJS最重要的部分来了，就是CraftyJS独特的实体/组件系统。这个系统有点面向对象编程的意思。整个系统分为两个部分。</p>\n<h5 id=\"1-组件系统\"><a href=\"#1-组件系统\" class=\"headerlink\" title=\"(1) 组件系统\"></a>(1) 组件系统</h5><p>所谓的组件，有点类似JAVA中的对象（不是现实里的对象），看不见摸不着，是对实体的抽象。每个组件里封装了对应的方法，可以在实体中直接调用。CraftyJS中有很多已经被预先定义好的组件可以直接拿来使用，而且组件可以被重复地继承。</p>\n<h5 id=\"2-实体系统\"><a href=\"#2-实体系统\" class=\"headerlink\" title=\"(2) 实体系统\"></a>(2) 实体系统</h5><p>实体是真正看得见的元素，是对组件的“实例化”。一个单一的实体能够继承多个实体。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var square = Crafty.e(&apos;2D, DOM, Color&apos;);</div></pre></td></tr></table></figure></p>\n<p>这样就通过e()方法定义了几个叫”square”的实体。这个实体继承了三个组件”2D”、”DOM”和”Color”，这三个组件预先在CraftyJS中就已经被定义好了。如果你觉得单单使用这三个组件还不够，你可以后续往”square”这个实体中再添加组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.addComponent(&quot;Text&quot;);</div></pre></td></tr></table></figure></p>\n<p>通过addComponent()方法向实体中加入”Text”组件，这个方法支持一次添加多个组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.addComponent(&quot;Text,Mouse&quot;);//这是可以的</div></pre></td></tr></table></figure></p>\n<p>你还可以通过has()方法判断某个实体中是否含有某个组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.has(&quot;Mouse&quot;);</div></pre></td></tr></table></figure></p>\n<p>这个方法返回一个boolean类型的值。但是需要注意的是这个方法一次性只能判断一个组件存在，并不支持同时判定多个组件比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.has(&quot;2D,DOM&quot;);//这是错误的</div></pre></td></tr></table></figure></p>\n<p>如果你对某个组件不满意，你还可以把它删掉，这个方法也不支持传入两个以上的组件名称<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.removeComponent(&quot;2D&quot;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-常用的属性和方法\"><a href=\"#4-常用的属性和方法\" class=\"headerlink\" title=\"4. 常用的属性和方法\"></a>4. 常用的属性和方法</h3><h5 id=\"1-“2D”组件\"><a href=\"#1-“2D”组件\" class=\"headerlink\" title=\"(1) “2D”组件\"></a>(1) “2D”组件</h5><p>2D组件是CraftyJS预先给我们定义好的一个组件，是最常用的组件之一。他提供了一个attr()的方法让我们来设置实体的属性值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">square.attr(&#123;</div><div class=\"line\">  x: 150,</div><div class=\"line\">  y: 150,</div><div class=\"line\">  w: 100,</div><div class=\"line\">  h: 100,</div><div class=\"line\">  alpha: 0.5,</div><div class=\"line\">  rotation: 45,</div><div class=\"line\">  visible:true</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>这里的x和y是实体相对于舞台左上角的位置，单位都为像素(px)。w和h是实体的宽度和高度，单位也是像素(px)。alpha是实体的透明度，取值范围是0到1。visible代表实体是否可见，只能接受boolean类型的参数。x、y、w、h如果不设置值，默认为0。</p>\n<h5 id=\"2-“Text”组件\"><a href=\"#2-“Text”组件\" class=\"headerlink\" title=\"(2) “Text”组件\"></a>(2) “Text”组件</h5><p>Text组件有四个方法可以使用，分别是text()、textColor()、textFont()和unselectable()。text()方法用于设置组件里面的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D,DOM,Text&quot;).text(&quot;hello world!&quot;);</div></pre></td></tr></table></figure></p>\n<p>text()方法支持传入一个方法，但是这个方法必须要返回一个字符串类型的参数，否则这个组件的内容将会显示undefined(未定义)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, Canvas, Text&quot;).text(function () &#123; </div><div class=\"line\">\treturn &quot;hello world!&quot;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>textColor()方法用来设置组件文字的颜色，你可以使用HEX、rgb或者rgba的方式来定义颜色。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).textColor(&apos;#FF0000&apos;)</div><div class=\"line\">\t\t.textColor(&apos;rgba(0, 255, 0, 0.5)&apos;)</div><div class=\"line\">\t\t.textColor(&apos;white&apos;);</div></pre></td></tr></table></figure></p>\n<p>textFont()方法用来设置文字的字体。如果有多个字体的属性，传入一个对象的方式进行设置，Crafty支持设置的属性有以下几个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).textFont(&#123; &apos;type&apos;: &apos;italic&apos;, &apos;family&apos;: &apos;Arial&apos; , &apos;size&apos;:&apos;20px&apos;, &apos;weight&apos;:&apos;bold&apos;, &apos;lineHeight&apos;:&apos;30px&apos;&#125;);</div></pre></td></tr></table></figure></p>\n<p>unselectable()方法设置Text组件中的内容不能被高亮选中。Canvas的Text是不能被高亮选中的，所以这个方法只对DOM的Text组件有效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Crafty.e(&quot;2D, DOM, Text&quot;).text(&apos;This text cannot be highlighted!&apos;).unselectable();</div></pre></td></tr></table></figure>"},{"title":"Js中this的用法","date":"2016-09-18T04:02:50.000Z","description":null,"toc":null,"author":"Corner","comments":1,"original":null,"photos":[],"_content":"  this在js中是一个常见的变量，在不同的函数中this指代了不同的变量。刚开始我很困惑，怎么在这里是这个意思，到了相似的函数中却又改变了意思，让我很摸不着头脑。所以整理一下this的用法\n<!-- more -->\n\n# 1.全局作用域中的this\n\n在全局作用域中，this指向了Window对象。\n\n```\nthis.name='xyf';\nconsole.log(this);\n```\n在上面我们把name挂载到了全局作用域Window下面，其实我们在用var声明变量的时候也是把变量挂载到Window下面。所以上面的操作等价于下面的操作\n```\nvar name='xyf';\nconsole.log(this);\n```\n\n# 2.函数中的this\n在js中函数分为普通的函数和构造函数，主要的区别就是函数的调用形式。普通函数能够直接调用，而构造函数是不能调用，需要用new实例化。\n### 普通函数中的this\n普通函数的中this指向了Window对象\n```\nfunction show(name){\n\tthis.name=name;\n}\nshow('xyf');\n```\n这时候函数show作为一个普通函数调用，虽然看起来像构造函数，但是内部的this却指向了Window对象，如果你在控制台打印Window对象，它下面挂载了name属性\n\n### 构造函数中的this\n构造函数中的this则指向了它所实例化的对象\n```\nfunction show(name){\n\tthis.name=name;\n}\nvar myshow=new show('xyf');\nconsole.log(myshow.name);  //'xyf'\n```\n在这里如果你直接调用show('xyf')跟普通函数没有区别，通过new实例化一个myshow对象，这时候this就指向了这个实例化出来的对象\n\n\n# 3.对象中的this\n\n对象中的this指向了当前对象\n\n```\nvar person={\n\tname='origin',\n\tsetName:function(name){\n\t\tthis.name=name\n\t},\n\tgetName:function(){\n\t\treturn this.name;\n\t}\n}\nperson.setName('xyf');\nconsole.log(person.getName()); //'xyf'\n```\n\n但是如果对象的函数中嵌套了其他函数，this的指向就被改变了。\n\n### 嵌套自执行函数\n```\nvar person={\n\tname='origin',\n\tsetName:function(name){\n\t\t(function(name){\n\t\t\tthis.name=name;\n\t\t})(name);\n\t},\n\tgetName:function(){\n\t\treturn this.name;\n\t}\n}\nperson.setName('xyf');\nconsole.log(person.getName()); //'origin'\n```\n这时候自执行函数中的this指向了全局对象Window，所以setName()函数并不能产生作用。\n\n\n### 嵌套回调函数\n```\nvar person={\n\tname='origin',\n\tsetName:function(name){\n\t\t$('.temp').on('click',function(e){\n\t\t\tthis.name=name;\n\t\t});\n\t},\n\tgetName:function(){\n\t\treturn this.name;\n\t}\n}\nperson.setName('xyf');\nconsole.log(person.getName()); //'origin'\n```\n\n这里的this指向了$('.temp')这个对象。为了避免这些情况，我们先将this赋值给局部变量that，然后使用that。这时候that就指向了我们需要的对象。\n```\nvar that=this;\n(function(name){\n\tthat.name=name;\n})(name);\n```\n\n### 特别声明\n如果将一个对象中的函数赋值给一个变量，再通过该变量调用这个函数，此时函数中的this指向Window对象，即使这个操作在回调函数中。\n```\nvar person={\n\tname:\"person\",\n\tsetName:function(name){\n\t\tthis.name=name\n\t},\n\tgetName:function(){\n\t\treturn this.name;\n\t}\n}\nvar temp={\n\tname:\"temp\",\n\ttempFun:function(){\n\t\t$('.temp').on('click',function(){\n\t\t\tvar fun=person.getName;\n\t\t\tfun(); //''\n\t\t})\n\t}\n}\ntemp.tempFun();\n```\n\n# 4.使用apply和call函数改变this指向\n这两个函数都能够手动指定被调用函数内部this指向哪个对象。\n\n```\nfunction person(name){\n\tthis.name=\"\";\n\tthis.setName=function(name){\n\t\tthis.name=name;\n\t}\n}\n\nvar p1=new person('p1');\nvar p2=new person('p2');\np1.setName('p1');\np2.setName('p2');\n\n//p1.setName.apply(p2,['c']);\np1.setName.call(p2,'c');\nconsole.log(p2.name); //'c'\n```\n当对象p1使用apply函数后，p1对象中的this就指向了对象p2，此时对象p1的setName函数的操作就作用在了p2对象上。\n\n\n\n\n\n\n","source":"_posts/Explain-Js-This.md","raw":"title: Js中this的用法\ndate: 2016-09-18 12:02:50\ndescription:\ncategories:\n- 编程\ntags:\n- JS\n- 前端\ntoc:\nauthor: Corner\ncomments:\noriginal:\npermalink:\nphotos:\n---\n  this在js中是一个常见的变量，在不同的函数中this指代了不同的变量。刚开始我很困惑，怎么在这里是这个意思，到了相似的函数中却又改变了意思，让我很摸不着头脑。所以整理一下this的用法\n<!-- more -->\n\n# 1.全局作用域中的this\n\n在全局作用域中，this指向了Window对象。\n\n```\nthis.name='xyf';\nconsole.log(this);\n```\n在上面我们把name挂载到了全局作用域Window下面，其实我们在用var声明变量的时候也是把变量挂载到Window下面。所以上面的操作等价于下面的操作\n```\nvar name='xyf';\nconsole.log(this);\n```\n\n# 2.函数中的this\n在js中函数分为普通的函数和构造函数，主要的区别就是函数的调用形式。普通函数能够直接调用，而构造函数是不能调用，需要用new实例化。\n### 普通函数中的this\n普通函数的中this指向了Window对象\n```\nfunction show(name){\n\tthis.name=name;\n}\nshow('xyf');\n```\n这时候函数show作为一个普通函数调用，虽然看起来像构造函数，但是内部的this却指向了Window对象，如果你在控制台打印Window对象，它下面挂载了name属性\n\n### 构造函数中的this\n构造函数中的this则指向了它所实例化的对象\n```\nfunction show(name){\n\tthis.name=name;\n}\nvar myshow=new show('xyf');\nconsole.log(myshow.name);  //'xyf'\n```\n在这里如果你直接调用show('xyf')跟普通函数没有区别，通过new实例化一个myshow对象，这时候this就指向了这个实例化出来的对象\n\n\n# 3.对象中的this\n\n对象中的this指向了当前对象\n\n```\nvar person={\n\tname='origin',\n\tsetName:function(name){\n\t\tthis.name=name\n\t},\n\tgetName:function(){\n\t\treturn this.name;\n\t}\n}\nperson.setName('xyf');\nconsole.log(person.getName()); //'xyf'\n```\n\n但是如果对象的函数中嵌套了其他函数，this的指向就被改变了。\n\n### 嵌套自执行函数\n```\nvar person={\n\tname='origin',\n\tsetName:function(name){\n\t\t(function(name){\n\t\t\tthis.name=name;\n\t\t})(name);\n\t},\n\tgetName:function(){\n\t\treturn this.name;\n\t}\n}\nperson.setName('xyf');\nconsole.log(person.getName()); //'origin'\n```\n这时候自执行函数中的this指向了全局对象Window，所以setName()函数并不能产生作用。\n\n\n### 嵌套回调函数\n```\nvar person={\n\tname='origin',\n\tsetName:function(name){\n\t\t$('.temp').on('click',function(e){\n\t\t\tthis.name=name;\n\t\t});\n\t},\n\tgetName:function(){\n\t\treturn this.name;\n\t}\n}\nperson.setName('xyf');\nconsole.log(person.getName()); //'origin'\n```\n\n这里的this指向了$('.temp')这个对象。为了避免这些情况，我们先将this赋值给局部变量that，然后使用that。这时候that就指向了我们需要的对象。\n```\nvar that=this;\n(function(name){\n\tthat.name=name;\n})(name);\n```\n\n### 特别声明\n如果将一个对象中的函数赋值给一个变量，再通过该变量调用这个函数，此时函数中的this指向Window对象，即使这个操作在回调函数中。\n```\nvar person={\n\tname:\"person\",\n\tsetName:function(name){\n\t\tthis.name=name\n\t},\n\tgetName:function(){\n\t\treturn this.name;\n\t}\n}\nvar temp={\n\tname:\"temp\",\n\ttempFun:function(){\n\t\t$('.temp').on('click',function(){\n\t\t\tvar fun=person.getName;\n\t\t\tfun(); //''\n\t\t})\n\t}\n}\ntemp.tempFun();\n```\n\n# 4.使用apply和call函数改变this指向\n这两个函数都能够手动指定被调用函数内部this指向哪个对象。\n\n```\nfunction person(name){\n\tthis.name=\"\";\n\tthis.setName=function(name){\n\t\tthis.name=name;\n\t}\n}\n\nvar p1=new person('p1');\nvar p2=new person('p2');\np1.setName('p1');\np2.setName('p2');\n\n//p1.setName.apply(p2,['c']);\np1.setName.call(p2,'c');\nconsole.log(p2.name); //'c'\n```\n当对象p1使用apply函数后，p1对象中的this就指向了对象p2，此时对象p1的setName函数的操作就作用在了p2对象上。\n\n\n\n\n\n\n","slug":"Explain-Js-This","published":1,"updated":"2016-09-21T01:57:49.047Z","layout":"post","link":"","_id":"citcmx74y0002y4finoisg6dh","content":"<p>  this在js中是一个常见的变量，在不同的函数中this指代了不同的变量。刚开始我很困惑，怎么在这里是这个意思，到了相似的函数中却又改变了意思，让我很摸不着头脑。所以整理一下this的用法<br><a id=\"more\"></a></p>\n<h1 id=\"1-全局作用域中的this\"><a href=\"#1-全局作用域中的this\" class=\"headerlink\" title=\"1.全局作用域中的this\"></a>1.全局作用域中的this</h1><p>在全局作用域中，this指向了Window对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.name=&apos;xyf&apos;;</div><div class=\"line\">console.log(this);</div></pre></td></tr></table></figure>\n<p>在上面我们把name挂载到了全局作用域Window下面，其实我们在用var声明变量的时候也是把变量挂载到Window下面。所以上面的操作等价于下面的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name=&apos;xyf&apos;;</div><div class=\"line\">console.log(this);</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-函数中的this\"><a href=\"#2-函数中的this\" class=\"headerlink\" title=\"2.函数中的this\"></a>2.函数中的this</h1><p>在js中函数分为普通的函数和构造函数，主要的区别就是函数的调用形式。普通函数能够直接调用，而构造函数是不能调用，需要用new实例化。</p>\n<h3 id=\"普通函数中的this\"><a href=\"#普通函数中的this\" class=\"headerlink\" title=\"普通函数中的this\"></a>普通函数中的this</h3><p>普通函数的中this指向了Window对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function show(name)&#123;</div><div class=\"line\">\tthis.name=name;</div><div class=\"line\">&#125;</div><div class=\"line\">show(&apos;xyf&apos;);</div></pre></td></tr></table></figure></p>\n<p>这时候函数show作为一个普通函数调用，虽然看起来像构造函数，但是内部的this却指向了Window对象，如果你在控制台打印Window对象，它下面挂载了name属性</p>\n<h3 id=\"构造函数中的this\"><a href=\"#构造函数中的this\" class=\"headerlink\" title=\"构造函数中的this\"></a>构造函数中的this</h3><p>构造函数中的this则指向了它所实例化的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function show(name)&#123;</div><div class=\"line\">\tthis.name=name;</div><div class=\"line\">&#125;</div><div class=\"line\">var myshow=new show(&apos;xyf&apos;);</div><div class=\"line\">console.log(myshow.name);  //&apos;xyf&apos;</div></pre></td></tr></table></figure></p>\n<p>在这里如果你直接调用show(‘xyf’)跟普通函数没有区别，通过new实例化一个myshow对象，这时候this就指向了这个实例化出来的对象</p>\n<h1 id=\"3-对象中的this\"><a href=\"#3-对象中的this\" class=\"headerlink\" title=\"3.对象中的this\"></a>3.对象中的this</h1><p>对象中的this指向了当前对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">\tname=&apos;origin&apos;,</div><div class=\"line\">\tsetName:function(name)&#123;</div><div class=\"line\">\t\tthis.name=name</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tgetName:function()&#123;</div><div class=\"line\">\t\treturn this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">person.setName(&apos;xyf&apos;);</div><div class=\"line\">console.log(person.getName()); //&apos;xyf&apos;</div></pre></td></tr></table></figure>\n<p>但是如果对象的函数中嵌套了其他函数，this的指向就被改变了。</p>\n<h3 id=\"嵌套自执行函数\"><a href=\"#嵌套自执行函数\" class=\"headerlink\" title=\"嵌套自执行函数\"></a>嵌套自执行函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">\tname=&apos;origin&apos;,</div><div class=\"line\">\tsetName:function(name)&#123;</div><div class=\"line\">\t\t(function(name)&#123;</div><div class=\"line\">\t\t\tthis.name=name;</div><div class=\"line\">\t\t&#125;)(name);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tgetName:function()&#123;</div><div class=\"line\">\t\treturn this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">person.setName(&apos;xyf&apos;);</div><div class=\"line\">console.log(person.getName()); //&apos;origin&apos;</div></pre></td></tr></table></figure>\n<p>这时候自执行函数中的this指向了全局对象Window，所以setName()函数并不能产生作用。</p>\n<h3 id=\"嵌套回调函数\"><a href=\"#嵌套回调函数\" class=\"headerlink\" title=\"嵌套回调函数\"></a>嵌套回调函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">\tname=&apos;origin&apos;,</div><div class=\"line\">\tsetName:function(name)&#123;</div><div class=\"line\">\t\t$(&apos;.temp&apos;).on(&apos;click&apos;,function(e)&#123;</div><div class=\"line\">\t\t\tthis.name=name;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tgetName:function()&#123;</div><div class=\"line\">\t\treturn this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">person.setName(&apos;xyf&apos;);</div><div class=\"line\">console.log(person.getName()); //&apos;origin&apos;</div></pre></td></tr></table></figure>\n<p>这里的this指向了$(‘.temp’)这个对象。为了避免这些情况，我们先将this赋值给局部变量that，然后使用that。这时候that就指向了我们需要的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var that=this;</div><div class=\"line\">(function(name)&#123;</div><div class=\"line\">\tthat.name=name;</div><div class=\"line\">&#125;)(name);</div></pre></td></tr></table></figure></p>\n<h3 id=\"特别声明\"><a href=\"#特别声明\" class=\"headerlink\" title=\"特别声明\"></a>特别声明</h3><p>如果将一个对象中的函数赋值给一个变量，再通过该变量调用这个函数，此时函数中的this指向Window对象，即使这个操作在回调函数中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">\tname:&quot;person&quot;,</div><div class=\"line\">\tsetName:function(name)&#123;</div><div class=\"line\">\t\tthis.name=name</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tgetName:function()&#123;</div><div class=\"line\">\t\treturn this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var temp=&#123;</div><div class=\"line\">\tname:&quot;temp&quot;,</div><div class=\"line\">\ttempFun:function()&#123;</div><div class=\"line\">\t\t$(&apos;.temp&apos;).on(&apos;click&apos;,function()&#123;</div><div class=\"line\">\t\t\tvar fun=person.getName;</div><div class=\"line\">\t\t\tfun(); //&apos;&apos;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">temp.tempFun();</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-使用apply和call函数改变this指向\"><a href=\"#4-使用apply和call函数改变this指向\" class=\"headerlink\" title=\"4.使用apply和call函数改变this指向\"></a>4.使用apply和call函数改变this指向</h1><p>这两个函数都能够手动指定被调用函数内部this指向哪个对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function person(name)&#123;</div><div class=\"line\">\tthis.name=&quot;&quot;;</div><div class=\"line\">\tthis.setName=function(name)&#123;</div><div class=\"line\">\t\tthis.name=name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p1=new person(&apos;p1&apos;);</div><div class=\"line\">var p2=new person(&apos;p2&apos;);</div><div class=\"line\">p1.setName(&apos;p1&apos;);</div><div class=\"line\">p2.setName(&apos;p2&apos;);</div><div class=\"line\"></div><div class=\"line\">//p1.setName.apply(p2,[&apos;c&apos;]);</div><div class=\"line\">p1.setName.call(p2,&apos;c&apos;);</div><div class=\"line\">console.log(p2.name); //&apos;c&apos;</div></pre></td></tr></table></figure>\n<p>当对象p1使用apply函数后，p1对象中的this就指向了对象p2，此时对象p1的setName函数的操作就作用在了p2对象上。</p>\n","excerpt":"<p>  this在js中是一个常见的变量，在不同的函数中this指代了不同的变量。刚开始我很困惑，怎么在这里是这个意思，到了相似的函数中却又改变了意思，让我很摸不着头脑。所以整理一下this的用法<br>","more":"</p>\n<h1 id=\"1-全局作用域中的this\"><a href=\"#1-全局作用域中的this\" class=\"headerlink\" title=\"1.全局作用域中的this\"></a>1.全局作用域中的this</h1><p>在全局作用域中，this指向了Window对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.name=&apos;xyf&apos;;</div><div class=\"line\">console.log(this);</div></pre></td></tr></table></figure>\n<p>在上面我们把name挂载到了全局作用域Window下面，其实我们在用var声明变量的时候也是把变量挂载到Window下面。所以上面的操作等价于下面的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name=&apos;xyf&apos;;</div><div class=\"line\">console.log(this);</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-函数中的this\"><a href=\"#2-函数中的this\" class=\"headerlink\" title=\"2.函数中的this\"></a>2.函数中的this</h1><p>在js中函数分为普通的函数和构造函数，主要的区别就是函数的调用形式。普通函数能够直接调用，而构造函数是不能调用，需要用new实例化。</p>\n<h3 id=\"普通函数中的this\"><a href=\"#普通函数中的this\" class=\"headerlink\" title=\"普通函数中的this\"></a>普通函数中的this</h3><p>普通函数的中this指向了Window对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function show(name)&#123;</div><div class=\"line\">\tthis.name=name;</div><div class=\"line\">&#125;</div><div class=\"line\">show(&apos;xyf&apos;);</div></pre></td></tr></table></figure></p>\n<p>这时候函数show作为一个普通函数调用，虽然看起来像构造函数，但是内部的this却指向了Window对象，如果你在控制台打印Window对象，它下面挂载了name属性</p>\n<h3 id=\"构造函数中的this\"><a href=\"#构造函数中的this\" class=\"headerlink\" title=\"构造函数中的this\"></a>构造函数中的this</h3><p>构造函数中的this则指向了它所实例化的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function show(name)&#123;</div><div class=\"line\">\tthis.name=name;</div><div class=\"line\">&#125;</div><div class=\"line\">var myshow=new show(&apos;xyf&apos;);</div><div class=\"line\">console.log(myshow.name);  //&apos;xyf&apos;</div></pre></td></tr></table></figure></p>\n<p>在这里如果你直接调用show(‘xyf’)跟普通函数没有区别，通过new实例化一个myshow对象，这时候this就指向了这个实例化出来的对象</p>\n<h1 id=\"3-对象中的this\"><a href=\"#3-对象中的this\" class=\"headerlink\" title=\"3.对象中的this\"></a>3.对象中的this</h1><p>对象中的this指向了当前对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">\tname=&apos;origin&apos;,</div><div class=\"line\">\tsetName:function(name)&#123;</div><div class=\"line\">\t\tthis.name=name</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tgetName:function()&#123;</div><div class=\"line\">\t\treturn this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">person.setName(&apos;xyf&apos;);</div><div class=\"line\">console.log(person.getName()); //&apos;xyf&apos;</div></pre></td></tr></table></figure>\n<p>但是如果对象的函数中嵌套了其他函数，this的指向就被改变了。</p>\n<h3 id=\"嵌套自执行函数\"><a href=\"#嵌套自执行函数\" class=\"headerlink\" title=\"嵌套自执行函数\"></a>嵌套自执行函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">\tname=&apos;origin&apos;,</div><div class=\"line\">\tsetName:function(name)&#123;</div><div class=\"line\">\t\t(function(name)&#123;</div><div class=\"line\">\t\t\tthis.name=name;</div><div class=\"line\">\t\t&#125;)(name);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tgetName:function()&#123;</div><div class=\"line\">\t\treturn this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">person.setName(&apos;xyf&apos;);</div><div class=\"line\">console.log(person.getName()); //&apos;origin&apos;</div></pre></td></tr></table></figure>\n<p>这时候自执行函数中的this指向了全局对象Window，所以setName()函数并不能产生作用。</p>\n<h3 id=\"嵌套回调函数\"><a href=\"#嵌套回调函数\" class=\"headerlink\" title=\"嵌套回调函数\"></a>嵌套回调函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">\tname=&apos;origin&apos;,</div><div class=\"line\">\tsetName:function(name)&#123;</div><div class=\"line\">\t\t$(&apos;.temp&apos;).on(&apos;click&apos;,function(e)&#123;</div><div class=\"line\">\t\t\tthis.name=name;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tgetName:function()&#123;</div><div class=\"line\">\t\treturn this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">person.setName(&apos;xyf&apos;);</div><div class=\"line\">console.log(person.getName()); //&apos;origin&apos;</div></pre></td></tr></table></figure>\n<p>这里的this指向了$(‘.temp’)这个对象。为了避免这些情况，我们先将this赋值给局部变量that，然后使用that。这时候that就指向了我们需要的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var that=this;</div><div class=\"line\">(function(name)&#123;</div><div class=\"line\">\tthat.name=name;</div><div class=\"line\">&#125;)(name);</div></pre></td></tr></table></figure></p>\n<h3 id=\"特别声明\"><a href=\"#特别声明\" class=\"headerlink\" title=\"特别声明\"></a>特别声明</h3><p>如果将一个对象中的函数赋值给一个变量，再通过该变量调用这个函数，此时函数中的this指向Window对象，即使这个操作在回调函数中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">\tname:&quot;person&quot;,</div><div class=\"line\">\tsetName:function(name)&#123;</div><div class=\"line\">\t\tthis.name=name</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tgetName:function()&#123;</div><div class=\"line\">\t\treturn this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var temp=&#123;</div><div class=\"line\">\tname:&quot;temp&quot;,</div><div class=\"line\">\ttempFun:function()&#123;</div><div class=\"line\">\t\t$(&apos;.temp&apos;).on(&apos;click&apos;,function()&#123;</div><div class=\"line\">\t\t\tvar fun=person.getName;</div><div class=\"line\">\t\t\tfun(); //&apos;&apos;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">temp.tempFun();</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-使用apply和call函数改变this指向\"><a href=\"#4-使用apply和call函数改变this指向\" class=\"headerlink\" title=\"4.使用apply和call函数改变this指向\"></a>4.使用apply和call函数改变this指向</h1><p>这两个函数都能够手动指定被调用函数内部this指向哪个对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function person(name)&#123;</div><div class=\"line\">\tthis.name=&quot;&quot;;</div><div class=\"line\">\tthis.setName=function(name)&#123;</div><div class=\"line\">\t\tthis.name=name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p1=new person(&apos;p1&apos;);</div><div class=\"line\">var p2=new person(&apos;p2&apos;);</div><div class=\"line\">p1.setName(&apos;p1&apos;);</div><div class=\"line\">p2.setName(&apos;p2&apos;);</div><div class=\"line\"></div><div class=\"line\">//p1.setName.apply(p2,[&apos;c&apos;]);</div><div class=\"line\">p1.setName.call(p2,&apos;c&apos;);</div><div class=\"line\">console.log(p2.name); //&apos;c&apos;</div></pre></td></tr></table></figure>\n<p>当对象p1使用apply函数后，p1对象中的this就指向了对象p2，此时对象p1的setName函数的操作就作用在了p2对象上。</p>"},{"title":"Git命令学习（下）","date":"2016-09-12T07:54:00.000Z","description":null,"toc":true,"author":"Corner","comments":1,"original":null,"photos":[],"_content":"　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的。\n<!-- more -->\n\n\n\n","source":"_posts/Git-Command-End.md","raw":"title: Git命令学习（下）\ndate: 2016-09-12 15:54:00\ndescription: \ncategories:\n- 编程\ntags:\n- git\ntoc: true\nauthor: Corner\ncomments:\noriginal:\npermalink: \nphotos:\n---\n　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的。\n<!-- more -->\n\n\n\n","slug":"Git-Command-End","published":1,"updated":"2016-09-12T08:33:08.258Z","layout":"post","link":"","_id":"citcmx7530005y4firc4a44i0","content":"<p>　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的。<br><a id=\"more\"></a></p>\n","excerpt":"<p>　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的。<br>","more":"</p>"},{"title":"Hexo+GitHub搭建个人博客（上）","date":"2016-09-12T07:54:00.000Z","description":null,"toc":true,"author":"Corner","comments":1,"original":null,"photos":["http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg","http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg"],"_content":"　　使用Hexo+GitHub搭建个人博客ssss\n<!-- more -->\n\n# 使用Hexo+GitHub搭建个人博客\n占位","source":"_posts/HexoGitHub-Start.md","raw":"title: Hexo+GitHub搭建个人博客（上）\ndate: 2016-09-12 15:54:00\ndescription: \ncategories:\n- 编程\ntags:\n- git\ntoc: true\nauthor: Corner\ncomments:\noriginal:\npermalink: \nphotos:\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg\n---\n　　使用Hexo+GitHub搭建个人博客ssss\n<!-- more -->\n\n# 使用Hexo+GitHub搭建个人博客\n占位","slug":"HexoGitHub-Start","published":1,"updated":"2016-09-13T09:00:52.313Z","layout":"post","link":"","_id":"citcmx7550006y4fi1ywcblnp","content":"<p>　　使用Hexo+GitHub搭建个人博客ssss<br><a id=\"more\"></a></p>\n<h1 id=\"使用Hexo-GitHub搭建个人博客\"><a href=\"#使用Hexo-GitHub搭建个人博客\" class=\"headerlink\" title=\"使用Hexo+GitHub搭建个人博客\"></a>使用Hexo+GitHub搭建个人博客</h1><p>占位</p>\n","excerpt":"<p>　　使用Hexo+GitHub搭建个人博客ssss<br>","more":"</p>\n<h1 id=\"使用Hexo-GitHub搭建个人博客\"><a href=\"#使用Hexo-GitHub搭建个人博客\" class=\"headerlink\" title=\"使用Hexo+GitHub搭建个人博客\"></a>使用Hexo+GitHub搭建个人博客</h1><p>占位</p>"},{"title":"Git命令学习（上）","date":"2016-09-11T01:48:00.000Z","description":null,"toc":true,"author":"Corner","comments":1,"original":null,"photos":[],"_content":"　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的基本操作。本文比较基础，适合入门。\n<!-- more -->\n\n\n## 1. 创建版本库\n\n### 创建目录\n```\nmkdir example\ncd example\n```\n### 将这个目录变成版本库\n```\ngit init\n```\n目录下多一个.git目录，用来跟踪管理版本库，你也可以把线上的项目克隆到本地，使用下面的命令\n\n```\ngit clone [url]\n```\n## 2.将文件添加到版本库\n\n### 追踪文件\n```\ngit add [filename]\n```\n或者一次性添加所有未追踪的文件\n```\ngit add .\n```\n### 提交到仓库\n```\ngit commit -m \"[you description]\"\n```\n\n## 3.查看当前仓库的状态\n\n```\ngit status\n```\n\n这个命令用来查看仓库的详细状态，添加-s查看简要的状态(s表示short)\n\n```\ngit status -s\n```\n\n简要状态下前面的符号代表的意思：\n\n* ?? 表示添加文件后而未追踪的文件\n* M 表示修改文件(Modify)\n* A 表示添加文件后追踪了该文件(Add)\n* D 表示删除文件(Delete)\n\n简要状态下颜色的不同也有区别。如果是红色，则表示该文件修改后没有追踪；是绿色则表示修改后追踪了改文件。\n\n## 4.对比文件差异\n\ngit diff(difference)此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容\n```\ngit diff\n```\n如果使用add命令追踪该文件后，diff命令失效。\n## 5.显示提交的日志\n```\ngit log\n```\nlog命令用于显示从最近到以前的提交日志，commit后面显示的一长串字符数字是该次提交所对应的版本号，每次都不会重复的。log命令显示的信息比较多，可以加上 --pretty=oneline 参数\n```\ngit log --pretty=oneline\n```\n在下面的版本回退中需要用到提交日志的版本号，这时候就需要复制这个版本号。在windows下复制git窗口中的内容的快捷键是Ctrl+Insert，粘贴是Insert\n\n## 6.版本回退\n```\ngit reset --hard [LogId]\n```\nreset命令用于控制版本回退到之前提交时的状态。这边的LogId就是上一节中复制出来的版本号。\n\n## 7.撤销修改\n```\ngit checkout -- [filename]\n```\ncheckout命令让你在工作区做的修改全部撤销，回到上一次commit时的状态。\n\n## 8.删除文件\n如果你在工作区删除了一个文件，那么status就会提醒你工作区和暂存区不一致。这时候你有两种选择，一个是git rm命令确认删除，\n```\ngit rm [filename]\n```\n这个命令相当于同时进行了删除命令和追踪文件命令，其等价命令如下：\n```\nrm [filename]\ngit add [filename]\n```\n另一个是通过checkout命令找回删除的文件\n```\ngit checkout -- [filename]\n```\n","source":"_posts/Git-Command-Start.md","raw":"title: Git命令学习（上）\ndate: 2016-09-11 09:48:00\ndescription: \ncategories:\n- 编程\ntags:\n- git\ntoc: true\nauthor: Corner\ncomments:\noriginal:\npermalink: \nphotos:\n---\n　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的基本操作。本文比较基础，适合入门。\n<!-- more -->\n\n\n## 1. 创建版本库\n\n### 创建目录\n```\nmkdir example\ncd example\n```\n### 将这个目录变成版本库\n```\ngit init\n```\n目录下多一个.git目录，用来跟踪管理版本库，你也可以把线上的项目克隆到本地，使用下面的命令\n\n```\ngit clone [url]\n```\n## 2.将文件添加到版本库\n\n### 追踪文件\n```\ngit add [filename]\n```\n或者一次性添加所有未追踪的文件\n```\ngit add .\n```\n### 提交到仓库\n```\ngit commit -m \"[you description]\"\n```\n\n## 3.查看当前仓库的状态\n\n```\ngit status\n```\n\n这个命令用来查看仓库的详细状态，添加-s查看简要的状态(s表示short)\n\n```\ngit status -s\n```\n\n简要状态下前面的符号代表的意思：\n\n* ?? 表示添加文件后而未追踪的文件\n* M 表示修改文件(Modify)\n* A 表示添加文件后追踪了该文件(Add)\n* D 表示删除文件(Delete)\n\n简要状态下颜色的不同也有区别。如果是红色，则表示该文件修改后没有追踪；是绿色则表示修改后追踪了改文件。\n\n## 4.对比文件差异\n\ngit diff(difference)此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容\n```\ngit diff\n```\n如果使用add命令追踪该文件后，diff命令失效。\n## 5.显示提交的日志\n```\ngit log\n```\nlog命令用于显示从最近到以前的提交日志，commit后面显示的一长串字符数字是该次提交所对应的版本号，每次都不会重复的。log命令显示的信息比较多，可以加上 --pretty=oneline 参数\n```\ngit log --pretty=oneline\n```\n在下面的版本回退中需要用到提交日志的版本号，这时候就需要复制这个版本号。在windows下复制git窗口中的内容的快捷键是Ctrl+Insert，粘贴是Insert\n\n## 6.版本回退\n```\ngit reset --hard [LogId]\n```\nreset命令用于控制版本回退到之前提交时的状态。这边的LogId就是上一节中复制出来的版本号。\n\n## 7.撤销修改\n```\ngit checkout -- [filename]\n```\ncheckout命令让你在工作区做的修改全部撤销，回到上一次commit时的状态。\n\n## 8.删除文件\n如果你在工作区删除了一个文件，那么status就会提醒你工作区和暂存区不一致。这时候你有两种选择，一个是git rm命令确认删除，\n```\ngit rm [filename]\n```\n这个命令相当于同时进行了删除命令和追踪文件命令，其等价命令如下：\n```\nrm [filename]\ngit add [filename]\n```\n另一个是通过checkout命令找回删除的文件\n```\ngit checkout -- [filename]\n```\n","slug":"Git-Command-Start","published":1,"updated":"2016-09-13T02:02:41.720Z","layout":"post","link":"","_id":"citcmx7570007y4figpp5rm4l","content":"<p>　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的基本操作。本文比较基础，适合入门。<br><a id=\"more\"></a></p>\n<h2 id=\"1-创建版本库\"><a href=\"#1-创建版本库\" class=\"headerlink\" title=\"1. 创建版本库\"></a>1. 创建版本库</h2><h3 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir example</div><div class=\"line\">cd example</div></pre></td></tr></table></figure>\n<h3 id=\"将这个目录变成版本库\"><a href=\"#将这个目录变成版本库\" class=\"headerlink\" title=\"将这个目录变成版本库\"></a>将这个目录变成版本库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure>\n<p>目录下多一个.git目录，用来跟踪管理版本库，你也可以把线上的项目克隆到本地，使用下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone [url]</div></pre></td></tr></table></figure>\n<h2 id=\"2-将文件添加到版本库\"><a href=\"#2-将文件添加到版本库\" class=\"headerlink\" title=\"2.将文件添加到版本库\"></a>2.将文件添加到版本库</h2><h3 id=\"追踪文件\"><a href=\"#追踪文件\" class=\"headerlink\" title=\"追踪文件\"></a>追踪文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add [filename]</div></pre></td></tr></table></figure>\n<p>或者一次性添加所有未追踪的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div></pre></td></tr></table></figure></p>\n<h3 id=\"提交到仓库\"><a href=\"#提交到仓库\" class=\"headerlink\" title=\"提交到仓库\"></a>提交到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;[you description]&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"3-查看当前仓库的状态\"><a href=\"#3-查看当前仓库的状态\" class=\"headerlink\" title=\"3.查看当前仓库的状态\"></a>3.查看当前仓库的状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p>这个命令用来查看仓库的详细状态，添加-s查看简要的状态(s表示short)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status -s</div></pre></td></tr></table></figure>\n<p>简要状态下前面的符号代表的意思：</p>\n<ul>\n<li>?? 表示添加文件后而未追踪的文件</li>\n<li>M 表示修改文件(Modify)</li>\n<li>A 表示添加文件后追踪了该文件(Add)</li>\n<li>D 表示删除文件(Delete)</li>\n</ul>\n<p>简要状态下颜色的不同也有区别。如果是红色，则表示该文件修改后没有追踪；是绿色则表示修改后追踪了改文件。</p>\n<h2 id=\"4-对比文件差异\"><a href=\"#4-对比文件差异\" class=\"headerlink\" title=\"4.对比文件差异\"></a>4.对比文件差异</h2><p>git diff(difference)此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div></pre></td></tr></table></figure></p>\n<p>如果使用add命令追踪该文件后，diff命令失效。</p>\n<h2 id=\"5-显示提交的日志\"><a href=\"#5-显示提交的日志\" class=\"headerlink\" title=\"5.显示提交的日志\"></a>5.显示提交的日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div></pre></td></tr></table></figure>\n<p>log命令用于显示从最近到以前的提交日志，commit后面显示的一长串字符数字是该次提交所对应的版本号，每次都不会重复的。log命令显示的信息比较多，可以加上 –pretty=oneline 参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --pretty=oneline</div></pre></td></tr></table></figure></p>\n<p>在下面的版本回退中需要用到提交日志的版本号，这时候就需要复制这个版本号。在windows下复制git窗口中的内容的快捷键是Ctrl+Insert，粘贴是Insert</p>\n<h2 id=\"6-版本回退\"><a href=\"#6-版本回退\" class=\"headerlink\" title=\"6.版本回退\"></a>6.版本回退</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard [LogId]</div></pre></td></tr></table></figure>\n<p>reset命令用于控制版本回退到之前提交时的状态。这边的LogId就是上一节中复制出来的版本号。</p>\n<h2 id=\"7-撤销修改\"><a href=\"#7-撤销修改\" class=\"headerlink\" title=\"7.撤销修改\"></a>7.撤销修改</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- [filename]</div></pre></td></tr></table></figure>\n<p>checkout命令让你在工作区做的修改全部撤销，回到上一次commit时的状态。</p>\n<h2 id=\"8-删除文件\"><a href=\"#8-删除文件\" class=\"headerlink\" title=\"8.删除文件\"></a>8.删除文件</h2><p>如果你在工作区删除了一个文件，那么status就会提醒你工作区和暂存区不一致。这时候你有两种选择，一个是git rm命令确认删除，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm [filename]</div></pre></td></tr></table></figure></p>\n<p>这个命令相当于同时进行了删除命令和追踪文件命令，其等价命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm [filename]</div><div class=\"line\">git add [filename]</div></pre></td></tr></table></figure></p>\n<p>另一个是通过checkout命令找回删除的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- [filename]</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>　　git是一个开源的分布式版本控制系统，可以很高效的处理不同规模的项目的版本管理。git的命令比较多，在这篇文章中主要介绍了各种git命令的基本操作。本文比较基础，适合入门。<br>","more":"</p>\n<h2 id=\"1-创建版本库\"><a href=\"#1-创建版本库\" class=\"headerlink\" title=\"1. 创建版本库\"></a>1. 创建版本库</h2><h3 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir example</div><div class=\"line\">cd example</div></pre></td></tr></table></figure>\n<h3 id=\"将这个目录变成版本库\"><a href=\"#将这个目录变成版本库\" class=\"headerlink\" title=\"将这个目录变成版本库\"></a>将这个目录变成版本库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure>\n<p>目录下多一个.git目录，用来跟踪管理版本库，你也可以把线上的项目克隆到本地，使用下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone [url]</div></pre></td></tr></table></figure>\n<h2 id=\"2-将文件添加到版本库\"><a href=\"#2-将文件添加到版本库\" class=\"headerlink\" title=\"2.将文件添加到版本库\"></a>2.将文件添加到版本库</h2><h3 id=\"追踪文件\"><a href=\"#追踪文件\" class=\"headerlink\" title=\"追踪文件\"></a>追踪文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add [filename]</div></pre></td></tr></table></figure>\n<p>或者一次性添加所有未追踪的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div></pre></td></tr></table></figure></p>\n<h3 id=\"提交到仓库\"><a href=\"#提交到仓库\" class=\"headerlink\" title=\"提交到仓库\"></a>提交到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;[you description]&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"3-查看当前仓库的状态\"><a href=\"#3-查看当前仓库的状态\" class=\"headerlink\" title=\"3.查看当前仓库的状态\"></a>3.查看当前仓库的状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p>这个命令用来查看仓库的详细状态，添加-s查看简要的状态(s表示short)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status -s</div></pre></td></tr></table></figure>\n<p>简要状态下前面的符号代表的意思：</p>\n<ul>\n<li>?? 表示添加文件后而未追踪的文件</li>\n<li>M 表示修改文件(Modify)</li>\n<li>A 表示添加文件后追踪了该文件(Add)</li>\n<li>D 表示删除文件(Delete)</li>\n</ul>\n<p>简要状态下颜色的不同也有区别。如果是红色，则表示该文件修改后没有追踪；是绿色则表示修改后追踪了改文件。</p>\n<h2 id=\"4-对比文件差异\"><a href=\"#4-对比文件差异\" class=\"headerlink\" title=\"4.对比文件差异\"></a>4.对比文件差异</h2><p>git diff(difference)此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div></pre></td></tr></table></figure></p>\n<p>如果使用add命令追踪该文件后，diff命令失效。</p>\n<h2 id=\"5-显示提交的日志\"><a href=\"#5-显示提交的日志\" class=\"headerlink\" title=\"5.显示提交的日志\"></a>5.显示提交的日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div></pre></td></tr></table></figure>\n<p>log命令用于显示从最近到以前的提交日志，commit后面显示的一长串字符数字是该次提交所对应的版本号，每次都不会重复的。log命令显示的信息比较多，可以加上 –pretty=oneline 参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --pretty=oneline</div></pre></td></tr></table></figure></p>\n<p>在下面的版本回退中需要用到提交日志的版本号，这时候就需要复制这个版本号。在windows下复制git窗口中的内容的快捷键是Ctrl+Insert，粘贴是Insert</p>\n<h2 id=\"6-版本回退\"><a href=\"#6-版本回退\" class=\"headerlink\" title=\"6.版本回退\"></a>6.版本回退</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard [LogId]</div></pre></td></tr></table></figure>\n<p>reset命令用于控制版本回退到之前提交时的状态。这边的LogId就是上一节中复制出来的版本号。</p>\n<h2 id=\"7-撤销修改\"><a href=\"#7-撤销修改\" class=\"headerlink\" title=\"7.撤销修改\"></a>7.撤销修改</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- [filename]</div></pre></td></tr></table></figure>\n<p>checkout命令让你在工作区做的修改全部撤销，回到上一次commit时的状态。</p>\n<h2 id=\"8-删除文件\"><a href=\"#8-删除文件\" class=\"headerlink\" title=\"8.删除文件\"></a>8.删除文件</h2><p>如果你在工作区删除了一个文件，那么status就会提醒你工作区和暂存区不一致。这时候你有两种选择，一个是git rm命令确认删除，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm [filename]</div></pre></td></tr></table></figure></p>\n<p>这个命令相当于同时进行了删除命令和追踪文件命令，其等价命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm [filename]</div><div class=\"line\">git add [filename]</div></pre></td></tr></table></figure></p>\n<p>另一个是通过checkout命令找回删除的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- [filename]</div></pre></td></tr></table></figure></p>"},{"title":"深入理解js中的变量和作用域","date":"2016-09-21T02:51:58.000Z","description":null,"toc":null,"author":"Corner","comments":1,"original":null,"photos":[],"_content":"  如果把整个js比作是一个作战的军队，作用域就像是军队中的一个个编制单位，负责整编士兵；而变量就像军队中的最小单位---士兵。\n<!-- more -->\n\n\n# 1.变量\n### 变量分类\njs中的变量分为两种：全局变量和局部变量。全局变量很好理解，就是在js任何地方都能够调用的变量；而局部变量就只能在函数的内部才能够调用的变量。\n```javascript\nvar a=10;\nfunction show(){\n  console.log('a:'+a); //a:10\n  var b=2;\n  console.log('inside b:'+b); //inside b:2\n}\nshow();\nconsole.log('outside b:'+b); //b is no defined\n```\n在上面的程序中，变量a就是一个全局变量，在函数的内部能够调用。但是这里的变量b就是局部变量，当函数结束调用后，变量b就被回收了，因此在函数外部调用失败。\n\n**另外需要特别注意的是：**\n如果在声明局部变量时不用var声明，那么这个变量自动“提升”为全局变量。\n```javascript\nvar a=10;\nfunction show(){\n  console.log('a:'+a); //a:10\n  b=2;\n  console.log('inside b:'+b); //inside b:2\n}\nshow();\nconsole.log('outside b:'+b); //outside b:2\n```\n\n对比两段代码，如果你在声明b=2时没有写var，那么b就隐式地声明为全局变量，在函数外面还是能够被调用到的。\n虽然使用全局变量能够在任何地方调用，很方便，但是全局变量的优点也给他带来了缺点：\n\n1. 一直占用内存：全局变量保存在静态存储区，如果全局变量过多会占多大量内存，严重影响页面的性能。\n2. 影响了函数的独立性：一般函数都是传入参数和传出返回值进行运算的，如果函数依赖于全局变量，破坏了函数的这种独立性，同时也降低了函数的可移植性。\n\n*因此我们在定义变量时一般要尽可能少的定义全局变量。*\n\n### 变量声明\n\n> 函数声明优先于变量声明\n\n下面我们通过一段代码来说明.\n```javascript\nvar a; \nfunction a(){\n}\nconsole.log(typeof a); //function\n```\n\n或许有人是认为函数声明在后面的原因，那么调换一下位置。\n\n```javascript\nfunction a(){\n}\nvar a; \nconsole.log(typeof a); //function\n```\n\n调换位置后变量a的类型还是function，这时候声明变量a的语句没有起作用，被函数声明覆盖了。因此函数声明优先于变量的声明。\n但是如果我们在声明的同时给a进行赋值。\n\n```javascript\nfunction a(){\n}\nvar a='xyf'; \nconsole.log(typeof a); //string\n```\n\n我们将其调换一下位置再次进行验证。\n\n```javascript\nvar a='xyf'; \nfunction a(){\n}\nconsole.log(typeof a); //string\n```\n\n可以看到，给变量a进行赋值后，不管变量a在哪，其类型变为字符串类型，上面两段代码相当于如下代码：\n\n```javascript\nfunction a(){\n}\nvar a;\na='xyf';\nconsole.log(typeof a); //string\n```\n\na最后被赋值为字符串，因此a的类型自然是字符串\n\n# 2.作用域\n\n### 块级作用域\njs中作用域只有一个函数作用域，一个很大的特点就是js中**没有块级作用域**。函数作用域是比较容易理解的，那么什么是块级作用域呢？\n\n> 任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。\n\n理解了块级作用域，来看一下下面的小例子。\n\n```javascript\nconsole.log(v); //undefined\nvar v = \"world\";\n```\n\n这段代码很好理解，由于变量v在没有赋值前使用了，所以是undefined。其实这里存在着声明的提前。\n\n> 当前作用域内的声明都会提升到作用域的最前面，包括变量和函数的声明\n\n由于js作用域中的声明都会被提升到作用域的最前面，所以，上面的代码相当于：\n\n```javascript\nvar v;\nconsole.log(v); //undefined\nv = \"world\";\n```\n\n这样就能很清晰地理解为什么变量v是undefined的了。\n下面我们把变量v放到一个方法中去：\n\n```javascript\nvar v = \"hello\";\nif(true){\n  console.log(v); //hello\n  var v = \"world\";\n}\n```\n\n在这里由于js没有块级作用域，所以if方法没有“形成”一个封闭的作用域，并不能够“阻挡”里面的代码获取外面的变量。\n\n### 函数作用域\n我们再把变量v放到函数中去：\n\n```javascript\nvar v='hello';\nfunction show(){\n\tconsole.log(v); //undefined\n\tvar v='world';\n}\nshow();\n```\n\n由于show函数是一个函数作用域，“阻挡”里面和外面变量的“沟通”，所以函数中并不能获取到函数外部的变量v，同时存在着变量声明提前，因此，上面的代码相当于：\n\n```javascript\nvar v='hello';\nfunction show(){\n\tvar v;\n\tconsole.log(v); //undefined\n\tv='world';\n}\nshow();\n```\n\n理解了上面的代码，相信下面的代码也不难理解了。\n\n```javascript\nvar v = \"hello\";\n(function(){\n  console.log(v);\n  var v = \"world\";\n})();\n```\n\n在这里自执行函数形成了函数作用域\n\n\n\n### 需要注意的是\n\n> 变量提升只提升函数的声明，并不提升函数的定义\n\n```javascript\nshow(); //show is not a function\nvar show=function(){\n\t//...\n}\nshow(); //成功运行\n```\n\n或许有人有疑问，为什么这边定义的函数就不能执行呢？在这里我们需要明白函数在js中是如何进行定义的。函数有两种定义方式，一种是函数声明，另一种是函数表达式。那么什么是函数声明什么是函数表达式呢？\n\n```javascript\n//函数声明\nfunction show(){\n\t//....\n}\n//函数表达式\nvar show=function(){\n\t//...\n}\n```\n\n乍一看，他们长得很像，写法都差不多，但是实际上还是有区别的。js的解析器对函数声明和函数表达式并不是一视同仁的对待的，有点“种族歧视”的意思在里面。\n函数声明就像是“一等公民”，js会优先读取，确保在执行前就已经被解析了，所以函数声明放在当前作用域的任何地方都能够被调用，甚至放到调用函数声明之后面。\n而函数表达式就显得比较“普通”，和一般的变量一样，只有到执行到该行时才进行解析，因此，调用函数表达式要在定义后进行使用。\n\n\n\n","source":"_posts/JS-Variate-Scope.md","raw":"title: 深入理解js中的变量和作用域\ndate: 2016-09-21 10:51:58\ndescription:\ncategories:\n- 编程\ntags:\n- 前端\n- js\ntoc:\nauthor: Corner\ncomments:\noriginal:\npermalink:\nphotos:\n---\n  如果把整个js比作是一个作战的军队，作用域就像是军队中的一个个编制单位，负责整编士兵；而变量就像军队中的最小单位---士兵。\n<!-- more -->\n\n\n# 1.变量\n### 变量分类\njs中的变量分为两种：全局变量和局部变量。全局变量很好理解，就是在js任何地方都能够调用的变量；而局部变量就只能在函数的内部才能够调用的变量。\n```javascript\nvar a=10;\nfunction show(){\n  console.log('a:'+a); //a:10\n  var b=2;\n  console.log('inside b:'+b); //inside b:2\n}\nshow();\nconsole.log('outside b:'+b); //b is no defined\n```\n在上面的程序中，变量a就是一个全局变量，在函数的内部能够调用。但是这里的变量b就是局部变量，当函数结束调用后，变量b就被回收了，因此在函数外部调用失败。\n\n**另外需要特别注意的是：**\n如果在声明局部变量时不用var声明，那么这个变量自动“提升”为全局变量。\n```javascript\nvar a=10;\nfunction show(){\n  console.log('a:'+a); //a:10\n  b=2;\n  console.log('inside b:'+b); //inside b:2\n}\nshow();\nconsole.log('outside b:'+b); //outside b:2\n```\n\n对比两段代码，如果你在声明b=2时没有写var，那么b就隐式地声明为全局变量，在函数外面还是能够被调用到的。\n虽然使用全局变量能够在任何地方调用，很方便，但是全局变量的优点也给他带来了缺点：\n\n1. 一直占用内存：全局变量保存在静态存储区，如果全局变量过多会占多大量内存，严重影响页面的性能。\n2. 影响了函数的独立性：一般函数都是传入参数和传出返回值进行运算的，如果函数依赖于全局变量，破坏了函数的这种独立性，同时也降低了函数的可移植性。\n\n*因此我们在定义变量时一般要尽可能少的定义全局变量。*\n\n### 变量声明\n\n> 函数声明优先于变量声明\n\n下面我们通过一段代码来说明.\n```javascript\nvar a; \nfunction a(){\n}\nconsole.log(typeof a); //function\n```\n\n或许有人是认为函数声明在后面的原因，那么调换一下位置。\n\n```javascript\nfunction a(){\n}\nvar a; \nconsole.log(typeof a); //function\n```\n\n调换位置后变量a的类型还是function，这时候声明变量a的语句没有起作用，被函数声明覆盖了。因此函数声明优先于变量的声明。\n但是如果我们在声明的同时给a进行赋值。\n\n```javascript\nfunction a(){\n}\nvar a='xyf'; \nconsole.log(typeof a); //string\n```\n\n我们将其调换一下位置再次进行验证。\n\n```javascript\nvar a='xyf'; \nfunction a(){\n}\nconsole.log(typeof a); //string\n```\n\n可以看到，给变量a进行赋值后，不管变量a在哪，其类型变为字符串类型，上面两段代码相当于如下代码：\n\n```javascript\nfunction a(){\n}\nvar a;\na='xyf';\nconsole.log(typeof a); //string\n```\n\na最后被赋值为字符串，因此a的类型自然是字符串\n\n# 2.作用域\n\n### 块级作用域\njs中作用域只有一个函数作用域，一个很大的特点就是js中**没有块级作用域**。函数作用域是比较容易理解的，那么什么是块级作用域呢？\n\n> 任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。\n\n理解了块级作用域，来看一下下面的小例子。\n\n```javascript\nconsole.log(v); //undefined\nvar v = \"world\";\n```\n\n这段代码很好理解，由于变量v在没有赋值前使用了，所以是undefined。其实这里存在着声明的提前。\n\n> 当前作用域内的声明都会提升到作用域的最前面，包括变量和函数的声明\n\n由于js作用域中的声明都会被提升到作用域的最前面，所以，上面的代码相当于：\n\n```javascript\nvar v;\nconsole.log(v); //undefined\nv = \"world\";\n```\n\n这样就能很清晰地理解为什么变量v是undefined的了。\n下面我们把变量v放到一个方法中去：\n\n```javascript\nvar v = \"hello\";\nif(true){\n  console.log(v); //hello\n  var v = \"world\";\n}\n```\n\n在这里由于js没有块级作用域，所以if方法没有“形成”一个封闭的作用域，并不能够“阻挡”里面的代码获取外面的变量。\n\n### 函数作用域\n我们再把变量v放到函数中去：\n\n```javascript\nvar v='hello';\nfunction show(){\n\tconsole.log(v); //undefined\n\tvar v='world';\n}\nshow();\n```\n\n由于show函数是一个函数作用域，“阻挡”里面和外面变量的“沟通”，所以函数中并不能获取到函数外部的变量v，同时存在着变量声明提前，因此，上面的代码相当于：\n\n```javascript\nvar v='hello';\nfunction show(){\n\tvar v;\n\tconsole.log(v); //undefined\n\tv='world';\n}\nshow();\n```\n\n理解了上面的代码，相信下面的代码也不难理解了。\n\n```javascript\nvar v = \"hello\";\n(function(){\n  console.log(v);\n  var v = \"world\";\n})();\n```\n\n在这里自执行函数形成了函数作用域\n\n\n\n### 需要注意的是\n\n> 变量提升只提升函数的声明，并不提升函数的定义\n\n```javascript\nshow(); //show is not a function\nvar show=function(){\n\t//...\n}\nshow(); //成功运行\n```\n\n或许有人有疑问，为什么这边定义的函数就不能执行呢？在这里我们需要明白函数在js中是如何进行定义的。函数有两种定义方式，一种是函数声明，另一种是函数表达式。那么什么是函数声明什么是函数表达式呢？\n\n```javascript\n//函数声明\nfunction show(){\n\t//....\n}\n//函数表达式\nvar show=function(){\n\t//...\n}\n```\n\n乍一看，他们长得很像，写法都差不多，但是实际上还是有区别的。js的解析器对函数声明和函数表达式并不是一视同仁的对待的，有点“种族歧视”的意思在里面。\n函数声明就像是“一等公民”，js会优先读取，确保在执行前就已经被解析了，所以函数声明放在当前作用域的任何地方都能够被调用，甚至放到调用函数声明之后面。\n而函数表达式就显得比较“普通”，和一般的变量一样，只有到执行到该行时才进行解析，因此，调用函数表达式要在定义后进行使用。\n\n\n\n","slug":"JS-Variate-Scope","published":1,"updated":"2016-09-21T08:14:57.109Z","layout":"post","link":"","_id":"citcmx75a000ay4fi84w7x520","content":"<p>  如果把整个js比作是一个作战的军队，作用域就像是军队中的一个个编制单位，负责整编士兵；而变量就像军队中的最小单位—士兵。<br><a id=\"more\"></a></p>\n<h1 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1.变量\"></a>1.变量</h1><h3 id=\"变量分类\"><a href=\"#变量分类\" class=\"headerlink\" title=\"变量分类\"></a>变量分类</h3><p>js中的变量分为两种：全局变量和局部变量。全局变量很好理解，就是在js任何地方都能够调用的变量；而局部变量就只能在函数的内部才能够调用的变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span>+a); <span class=\"comment\">//a:10</span></div><div class=\"line\">  <span class=\"keyword\">var</span> b=<span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inside b:'</span>+b); <span class=\"comment\">//inside b:2</span></div><div class=\"line\">&#125;</div><div class=\"line\">show();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outside b:'</span>+b); <span class=\"comment\">//b is no defined</span></div></pre></td></tr></table></figure></p>\n<p>在上面的程序中，变量a就是一个全局变量，在函数的内部能够调用。但是这里的变量b就是局部变量，当函数结束调用后，变量b就被回收了，因此在函数外部调用失败。</p>\n<p><strong>另外需要特别注意的是：</strong><br>如果在声明局部变量时不用var声明，那么这个变量自动“提升”为全局变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span>+a); <span class=\"comment\">//a:10</span></div><div class=\"line\">  b=<span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inside b:'</span>+b); <span class=\"comment\">//inside b:2</span></div><div class=\"line\">&#125;</div><div class=\"line\">show();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outside b:'</span>+b); <span class=\"comment\">//outside b:2</span></div></pre></td></tr></table></figure></p>\n<p>对比两段代码，如果你在声明b=2时没有写var，那么b就隐式地声明为全局变量，在函数外面还是能够被调用到的。<br>虽然使用全局变量能够在任何地方调用，很方便，但是全局变量的优点也给他带来了缺点：</p>\n<ol>\n<li>一直占用内存：全局变量保存在静态存储区，如果全局变量过多会占多大量内存，严重影响页面的性能。</li>\n<li>影响了函数的独立性：一般函数都是传入参数和传出返回值进行运算的，如果函数依赖于全局变量，破坏了函数的这种独立性，同时也降低了函数的可移植性。</li>\n</ol>\n<p><em>因此我们在定义变量时一般要尽可能少的定义全局变量。</em></p>\n<h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><blockquote>\n<p>函数声明优先于变量声明</p>\n</blockquote>\n<p>下面我们通过一段代码来说明.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//function</span></div></pre></td></tr></table></figure></p>\n<p>或许有人是认为函数声明在后面的原因，那么调换一下位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//function</span></div></pre></td></tr></table></figure>\n<p>调换位置后变量a的类型还是function，这时候声明变量a的语句没有起作用，被函数声明覆盖了。因此函数声明优先于变量的声明。<br>但是如果我们在声明的同时给a进行赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"string\">'xyf'</span>; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//string</span></div></pre></td></tr></table></figure>\n<p>我们将其调换一下位置再次进行验证。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"string\">'xyf'</span>; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//string</span></div></pre></td></tr></table></figure>\n<p>可以看到，给变量a进行赋值后，不管变量a在哪，其类型变为字符串类型，上面两段代码相当于如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a;</div><div class=\"line\">a=<span class=\"string\">'xyf'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//string</span></div></pre></td></tr></table></figure>\n<p>a最后被赋值为字符串，因此a的类型自然是字符串</p>\n<h1 id=\"2-作用域\"><a href=\"#2-作用域\" class=\"headerlink\" title=\"2.作用域\"></a>2.作用域</h1><h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><p>js中作用域只有一个函数作用域，一个很大的特点就是js中<strong>没有块级作用域</strong>。函数作用域是比较容易理解的，那么什么是块级作用域呢？</p>\n<blockquote>\n<p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。</p>\n</blockquote>\n<p>理解了块级作用域，来看一下下面的小例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">\"world\"</span>;</div></pre></td></tr></table></figure>\n<p>这段代码很好理解，由于变量v在没有赋值前使用了，所以是undefined。其实这里存在着声明的提前。</p>\n<blockquote>\n<p>当前作用域内的声明都会提升到作用域的最前面，包括变量和函数的声明</p>\n</blockquote>\n<p>由于js作用域中的声明都会被提升到作用域的最前面，所以，上面的代码相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//undefined</span></div><div class=\"line\">v = <span class=\"string\">\"world\"</span>;</div></pre></td></tr></table></figure>\n<p>这样就能很清晰地理解为什么变量v是undefined的了。<br>下面我们把变量v放到一个方法中去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//hello</span></div><div class=\"line\">  <span class=\"keyword\">var</span> v = <span class=\"string\">\"world\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里由于js没有块级作用域，所以if方法没有“形成”一个封闭的作用域，并不能够“阻挡”里面的代码获取外面的变量。</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><p>我们再把变量v放到函数中去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//undefined</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> v=<span class=\"string\">'world'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">show();</div></pre></td></tr></table></figure>\n<p>由于show函数是一个函数作用域，“阻挡”里面和外面变量的“沟通”，所以函数中并不能获取到函数外部的变量v，同时存在着变量声明提前，因此，上面的代码相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> v;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//undefined</span></div><div class=\"line\">\tv=<span class=\"string\">'world'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">show();</div></pre></td></tr></table></figure>\n<p>理解了上面的代码，相信下面的代码也不难理解了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">  <span class=\"keyword\">var</span> v = <span class=\"string\">\"world\"</span>;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>在这里自执行函数形成了函数作用域</p>\n<h3 id=\"需要注意的是\"><a href=\"#需要注意的是\" class=\"headerlink\" title=\"需要注意的是\"></a>需要注意的是</h3><blockquote>\n<p>变量提升只提升函数的声明，并不提升函数的定义</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">show(); <span class=\"comment\">//show is not a function</span></div><div class=\"line\"><span class=\"keyword\">var</span> show=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\">show(); <span class=\"comment\">//成功运行</span></div></pre></td></tr></table></figure>\n<p>或许有人有疑问，为什么这边定义的函数就不能执行呢？在这里我们需要明白函数在js中是如何进行定义的。函数有两种定义方式，一种是函数声明，另一种是函数表达式。那么什么是函数声明什么是函数表达式呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//....</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//函数表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> show=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>乍一看，他们长得很像，写法都差不多，但是实际上还是有区别的。js的解析器对函数声明和函数表达式并不是一视同仁的对待的，有点“种族歧视”的意思在里面。<br>函数声明就像是“一等公民”，js会优先读取，确保在执行前就已经被解析了，所以函数声明放在当前作用域的任何地方都能够被调用，甚至放到调用函数声明之后面。<br>而函数表达式就显得比较“普通”，和一般的变量一样，只有到执行到该行时才进行解析，因此，调用函数表达式要在定义后进行使用。</p>\n","excerpt":"<p>  如果把整个js比作是一个作战的军队，作用域就像是军队中的一个个编制单位，负责整编士兵；而变量就像军队中的最小单位—士兵。<br>","more":"</p>\n<h1 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1.变量\"></a>1.变量</h1><h3 id=\"变量分类\"><a href=\"#变量分类\" class=\"headerlink\" title=\"变量分类\"></a>变量分类</h3><p>js中的变量分为两种：全局变量和局部变量。全局变量很好理解，就是在js任何地方都能够调用的变量；而局部变量就只能在函数的内部才能够调用的变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span>+a); <span class=\"comment\">//a:10</span></div><div class=\"line\">  <span class=\"keyword\">var</span> b=<span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inside b:'</span>+b); <span class=\"comment\">//inside b:2</span></div><div class=\"line\">&#125;</div><div class=\"line\">show();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outside b:'</span>+b); <span class=\"comment\">//b is no defined</span></div></pre></td></tr></table></figure></p>\n<p>在上面的程序中，变量a就是一个全局变量，在函数的内部能够调用。但是这里的变量b就是局部变量，当函数结束调用后，变量b就被回收了，因此在函数外部调用失败。</p>\n<p><strong>另外需要特别注意的是：</strong><br>如果在声明局部变量时不用var声明，那么这个变量自动“提升”为全局变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span>+a); <span class=\"comment\">//a:10</span></div><div class=\"line\">  b=<span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inside b:'</span>+b); <span class=\"comment\">//inside b:2</span></div><div class=\"line\">&#125;</div><div class=\"line\">show();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outside b:'</span>+b); <span class=\"comment\">//outside b:2</span></div></pre></td></tr></table></figure></p>\n<p>对比两段代码，如果你在声明b=2时没有写var，那么b就隐式地声明为全局变量，在函数外面还是能够被调用到的。<br>虽然使用全局变量能够在任何地方调用，很方便，但是全局变量的优点也给他带来了缺点：</p>\n<ol>\n<li>一直占用内存：全局变量保存在静态存储区，如果全局变量过多会占多大量内存，严重影响页面的性能。</li>\n<li>影响了函数的独立性：一般函数都是传入参数和传出返回值进行运算的，如果函数依赖于全局变量，破坏了函数的这种独立性，同时也降低了函数的可移植性。</li>\n</ol>\n<p><em>因此我们在定义变量时一般要尽可能少的定义全局变量。</em></p>\n<h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><blockquote>\n<p>函数声明优先于变量声明</p>\n</blockquote>\n<p>下面我们通过一段代码来说明.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//function</span></div></pre></td></tr></table></figure></p>\n<p>或许有人是认为函数声明在后面的原因，那么调换一下位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//function</span></div></pre></td></tr></table></figure>\n<p>调换位置后变量a的类型还是function，这时候声明变量a的语句没有起作用，被函数声明覆盖了。因此函数声明优先于变量的声明。<br>但是如果我们在声明的同时给a进行赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"string\">'xyf'</span>; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//string</span></div></pre></td></tr></table></figure>\n<p>我们将其调换一下位置再次进行验证。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"string\">'xyf'</span>; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//string</span></div></pre></td></tr></table></figure>\n<p>可以看到，给变量a进行赋值后，不管变量a在哪，其类型变为字符串类型，上面两段代码相当于如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a;</div><div class=\"line\">a=<span class=\"string\">'xyf'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">//string</span></div></pre></td></tr></table></figure>\n<p>a最后被赋值为字符串，因此a的类型自然是字符串</p>\n<h1 id=\"2-作用域\"><a href=\"#2-作用域\" class=\"headerlink\" title=\"2.作用域\"></a>2.作用域</h1><h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><p>js中作用域只有一个函数作用域，一个很大的特点就是js中<strong>没有块级作用域</strong>。函数作用域是比较容易理解的，那么什么是块级作用域呢？</p>\n<blockquote>\n<p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。</p>\n</blockquote>\n<p>理解了块级作用域，来看一下下面的小例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">\"world\"</span>;</div></pre></td></tr></table></figure>\n<p>这段代码很好理解，由于变量v在没有赋值前使用了，所以是undefined。其实这里存在着声明的提前。</p>\n<blockquote>\n<p>当前作用域内的声明都会提升到作用域的最前面，包括变量和函数的声明</p>\n</blockquote>\n<p>由于js作用域中的声明都会被提升到作用域的最前面，所以，上面的代码相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//undefined</span></div><div class=\"line\">v = <span class=\"string\">\"world\"</span>;</div></pre></td></tr></table></figure>\n<p>这样就能很清晰地理解为什么变量v是undefined的了。<br>下面我们把变量v放到一个方法中去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//hello</span></div><div class=\"line\">  <span class=\"keyword\">var</span> v = <span class=\"string\">\"world\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里由于js没有块级作用域，所以if方法没有“形成”一个封闭的作用域，并不能够“阻挡”里面的代码获取外面的变量。</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><p>我们再把变量v放到函数中去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//undefined</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> v=<span class=\"string\">'world'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">show();</div></pre></td></tr></table></figure>\n<p>由于show函数是一个函数作用域，“阻挡”里面和外面变量的“沟通”，所以函数中并不能获取到函数外部的变量v，同时存在着变量声明提前，因此，上面的代码相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> v;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(v); <span class=\"comment\">//undefined</span></div><div class=\"line\">\tv=<span class=\"string\">'world'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">show();</div></pre></td></tr></table></figure>\n<p>理解了上面的代码，相信下面的代码也不难理解了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">  <span class=\"keyword\">var</span> v = <span class=\"string\">\"world\"</span>;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>在这里自执行函数形成了函数作用域</p>\n<h3 id=\"需要注意的是\"><a href=\"#需要注意的是\" class=\"headerlink\" title=\"需要注意的是\"></a>需要注意的是</h3><blockquote>\n<p>变量提升只提升函数的声明，并不提升函数的定义</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">show(); <span class=\"comment\">//show is not a function</span></div><div class=\"line\"><span class=\"keyword\">var</span> show=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\">show(); <span class=\"comment\">//成功运行</span></div></pre></td></tr></table></figure>\n<p>或许有人有疑问，为什么这边定义的函数就不能执行呢？在这里我们需要明白函数在js中是如何进行定义的。函数有两种定义方式，一种是函数声明，另一种是函数表达式。那么什么是函数声明什么是函数表达式呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//....</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//函数表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> show=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>乍一看，他们长得很像，写法都差不多，但是实际上还是有区别的。js的解析器对函数声明和函数表达式并不是一视同仁的对待的，有点“种族歧视”的意思在里面。<br>函数声明就像是“一等公民”，js会优先读取，确保在执行前就已经被解析了，所以函数声明放在当前作用域的任何地方都能够被调用，甚至放到调用函数声明之后面。<br>而函数表达式就显得比较“普通”，和一般的变量一样，只有到执行到该行时才进行解析，因此，调用函数表达式要在定义后进行使用。</p>"},{"title":"js中闭包的用法整理","date":"2016-09-20T13:48:47.000Z","description":null,"toc":null,"author":"Corner","comments":1,"original":null,"photos":[],"_content":"  闭包在js中比较常见，是js的一种特色，但同时也是js的一个难点。很多面试题都喜欢考核对js闭包的理解。这篇文章整理了js的一些常见的用法。\n<!-- more -->\n\n# 1.什么是js闭包\n对于js闭包，官方的解释是这样的：\n\n> 一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。\n\n第一次读估计很难理解，什么绑定变量的环境表达式、表达式的一部分，都是些什么鬼。用通俗一点的话来说就是：\n\n> 一个函数中有许多变量，这些变量变成了函数的一部分。\n\n要理解闭包，首先要来理解两个概念：变量和作用域。\n\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n　　name : \"My Object\",\n　　getNameFunc : function(){\n　　　　return function(){\n　　　　　　return this.name;\n　　　　};\n　　}\n};\nconsole.log(object.getNameFunc()());\n```\n\n\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n　　name : \"My Object\",\n　　getNameFunc : function(){\n　　　　var that = this;\n　　　　return function(){\n　　　　　　return that.name;\n　　　　};\n　　}\n};\nconsole.log(object.getNameFunc()());\n```\n\n\n\n\n```javascript\nfunction createFunctions(){\n  var result = new Array();\n  for (var i=0; i < 10; i++){\n    result[i] = function(){\n      return i;\n    };\n  }\n  console.log(i);\n  return result;\n}\nvar funcs = createFunctions();\nfor (var i=0; i < funcs.length; i++){\n  console.log(funcs[i]());\n}\n```\n\n\n\n\n\n","source":"_posts/Js-Closure.md","raw":"title: js中闭包的用法整理\ndate: 2016-09-20 21:48:47\ndescription:\ncategories:\n- 编程\ntags:\n- 前端\n- js\ntoc:\nauthor: Corner\ncomments:\noriginal:\npermalink:\nphotos:\n---\n  闭包在js中比较常见，是js的一种特色，但同时也是js的一个难点。很多面试题都喜欢考核对js闭包的理解。这篇文章整理了js的一些常见的用法。\n<!-- more -->\n\n# 1.什么是js闭包\n对于js闭包，官方的解释是这样的：\n\n> 一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。\n\n第一次读估计很难理解，什么绑定变量的环境表达式、表达式的一部分，都是些什么鬼。用通俗一点的话来说就是：\n\n> 一个函数中有许多变量，这些变量变成了函数的一部分。\n\n要理解闭包，首先要来理解两个概念：变量和作用域。\n\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n　　name : \"My Object\",\n　　getNameFunc : function(){\n　　　　return function(){\n　　　　　　return this.name;\n　　　　};\n　　}\n};\nconsole.log(object.getNameFunc()());\n```\n\n\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n　　name : \"My Object\",\n　　getNameFunc : function(){\n　　　　var that = this;\n　　　　return function(){\n　　　　　　return that.name;\n　　　　};\n　　}\n};\nconsole.log(object.getNameFunc()());\n```\n\n\n\n\n```javascript\nfunction createFunctions(){\n  var result = new Array();\n  for (var i=0; i < 10; i++){\n    result[i] = function(){\n      return i;\n    };\n  }\n  console.log(i);\n  return result;\n}\nvar funcs = createFunctions();\nfor (var i=0; i < funcs.length; i++){\n  console.log(funcs[i]());\n}\n```\n\n\n\n\n\n","slug":"Js-Closure","published":1,"updated":"2016-09-21T08:14:07.837Z","layout":"post","link":"","_id":"citcmx75f000cy4fiwbei7198","content":"<p>  闭包在js中比较常见，是js的一种特色，但同时也是js的一个难点。很多面试题都喜欢考核对js闭包的理解。这篇文章整理了js的一些常见的用法。<br><a id=\"more\"></a></p>\n<h1 id=\"1-什么是js闭包\"><a href=\"#1-什么是js闭包\" class=\"headerlink\" title=\"1.什么是js闭包\"></a>1.什么是js闭包</h1><p>对于js闭包，官方的解释是这样的：</p>\n<blockquote>\n<p>一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p>\n</blockquote>\n<p>第一次读估计很难理解，什么绑定变量的环境表达式、表达式的一部分，都是些什么鬼。用通俗一点的话来说就是：</p>\n<blockquote>\n<p>一个函数中有许多变量，这些变量变成了函数的一部分。</p>\n</blockquote>\n<p>要理解闭包，首先要来理解两个概念：变量和作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　name : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　getNameFunc : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　name : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　getNameFunc : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> that.name;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">    result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> funcs = createFunctions();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; funcs.length; i++)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(funcs[i]());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>  闭包在js中比较常见，是js的一种特色，但同时也是js的一个难点。很多面试题都喜欢考核对js闭包的理解。这篇文章整理了js的一些常见的用法。<br>","more":"</p>\n<h1 id=\"1-什么是js闭包\"><a href=\"#1-什么是js闭包\" class=\"headerlink\" title=\"1.什么是js闭包\"></a>1.什么是js闭包</h1><p>对于js闭包，官方的解释是这样的：</p>\n<blockquote>\n<p>一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p>\n</blockquote>\n<p>第一次读估计很难理解，什么绑定变量的环境表达式、表达式的一部分，都是些什么鬼。用通俗一点的话来说就是：</p>\n<blockquote>\n<p>一个函数中有许多变量，这些变量变成了函数的一部分。</p>\n</blockquote>\n<p>要理解闭包，首先要来理解两个概念：变量和作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　name : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　getNameFunc : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　name : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　getNameFunc : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> that.name;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">    result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> funcs = createFunctions();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; funcs.length; i++)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(funcs[i]());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JAVA处理跨域问题","date":"2016-05-28T05:58:00.000Z","description":null,"toc":true,"author":"Corner","comments":1,"original":null,"photos":[],"_content":"　　在写前端脚本的时候我们经常会遇到发送数据到后台的情况，但是由于浏览器的限制，不同域名之间的数据是不能互相访问的，那前端怎么和后端如何进行数据之间的交换呢？\n<!-- more -->\n\n\nJavaScript由于安全性方面的考虑，不允许页面跨域调用其他页面的对象，那么问题来了，什么是跨域问题？\n答：这是由于浏览器同源策略的限制，现在所有支持JavaScript的浏览器都使用了这个策略。那么什么是同源呢？所谓的同源是指三个方面“相同”：\n1. 域名相同\n2. 协议相同\n3. 端口相同\n下面就举几个例子来帮助更好的理解同源策略。\n\n| URL        |      说明      | 是否允许通信  |\n| ---------- | -------------- | ------------- |\n| http://www.a.com/a.js <br> http://www.a.com/b.js       | 同一域名           |  允许    |\n| http://www.a.com/a.js <br> http://www.b.com/a.js       | 不同域名           |  不允许  |\n| http://www.a.com:8000/a.js<br>http://www.a.com/b.js    |  同一域名不同端口  |  不允许  |\n| https://www.a.com/a.js <br> http://www.a.com/b.js      | 同一域名不同协议   |  不允许  |\n\n\n在JAVA中处理跨域问题，通常有以下两种常用的解决方法。\n\n#### 第一种解决方法\n后台代码在被请求的Servlet中添加Header设置：\n\n```\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\nPrintWriter out =null;\ntry\n{\n\tout = response.getWriter();\n} catch (IOException e)\n{\n\t// TODO Auto-generated catch block\n\te.printStackTrace();\n}\nout.print(\"{'status':'ok'}\");\nout.flush();\nout.close();\n```\n\nAccess-Control-Allow-Origin这个Header在W3C标准里用来检查该跨域请求是否可以被通过，如果值为*则表明当前页面可以跨域访问。默认的情况下是不允许的。\n在前端JS中需要向Servlet发出请求，请求代码如下所示：\n\n```\n$.ajax({\n  url: \"your url\",\n  type:\"get or post\",\n  dataType:\"json\",\n  data:{\n    ....\n  },\n  success:function(data){\n    ...\n  }\n```\n\n#### 第二种解决方法\n通过jsonp跨域请求的方式。JSONP和JSON虽然只有一个字母的区别，但是他们完全就是两回事，很多人很容易把他们搞混。JSON是一种数据交换的格式，而JSONP则是一种非官方跨域数据交互协议。\n首先来说一下前端JS是怎么发送请求。代码如下所示：\n\n```\n$.ajax({\n  url:\"your url\",\n  type:\"get or post\",\n  async:false,\n  dataType : \"jsonp\",\n  //服务端用于接收callback调用的function名的参数\n  jsonp:\"callbackparam\",\n  //callback的function名称\n  jsonpCallback:\"success_jsonpCallback\",\n  success:function(data){\n    console.log(data);\n  },\n  error:function(data){\n    console.log(data);\n  }\n});\n```\n\n这里的callbackparam和success_jsonpCallback可以理解为发送的data数据的键值对，可以自定义，但是callbackparam需要和后台约定好参数名称，因为后台需要获取到这个参数里面的值（即success_jsonpCallback）。\n下面，最重要的来了，后台怎么样获取和返回数据呢。代码如下所示:\n\n```\n  PrintWriter out =null;\n  String callback=req.getParameter(\"callbackparam\");\n  String json=callback+\"({'status':'ok'})\";\n  try\n  {\n    out = resp.getWriter();\n  } catch (IOException e)\n  {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n  out.print(json);\n  out.flush();\n  out.close();\n```\n\n首先需要获取参数名为callbackparam的值，这里获取到的值就是“success_jsonpCallback”。然后将这个值加上一对小括号。小括号里放入你需要返回的数据内容，比如这里我返回一个JSON对象。当然你也可以返回其他对象，比如只返回一个字符串类型数据也可以。最后前端JS返回的数据就是这样的：\n\n```\nsuccess_jsonpCallback({'status':'ok'})\n```\n\n浏览器会自动解析为json对象，这时候你只需要在success回调函数中直接用data.status就可以了。\n\n\n\n\n\n","source":"_posts/Java-Ajax.md","raw":"title: JAVA处理跨域问题\ndate: 2016-05-28 13:58:00\ndescription: \ncategories:\n- 编程\ntags:\n- Java\n- 异步跨域\ntoc: true\nauthor: Corner\ncomments:\noriginal:\npermalink: \nphotos:\n---\n　　在写前端脚本的时候我们经常会遇到发送数据到后台的情况，但是由于浏览器的限制，不同域名之间的数据是不能互相访问的，那前端怎么和后端如何进行数据之间的交换呢？\n<!-- more -->\n\n\nJavaScript由于安全性方面的考虑，不允许页面跨域调用其他页面的对象，那么问题来了，什么是跨域问题？\n答：这是由于浏览器同源策略的限制，现在所有支持JavaScript的浏览器都使用了这个策略。那么什么是同源呢？所谓的同源是指三个方面“相同”：\n1. 域名相同\n2. 协议相同\n3. 端口相同\n下面就举几个例子来帮助更好的理解同源策略。\n\n| URL        |      说明      | 是否允许通信  |\n| ---------- | -------------- | ------------- |\n| http://www.a.com/a.js <br> http://www.a.com/b.js       | 同一域名           |  允许    |\n| http://www.a.com/a.js <br> http://www.b.com/a.js       | 不同域名           |  不允许  |\n| http://www.a.com:8000/a.js<br>http://www.a.com/b.js    |  同一域名不同端口  |  不允许  |\n| https://www.a.com/a.js <br> http://www.a.com/b.js      | 同一域名不同协议   |  不允许  |\n\n\n在JAVA中处理跨域问题，通常有以下两种常用的解决方法。\n\n#### 第一种解决方法\n后台代码在被请求的Servlet中添加Header设置：\n\n```\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\nPrintWriter out =null;\ntry\n{\n\tout = response.getWriter();\n} catch (IOException e)\n{\n\t// TODO Auto-generated catch block\n\te.printStackTrace();\n}\nout.print(\"{'status':'ok'}\");\nout.flush();\nout.close();\n```\n\nAccess-Control-Allow-Origin这个Header在W3C标准里用来检查该跨域请求是否可以被通过，如果值为*则表明当前页面可以跨域访问。默认的情况下是不允许的。\n在前端JS中需要向Servlet发出请求，请求代码如下所示：\n\n```\n$.ajax({\n  url: \"your url\",\n  type:\"get or post\",\n  dataType:\"json\",\n  data:{\n    ....\n  },\n  success:function(data){\n    ...\n  }\n```\n\n#### 第二种解决方法\n通过jsonp跨域请求的方式。JSONP和JSON虽然只有一个字母的区别，但是他们完全就是两回事，很多人很容易把他们搞混。JSON是一种数据交换的格式，而JSONP则是一种非官方跨域数据交互协议。\n首先来说一下前端JS是怎么发送请求。代码如下所示：\n\n```\n$.ajax({\n  url:\"your url\",\n  type:\"get or post\",\n  async:false,\n  dataType : \"jsonp\",\n  //服务端用于接收callback调用的function名的参数\n  jsonp:\"callbackparam\",\n  //callback的function名称\n  jsonpCallback:\"success_jsonpCallback\",\n  success:function(data){\n    console.log(data);\n  },\n  error:function(data){\n    console.log(data);\n  }\n});\n```\n\n这里的callbackparam和success_jsonpCallback可以理解为发送的data数据的键值对，可以自定义，但是callbackparam需要和后台约定好参数名称，因为后台需要获取到这个参数里面的值（即success_jsonpCallback）。\n下面，最重要的来了，后台怎么样获取和返回数据呢。代码如下所示:\n\n```\n  PrintWriter out =null;\n  String callback=req.getParameter(\"callbackparam\");\n  String json=callback+\"({'status':'ok'})\";\n  try\n  {\n    out = resp.getWriter();\n  } catch (IOException e)\n  {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n  out.print(json);\n  out.flush();\n  out.close();\n```\n\n首先需要获取参数名为callbackparam的值，这里获取到的值就是“success_jsonpCallback”。然后将这个值加上一对小括号。小括号里放入你需要返回的数据内容，比如这里我返回一个JSON对象。当然你也可以返回其他对象，比如只返回一个字符串类型数据也可以。最后前端JS返回的数据就是这样的：\n\n```\nsuccess_jsonpCallback({'status':'ok'})\n```\n\n浏览器会自动解析为json对象，这时候你只需要在success回调函数中直接用data.status就可以了。\n\n\n\n\n\n","slug":"Java-Ajax","published":1,"updated":"2016-09-13T02:02:41.721Z","layout":"post","link":"","_id":"citcmx75j000gy4fisps04pun","content":"<p>　　在写前端脚本的时候我们经常会遇到发送数据到后台的情况，但是由于浏览器的限制，不同域名之间的数据是不能互相访问的，那前端怎么和后端如何进行数据之间的交换呢？<br><a id=\"more\"></a></p>\n<p>JavaScript由于安全性方面的考虑，不允许页面跨域调用其他页面的对象，那么问题来了，什么是跨域问题？<br>答：这是由于浏览器同源策略的限制，现在所有支持JavaScript的浏览器都使用了这个策略。那么什么是同源呢？所谓的同源是指三个方面“相同”：</p>\n<ol>\n<li>域名相同</li>\n<li>协议相同</li>\n<li>端口相同<br>下面就举几个例子来帮助更好的理解同源策略。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br> <a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br> <a href=\"http://www.b.com/a.js\" target=\"_blank\" rel=\"external\">http://www.b.com/a.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com:8000/a.js</a><br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"https://www.a.com/a.js\" target=\"_blank\" rel=\"external\">https://www.a.com/a.js</a> <br> <a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名不同协议</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<p>在JAVA中处理跨域问题，通常有以下两种常用的解决方法。</p>\n<h4 id=\"第一种解决方法\"><a href=\"#第一种解决方法\" class=\"headerlink\" title=\"第一种解决方法\"></a>第一种解决方法</h4><p>后台代码在被请求的Servlet中添加Header设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class=\"line\">PrintWriter out =null;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">\tout = response.getWriter();</div><div class=\"line\">&#125; catch (IOException e)</div><div class=\"line\">&#123;</div><div class=\"line\">\t// TODO Auto-generated catch block</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">out.print(&quot;&#123;&apos;status&apos;:&apos;ok&apos;&#125;&quot;);</div><div class=\"line\">out.flush();</div><div class=\"line\">out.close();</div></pre></td></tr></table></figure>\n<p>Access-Control-Allow-Origin这个Header在W3C标准里用来检查该跨域请求是否可以被通过，如果值为*则表明当前页面可以跨域访问。默认的情况下是不允许的。<br>在前端JS中需要向Servlet发出请求，请求代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url: &quot;your url&quot;,</div><div class=\"line\">  type:&quot;get or post&quot;,</div><div class=\"line\">  dataType:&quot;json&quot;,</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    ....</div><div class=\"line\">  &#125;,</div><div class=\"line\">  success:function(data)&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"第二种解决方法\"><a href=\"#第二种解决方法\" class=\"headerlink\" title=\"第二种解决方法\"></a>第二种解决方法</h4><p>通过jsonp跨域请求的方式。JSONP和JSON虽然只有一个字母的区别，但是他们完全就是两回事，很多人很容易把他们搞混。JSON是一种数据交换的格式，而JSONP则是一种非官方跨域数据交互协议。<br>首先来说一下前端JS是怎么发送请求。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url:&quot;your url&quot;,</div><div class=\"line\">  type:&quot;get or post&quot;,</div><div class=\"line\">  async:false,</div><div class=\"line\">  dataType : &quot;jsonp&quot;,</div><div class=\"line\">  //服务端用于接收callback调用的function名的参数</div><div class=\"line\">  jsonp:&quot;callbackparam&quot;,</div><div class=\"line\">  //callback的function名称</div><div class=\"line\">  jsonpCallback:&quot;success_jsonpCallback&quot;,</div><div class=\"line\">  success:function(data)&#123;</div><div class=\"line\">    console.log(data);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  error:function(data)&#123;</div><div class=\"line\">    console.log(data);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这里的callbackparam和success_jsonpCallback可以理解为发送的data数据的键值对，可以自定义，但是callbackparam需要和后台约定好参数名称，因为后台需要获取到这个参数里面的值（即success_jsonpCallback）。<br>下面，最重要的来了，后台怎么样获取和返回数据呢。代码如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">PrintWriter out =null;</div><div class=\"line\">String callback=req.getParameter(&quot;callbackparam&quot;);</div><div class=\"line\">String json=callback+&quot;(&#123;&apos;status&apos;:&apos;ok&apos;&#125;)&quot;;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">  out = resp.getWriter();</div><div class=\"line\">&#125; catch (IOException e)</div><div class=\"line\">&#123;</div><div class=\"line\">  // TODO Auto-generated catch block</div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">out.print(json);</div><div class=\"line\">out.flush();</div><div class=\"line\">out.close();</div></pre></td></tr></table></figure>\n<p>首先需要获取参数名为callbackparam的值，这里获取到的值就是“success_jsonpCallback”。然后将这个值加上一对小括号。小括号里放入你需要返回的数据内容，比如这里我返回一个JSON对象。当然你也可以返回其他对象，比如只返回一个字符串类型数据也可以。最后前端JS返回的数据就是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">success_jsonpCallback(&#123;&apos;status&apos;:&apos;ok&apos;&#125;)</div></pre></td></tr></table></figure>\n<p>浏览器会自动解析为json对象，这时候你只需要在success回调函数中直接用data.status就可以了。</p>\n","excerpt":"<p>　　在写前端脚本的时候我们经常会遇到发送数据到后台的情况，但是由于浏览器的限制，不同域名之间的数据是不能互相访问的，那前端怎么和后端如何进行数据之间的交换呢？<br>","more":"</p>\n<p>JavaScript由于安全性方面的考虑，不允许页面跨域调用其他页面的对象，那么问题来了，什么是跨域问题？<br>答：这是由于浏览器同源策略的限制，现在所有支持JavaScript的浏览器都使用了这个策略。那么什么是同源呢？所谓的同源是指三个方面“相同”：</p>\n<ol>\n<li>域名相同</li>\n<li>协议相同</li>\n<li>端口相同<br>下面就举几个例子来帮助更好的理解同源策略。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br> <a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br> <a href=\"http://www.b.com/a.js\">http://www.b.com/a.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\">http://www.a.com:8000/a.js</a><br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"https://www.a.com/a.js\">https://www.a.com/a.js</a> <br> <a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名不同协议</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<p>在JAVA中处理跨域问题，通常有以下两种常用的解决方法。</p>\n<h4 id=\"第一种解决方法\"><a href=\"#第一种解决方法\" class=\"headerlink\" title=\"第一种解决方法\"></a>第一种解决方法</h4><p>后台代码在被请求的Servlet中添加Header设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class=\"line\">PrintWriter out =null;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">\tout = response.getWriter();</div><div class=\"line\">&#125; catch (IOException e)</div><div class=\"line\">&#123;</div><div class=\"line\">\t// TODO Auto-generated catch block</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">out.print(&quot;&#123;&apos;status&apos;:&apos;ok&apos;&#125;&quot;);</div><div class=\"line\">out.flush();</div><div class=\"line\">out.close();</div></pre></td></tr></table></figure>\n<p>Access-Control-Allow-Origin这个Header在W3C标准里用来检查该跨域请求是否可以被通过，如果值为*则表明当前页面可以跨域访问。默认的情况下是不允许的。<br>在前端JS中需要向Servlet发出请求，请求代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url: &quot;your url&quot;,</div><div class=\"line\">  type:&quot;get or post&quot;,</div><div class=\"line\">  dataType:&quot;json&quot;,</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    ....</div><div class=\"line\">  &#125;,</div><div class=\"line\">  success:function(data)&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"第二种解决方法\"><a href=\"#第二种解决方法\" class=\"headerlink\" title=\"第二种解决方法\"></a>第二种解决方法</h4><p>通过jsonp跨域请求的方式。JSONP和JSON虽然只有一个字母的区别，但是他们完全就是两回事，很多人很容易把他们搞混。JSON是一种数据交换的格式，而JSONP则是一种非官方跨域数据交互协议。<br>首先来说一下前端JS是怎么发送请求。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url:&quot;your url&quot;,</div><div class=\"line\">  type:&quot;get or post&quot;,</div><div class=\"line\">  async:false,</div><div class=\"line\">  dataType : &quot;jsonp&quot;,</div><div class=\"line\">  //服务端用于接收callback调用的function名的参数</div><div class=\"line\">  jsonp:&quot;callbackparam&quot;,</div><div class=\"line\">  //callback的function名称</div><div class=\"line\">  jsonpCallback:&quot;success_jsonpCallback&quot;,</div><div class=\"line\">  success:function(data)&#123;</div><div class=\"line\">    console.log(data);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  error:function(data)&#123;</div><div class=\"line\">    console.log(data);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这里的callbackparam和success_jsonpCallback可以理解为发送的data数据的键值对，可以自定义，但是callbackparam需要和后台约定好参数名称，因为后台需要获取到这个参数里面的值（即success_jsonpCallback）。<br>下面，最重要的来了，后台怎么样获取和返回数据呢。代码如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">PrintWriter out =null;</div><div class=\"line\">String callback=req.getParameter(&quot;callbackparam&quot;);</div><div class=\"line\">String json=callback+&quot;(&#123;&apos;status&apos;:&apos;ok&apos;&#125;)&quot;;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">  out = resp.getWriter();</div><div class=\"line\">&#125; catch (IOException e)</div><div class=\"line\">&#123;</div><div class=\"line\">  // TODO Auto-generated catch block</div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">out.print(json);</div><div class=\"line\">out.flush();</div><div class=\"line\">out.close();</div></pre></td></tr></table></figure>\n<p>首先需要获取参数名为callbackparam的值，这里获取到的值就是“success_jsonpCallback”。然后将这个值加上一对小括号。小括号里放入你需要返回的数据内容，比如这里我返回一个JSON对象。当然你也可以返回其他对象，比如只返回一个字符串类型数据也可以。最后前端JS返回的数据就是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">success_jsonpCallback(&#123;&apos;status&apos;:&apos;ok&apos;&#125;)</div></pre></td></tr></table></figure>\n<p>浏览器会自动解析为json对象，这时候你只需要在success回调函数中直接用data.status就可以了。</p>"},{"title":"Windows程序员必备小工具推荐","date":"2016-09-16T00:49:40.000Z","description":null,"toc":null,"author":"Corner","comments":1,"original":null,"photos":[],"_content":"  作为一个程序猿，有一个好的撸码工具肯定会让你的效率成倍的提升。这篇文章总结了自笔者工作以来用过的比较好的提升效率的Windows下的小工具，推荐给大家来用(非广告)，这些小工具不仅仅是撸码的，还有其他的一些软件。\n<!-- more -->\n\n> 工欲善其事，必先利其器\n\n“工”是指的工作，一件事情要想做好，必定先要让工具“锋利”。\n\n# 撸码神器Sublime Text\n#### 推荐指数★★★★★\n\nSublime是我用过的最好的撸码神器，没有之一。那些撸码还在用什么EditPlus、DreamWeaver的，和Sublime比，简直就是拿石器时代的石器武器和二十一世纪的大规模杀伤性武器做比较。Sublime拥有漂亮的用户界面和无比强大的功能，例如代码的缩略图、自定义按键绑定、拼写检查、项目切换、多窗口等等。Sublime的界面如下：\n\n![Sublime界面](/images/Windows-Tools-Recommend/Sublime-UI.png)\n\nSublime还能支持多种编程语言的语法高亮，有优秀的代码自动补全的功能。而且Sublime还有非常强大的插件系统作为其功能的补充。一些常见和实用的插件如Emmet(快速编写 HTML/CSS 代码的方案)、ColorPicker(颜色选择器)、MarkdownPreview(markdown预览)、DocBlockr(代码注释规范)、SideBar(侧边栏工具)等等，其他一些强大的插件等待读者去体验。\n\n\n# 小孩桌面便签\n#### 推荐指数★★★☆☆\n\n大家在上学的时候肯定都用过便签纸一类的东西来记一些上课笔记之类的东西，然后贴在课本上，整个课本就贴的花花绿绿的。小孩桌面便签就是这样一个在桌面上贴上便签的工具。正如它的名字一样：DeskNotes(桌面贴纸)。\n\n这是我一个女同事推荐我使用的，刚开始我还很不屑的，没怎么用。后来随着工作越来越多，渐渐的发现......脑子越来越不够用了。然后我就把这个工具用起来了，确实能够提醒我很多事情。它的界面如下：\n\n![小孩桌面便签界面](/images/Windows-Tools-Recommend/DesktopNotes.jpg)\n\n除了能够添加贴纸外，小孩便签还增加了实用的小功能，如闹钟提醒和定时关机。\n\n# FastStone Capture\n#### 推荐指数★★☆☆☆\n\n由于笔者从事网页的工作，经常要和图片打交道，所以经常需要截图、取色、测量像素等等。这是笔者在上学时一个老师推荐的软件，基本能够解决上述需求。FastStone Capture的界面如下：\n\n![FastStone Capture](/images/Windows-Tools-Recommend/FastStone-Capture.png)\n\n很多读者可能会说：那你用PhotoShop啊，功能更强悍。诚然，PhotoShop功能确实相当的强悍，笔者的电脑里也装了，但是体积大，而且又十分的吃内存，每次打开都要耗不少时间(估计是电脑太老了)。\n\n相比于PhotoShop，FastStone Capture就轻巧了不少。整个软件的大小不超过3MB，通过任务管理器看到所占用的内存仅0.3MB，基本上可以忽略不计，每次打开基本上都是秒开的。\n\n它的主要功能有截图、屏幕录像、图像处理(裁切，改变图像效果等)。附带的特色小功能有屏幕放大器、屏幕取色器、屏幕标尺、图像转为PDF，功能可是非常的强大。\n\n\n# 有道云笔记\n#### 推荐指数★★☆☆☆\n\n有的读者可能会说：欸，上面不是有小孩桌面便签可以用来记事了么，怎么还要有道云笔记呢。诚然，便签是可以记录生活中的琐事，但是要想把记录的内容从一台电脑转移到另一台电脑却比较费时。\n\n笔者的所处的环境就是需要在多个地点记录，比如上班的时候看到有用的东西需要记录下来，下班在家里做一些学习笔记也需要记录下来，虽然小孩桌面便签有强大的导入导出功能，但是频繁的导入导出操作也是比较麻烦的，或许是笔者比较懒。\n\n![有道云笔记](/images/Windows-Tools-Recommend/YNote.png)\n\n这个时候使用有道云笔记就可以很方便的在“云上”进行办公，而且还支持Android、iPhone、iPad、Mac、WP和web等平台，让工作摆脱了平台和设备的限制。有道云笔记还支持多种编辑格式，可以用富文本进行编辑也可以采用Markdown语法进行编辑，Markdown支持有预览的功能。读者还可以将写的文章比较好的文章在微博、微信和扣扣中进行分享。\n\n# Beyond Compare\n#### 推荐指数★★★★☆\n\n在工作和生活中，笔者经常会将文件添加上版本号以区分，但是时间一长，就会忘记不同的版本号所更改的内容，所以经常需要一一地比对，这就让笔者很苦恼。有一天在上网时无意中发现了这款“神器”，让我们来看看它长什么样：\n\n![Beyond Compare](/images/Windows-Tools-Recommend/Beyond-Compare.png)\n\nBeyond Compare主要用途是对比两个文件夹或者文件的不同，并将差异 通过颜色的不同以标识。对的，你没有看错，就是文件夹的不同。它还可以按照你的需要进行比较，比如需要对比文件的不同或者对比文件的相同，都可以显示。\n\n\n# Everything\n#### 推荐指数★★★★★\n\n由于笔者的每天工作都会收到很多不同文件，但是笔者又不善于对文件归类存放，都是杂乱的放在桌面，需要用到的时候找起来又相当的麻烦。这时候Everything这款文件快速搜索软件就成为我们这种“懒人”的福音了。他的界面如下：\n\n![Everything](/images/Windows-Tools-Recommend/everything.png)\n\n它的体积也相当的轻巧，才30多MB，和现在动辄几百MB的软件相比确实小了很多；它的界面也很简洁易用，常用的就一个输入框和下面的文件列表，非常方便日常的使用；占用系统资源极低，Everything搜索只基于文件和文件夹的名称，所以建立起搜索数据库非常的快，搜索文件基本上都是秒搜。\n\n# Chrome\n#### 推荐指数★★★★★\n\nChrome是笔者用过最好用的浏览器，没有之一。不管是日常生活中的使用还是开发中的测试等，Chrome都能够轻松胜任。\n\n![Chrome](/images/Windows-Tools-Recommend/chrome.jpg)\n\nChrome的特点是简洁、快速。它支持多个标签进行浏览，即使有一个标签崩溃，其他标签页不会崩溃。而且，Chrome是基于V8 JavaScript引擎的，页面性能更加优异。\n\n对于像笔者一样的网页开发者来说，Chrome更是开发网页的“利器”。使用F12调出控制台，在这里你能看到Elements(页面元素)、Console(网页运行的提示消息)、Sources(页面运行所加载的源码)、Resources(页面所需要的文件、存储的cookie和session等资源)、Network(可以看到网页加载脚本样式页面的时间还有异步的资源)\n\n","source":"_posts/Windows-Tools-Recommend.md","raw":"title: Windows程序员必备小工具推荐\ndate: 2016-09-16 08:49:40\ndescription:\ncategories:\n- 工具\ntags:\n- 推荐\ntoc:\nauthor: Corner\ncomments:\noriginal:\npermalink:\nphotos:\n---\n  作为一个程序猿，有一个好的撸码工具肯定会让你的效率成倍的提升。这篇文章总结了自笔者工作以来用过的比较好的提升效率的Windows下的小工具，推荐给大家来用(非广告)，这些小工具不仅仅是撸码的，还有其他的一些软件。\n<!-- more -->\n\n> 工欲善其事，必先利其器\n\n“工”是指的工作，一件事情要想做好，必定先要让工具“锋利”。\n\n# 撸码神器Sublime Text\n#### 推荐指数★★★★★\n\nSublime是我用过的最好的撸码神器，没有之一。那些撸码还在用什么EditPlus、DreamWeaver的，和Sublime比，简直就是拿石器时代的石器武器和二十一世纪的大规模杀伤性武器做比较。Sublime拥有漂亮的用户界面和无比强大的功能，例如代码的缩略图、自定义按键绑定、拼写检查、项目切换、多窗口等等。Sublime的界面如下：\n\n![Sublime界面](/images/Windows-Tools-Recommend/Sublime-UI.png)\n\nSublime还能支持多种编程语言的语法高亮，有优秀的代码自动补全的功能。而且Sublime还有非常强大的插件系统作为其功能的补充。一些常见和实用的插件如Emmet(快速编写 HTML/CSS 代码的方案)、ColorPicker(颜色选择器)、MarkdownPreview(markdown预览)、DocBlockr(代码注释规范)、SideBar(侧边栏工具)等等，其他一些强大的插件等待读者去体验。\n\n\n# 小孩桌面便签\n#### 推荐指数★★★☆☆\n\n大家在上学的时候肯定都用过便签纸一类的东西来记一些上课笔记之类的东西，然后贴在课本上，整个课本就贴的花花绿绿的。小孩桌面便签就是这样一个在桌面上贴上便签的工具。正如它的名字一样：DeskNotes(桌面贴纸)。\n\n这是我一个女同事推荐我使用的，刚开始我还很不屑的，没怎么用。后来随着工作越来越多，渐渐的发现......脑子越来越不够用了。然后我就把这个工具用起来了，确实能够提醒我很多事情。它的界面如下：\n\n![小孩桌面便签界面](/images/Windows-Tools-Recommend/DesktopNotes.jpg)\n\n除了能够添加贴纸外，小孩便签还增加了实用的小功能，如闹钟提醒和定时关机。\n\n# FastStone Capture\n#### 推荐指数★★☆☆☆\n\n由于笔者从事网页的工作，经常要和图片打交道，所以经常需要截图、取色、测量像素等等。这是笔者在上学时一个老师推荐的软件，基本能够解决上述需求。FastStone Capture的界面如下：\n\n![FastStone Capture](/images/Windows-Tools-Recommend/FastStone-Capture.png)\n\n很多读者可能会说：那你用PhotoShop啊，功能更强悍。诚然，PhotoShop功能确实相当的强悍，笔者的电脑里也装了，但是体积大，而且又十分的吃内存，每次打开都要耗不少时间(估计是电脑太老了)。\n\n相比于PhotoShop，FastStone Capture就轻巧了不少。整个软件的大小不超过3MB，通过任务管理器看到所占用的内存仅0.3MB，基本上可以忽略不计，每次打开基本上都是秒开的。\n\n它的主要功能有截图、屏幕录像、图像处理(裁切，改变图像效果等)。附带的特色小功能有屏幕放大器、屏幕取色器、屏幕标尺、图像转为PDF，功能可是非常的强大。\n\n\n# 有道云笔记\n#### 推荐指数★★☆☆☆\n\n有的读者可能会说：欸，上面不是有小孩桌面便签可以用来记事了么，怎么还要有道云笔记呢。诚然，便签是可以记录生活中的琐事，但是要想把记录的内容从一台电脑转移到另一台电脑却比较费时。\n\n笔者的所处的环境就是需要在多个地点记录，比如上班的时候看到有用的东西需要记录下来，下班在家里做一些学习笔记也需要记录下来，虽然小孩桌面便签有强大的导入导出功能，但是频繁的导入导出操作也是比较麻烦的，或许是笔者比较懒。\n\n![有道云笔记](/images/Windows-Tools-Recommend/YNote.png)\n\n这个时候使用有道云笔记就可以很方便的在“云上”进行办公，而且还支持Android、iPhone、iPad、Mac、WP和web等平台，让工作摆脱了平台和设备的限制。有道云笔记还支持多种编辑格式，可以用富文本进行编辑也可以采用Markdown语法进行编辑，Markdown支持有预览的功能。读者还可以将写的文章比较好的文章在微博、微信和扣扣中进行分享。\n\n# Beyond Compare\n#### 推荐指数★★★★☆\n\n在工作和生活中，笔者经常会将文件添加上版本号以区分，但是时间一长，就会忘记不同的版本号所更改的内容，所以经常需要一一地比对，这就让笔者很苦恼。有一天在上网时无意中发现了这款“神器”，让我们来看看它长什么样：\n\n![Beyond Compare](/images/Windows-Tools-Recommend/Beyond-Compare.png)\n\nBeyond Compare主要用途是对比两个文件夹或者文件的不同，并将差异 通过颜色的不同以标识。对的，你没有看错，就是文件夹的不同。它还可以按照你的需要进行比较，比如需要对比文件的不同或者对比文件的相同，都可以显示。\n\n\n# Everything\n#### 推荐指数★★★★★\n\n由于笔者的每天工作都会收到很多不同文件，但是笔者又不善于对文件归类存放，都是杂乱的放在桌面，需要用到的时候找起来又相当的麻烦。这时候Everything这款文件快速搜索软件就成为我们这种“懒人”的福音了。他的界面如下：\n\n![Everything](/images/Windows-Tools-Recommend/everything.png)\n\n它的体积也相当的轻巧，才30多MB，和现在动辄几百MB的软件相比确实小了很多；它的界面也很简洁易用，常用的就一个输入框和下面的文件列表，非常方便日常的使用；占用系统资源极低，Everything搜索只基于文件和文件夹的名称，所以建立起搜索数据库非常的快，搜索文件基本上都是秒搜。\n\n# Chrome\n#### 推荐指数★★★★★\n\nChrome是笔者用过最好用的浏览器，没有之一。不管是日常生活中的使用还是开发中的测试等，Chrome都能够轻松胜任。\n\n![Chrome](/images/Windows-Tools-Recommend/chrome.jpg)\n\nChrome的特点是简洁、快速。它支持多个标签进行浏览，即使有一个标签崩溃，其他标签页不会崩溃。而且，Chrome是基于V8 JavaScript引擎的，页面性能更加优异。\n\n对于像笔者一样的网页开发者来说，Chrome更是开发网页的“利器”。使用F12调出控制台，在这里你能看到Elements(页面元素)、Console(网页运行的提示消息)、Sources(页面运行所加载的源码)、Resources(页面所需要的文件、存储的cookie和session等资源)、Network(可以看到网页加载脚本样式页面的时间还有异步的资源)\n\n","slug":"Windows-Tools-Recommend","published":1,"updated":"2016-09-18T03:33:41.934Z","layout":"post","link":"","_id":"citcmx75l000iy4fippkios26","content":"<p>  作为一个程序猿，有一个好的撸码工具肯定会让你的效率成倍的提升。这篇文章总结了自笔者工作以来用过的比较好的提升效率的Windows下的小工具，推荐给大家来用(非广告)，这些小工具不仅仅是撸码的，还有其他的一些软件。<br><a id=\"more\"></a></p>\n<blockquote>\n<p>工欲善其事，必先利其器</p>\n</blockquote>\n<p>“工”是指的工作，一件事情要想做好，必定先要让工具“锋利”。</p>\n<h1 id=\"撸码神器Sublime-Text\"><a href=\"#撸码神器Sublime-Text\" class=\"headerlink\" title=\"撸码神器Sublime Text\"></a>撸码神器Sublime Text</h1><h4 id=\"推荐指数★★★★★\"><a href=\"#推荐指数★★★★★\" class=\"headerlink\" title=\"推荐指数★★★★★\"></a>推荐指数★★★★★</h4><p>Sublime是我用过的最好的撸码神器，没有之一。那些撸码还在用什么EditPlus、DreamWeaver的，和Sublime比，简直就是拿石器时代的石器武器和二十一世纪的大规模杀伤性武器做比较。Sublime拥有漂亮的用户界面和无比强大的功能，例如代码的缩略图、自定义按键绑定、拼写检查、项目切换、多窗口等等。Sublime的界面如下：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/Sublime-UI.png\" alt=\"Sublime界面\"></p>\n<p>Sublime还能支持多种编程语言的语法高亮，有优秀的代码自动补全的功能。而且Sublime还有非常强大的插件系统作为其功能的补充。一些常见和实用的插件如Emmet(快速编写 HTML/CSS 代码的方案)、ColorPicker(颜色选择器)、MarkdownPreview(markdown预览)、DocBlockr(代码注释规范)、SideBar(侧边栏工具)等等，其他一些强大的插件等待读者去体验。</p>\n<h1 id=\"小孩桌面便签\"><a href=\"#小孩桌面便签\" class=\"headerlink\" title=\"小孩桌面便签\"></a>小孩桌面便签</h1><h4 id=\"推荐指数★★★☆☆\"><a href=\"#推荐指数★★★☆☆\" class=\"headerlink\" title=\"推荐指数★★★☆☆\"></a>推荐指数★★★☆☆</h4><p>大家在上学的时候肯定都用过便签纸一类的东西来记一些上课笔记之类的东西，然后贴在课本上，整个课本就贴的花花绿绿的。小孩桌面便签就是这样一个在桌面上贴上便签的工具。正如它的名字一样：DeskNotes(桌面贴纸)。</p>\n<p>这是我一个女同事推荐我使用的，刚开始我还很不屑的，没怎么用。后来随着工作越来越多，渐渐的发现……脑子越来越不够用了。然后我就把这个工具用起来了，确实能够提醒我很多事情。它的界面如下：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/DesktopNotes.jpg\" alt=\"小孩桌面便签界面\"></p>\n<p>除了能够添加贴纸外，小孩便签还增加了实用的小功能，如闹钟提醒和定时关机。</p>\n<h1 id=\"FastStone-Capture\"><a href=\"#FastStone-Capture\" class=\"headerlink\" title=\"FastStone Capture\"></a>FastStone Capture</h1><h4 id=\"推荐指数★★☆☆☆\"><a href=\"#推荐指数★★☆☆☆\" class=\"headerlink\" title=\"推荐指数★★☆☆☆\"></a>推荐指数★★☆☆☆</h4><p>由于笔者从事网页的工作，经常要和图片打交道，所以经常需要截图、取色、测量像素等等。这是笔者在上学时一个老师推荐的软件，基本能够解决上述需求。FastStone Capture的界面如下：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/FastStone-Capture.png\" alt=\"FastStone Capture\"></p>\n<p>很多读者可能会说：那你用PhotoShop啊，功能更强悍。诚然，PhotoShop功能确实相当的强悍，笔者的电脑里也装了，但是体积大，而且又十分的吃内存，每次打开都要耗不少时间(估计是电脑太老了)。</p>\n<p>相比于PhotoShop，FastStone Capture就轻巧了不少。整个软件的大小不超过3MB，通过任务管理器看到所占用的内存仅0.3MB，基本上可以忽略不计，每次打开基本上都是秒开的。</p>\n<p>它的主要功能有截图、屏幕录像、图像处理(裁切，改变图像效果等)。附带的特色小功能有屏幕放大器、屏幕取色器、屏幕标尺、图像转为PDF，功能可是非常的强大。</p>\n<h1 id=\"有道云笔记\"><a href=\"#有道云笔记\" class=\"headerlink\" title=\"有道云笔记\"></a>有道云笔记</h1><h4 id=\"推荐指数★★☆☆☆-1\"><a href=\"#推荐指数★★☆☆☆-1\" class=\"headerlink\" title=\"推荐指数★★☆☆☆\"></a>推荐指数★★☆☆☆</h4><p>有的读者可能会说：欸，上面不是有小孩桌面便签可以用来记事了么，怎么还要有道云笔记呢。诚然，便签是可以记录生活中的琐事，但是要想把记录的内容从一台电脑转移到另一台电脑却比较费时。</p>\n<p>笔者的所处的环境就是需要在多个地点记录，比如上班的时候看到有用的东西需要记录下来，下班在家里做一些学习笔记也需要记录下来，虽然小孩桌面便签有强大的导入导出功能，但是频繁的导入导出操作也是比较麻烦的，或许是笔者比较懒。</p>\n<p><img src=\"/images/Windows-Tools-Recommend/YNote.png\" alt=\"有道云笔记\"></p>\n<p>这个时候使用有道云笔记就可以很方便的在“云上”进行办公，而且还支持Android、iPhone、iPad、Mac、WP和web等平台，让工作摆脱了平台和设备的限制。有道云笔记还支持多种编辑格式，可以用富文本进行编辑也可以采用Markdown语法进行编辑，Markdown支持有预览的功能。读者还可以将写的文章比较好的文章在微博、微信和扣扣中进行分享。</p>\n<h1 id=\"Beyond-Compare\"><a href=\"#Beyond-Compare\" class=\"headerlink\" title=\"Beyond Compare\"></a>Beyond Compare</h1><h4 id=\"推荐指数★★★★☆\"><a href=\"#推荐指数★★★★☆\" class=\"headerlink\" title=\"推荐指数★★★★☆\"></a>推荐指数★★★★☆</h4><p>在工作和生活中，笔者经常会将文件添加上版本号以区分，但是时间一长，就会忘记不同的版本号所更改的内容，所以经常需要一一地比对，这就让笔者很苦恼。有一天在上网时无意中发现了这款“神器”，让我们来看看它长什么样：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/Beyond-Compare.png\" alt=\"Beyond Compare\"></p>\n<p>Beyond Compare主要用途是对比两个文件夹或者文件的不同，并将差异 通过颜色的不同以标识。对的，你没有看错，就是文件夹的不同。它还可以按照你的需要进行比较，比如需要对比文件的不同或者对比文件的相同，都可以显示。</p>\n<h1 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a>Everything</h1><h4 id=\"推荐指数★★★★★-1\"><a href=\"#推荐指数★★★★★-1\" class=\"headerlink\" title=\"推荐指数★★★★★\"></a>推荐指数★★★★★</h4><p>由于笔者的每天工作都会收到很多不同文件，但是笔者又不善于对文件归类存放，都是杂乱的放在桌面，需要用到的时候找起来又相当的麻烦。这时候Everything这款文件快速搜索软件就成为我们这种“懒人”的福音了。他的界面如下：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/everything.png\" alt=\"Everything\"></p>\n<p>它的体积也相当的轻巧，才30多MB，和现在动辄几百MB的软件相比确实小了很多；它的界面也很简洁易用，常用的就一个输入框和下面的文件列表，非常方便日常的使用；占用系统资源极低，Everything搜索只基于文件和文件夹的名称，所以建立起搜索数据库非常的快，搜索文件基本上都是秒搜。</p>\n<h1 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h1><h4 id=\"推荐指数★★★★★-2\"><a href=\"#推荐指数★★★★★-2\" class=\"headerlink\" title=\"推荐指数★★★★★\"></a>推荐指数★★★★★</h4><p>Chrome是笔者用过最好用的浏览器，没有之一。不管是日常生活中的使用还是开发中的测试等，Chrome都能够轻松胜任。</p>\n<p><img src=\"/images/Windows-Tools-Recommend/chrome.jpg\" alt=\"Chrome\"></p>\n<p>Chrome的特点是简洁、快速。它支持多个标签进行浏览，即使有一个标签崩溃，其他标签页不会崩溃。而且，Chrome是基于V8 JavaScript引擎的，页面性能更加优异。</p>\n<p>对于像笔者一样的网页开发者来说，Chrome更是开发网页的“利器”。使用F12调出控制台，在这里你能看到Elements(页面元素)、Console(网页运行的提示消息)、Sources(页面运行所加载的源码)、Resources(页面所需要的文件、存储的cookie和session等资源)、Network(可以看到网页加载脚本样式页面的时间还有异步的资源)</p>\n","excerpt":"<p>  作为一个程序猿，有一个好的撸码工具肯定会让你的效率成倍的提升。这篇文章总结了自笔者工作以来用过的比较好的提升效率的Windows下的小工具，推荐给大家来用(非广告)，这些小工具不仅仅是撸码的，还有其他的一些软件。<br>","more":"</p>\n<blockquote>\n<p>工欲善其事，必先利其器</p>\n</blockquote>\n<p>“工”是指的工作，一件事情要想做好，必定先要让工具“锋利”。</p>\n<h1 id=\"撸码神器Sublime-Text\"><a href=\"#撸码神器Sublime-Text\" class=\"headerlink\" title=\"撸码神器Sublime Text\"></a>撸码神器Sublime Text</h1><h4 id=\"推荐指数★★★★★\"><a href=\"#推荐指数★★★★★\" class=\"headerlink\" title=\"推荐指数★★★★★\"></a>推荐指数★★★★★</h4><p>Sublime是我用过的最好的撸码神器，没有之一。那些撸码还在用什么EditPlus、DreamWeaver的，和Sublime比，简直就是拿石器时代的石器武器和二十一世纪的大规模杀伤性武器做比较。Sublime拥有漂亮的用户界面和无比强大的功能，例如代码的缩略图、自定义按键绑定、拼写检查、项目切换、多窗口等等。Sublime的界面如下：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/Sublime-UI.png\" alt=\"Sublime界面\"></p>\n<p>Sublime还能支持多种编程语言的语法高亮，有优秀的代码自动补全的功能。而且Sublime还有非常强大的插件系统作为其功能的补充。一些常见和实用的插件如Emmet(快速编写 HTML/CSS 代码的方案)、ColorPicker(颜色选择器)、MarkdownPreview(markdown预览)、DocBlockr(代码注释规范)、SideBar(侧边栏工具)等等，其他一些强大的插件等待读者去体验。</p>\n<h1 id=\"小孩桌面便签\"><a href=\"#小孩桌面便签\" class=\"headerlink\" title=\"小孩桌面便签\"></a>小孩桌面便签</h1><h4 id=\"推荐指数★★★☆☆\"><a href=\"#推荐指数★★★☆☆\" class=\"headerlink\" title=\"推荐指数★★★☆☆\"></a>推荐指数★★★☆☆</h4><p>大家在上学的时候肯定都用过便签纸一类的东西来记一些上课笔记之类的东西，然后贴在课本上，整个课本就贴的花花绿绿的。小孩桌面便签就是这样一个在桌面上贴上便签的工具。正如它的名字一样：DeskNotes(桌面贴纸)。</p>\n<p>这是我一个女同事推荐我使用的，刚开始我还很不屑的，没怎么用。后来随着工作越来越多，渐渐的发现……脑子越来越不够用了。然后我就把这个工具用起来了，确实能够提醒我很多事情。它的界面如下：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/DesktopNotes.jpg\" alt=\"小孩桌面便签界面\"></p>\n<p>除了能够添加贴纸外，小孩便签还增加了实用的小功能，如闹钟提醒和定时关机。</p>\n<h1 id=\"FastStone-Capture\"><a href=\"#FastStone-Capture\" class=\"headerlink\" title=\"FastStone Capture\"></a>FastStone Capture</h1><h4 id=\"推荐指数★★☆☆☆\"><a href=\"#推荐指数★★☆☆☆\" class=\"headerlink\" title=\"推荐指数★★☆☆☆\"></a>推荐指数★★☆☆☆</h4><p>由于笔者从事网页的工作，经常要和图片打交道，所以经常需要截图、取色、测量像素等等。这是笔者在上学时一个老师推荐的软件，基本能够解决上述需求。FastStone Capture的界面如下：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/FastStone-Capture.png\" alt=\"FastStone Capture\"></p>\n<p>很多读者可能会说：那你用PhotoShop啊，功能更强悍。诚然，PhotoShop功能确实相当的强悍，笔者的电脑里也装了，但是体积大，而且又十分的吃内存，每次打开都要耗不少时间(估计是电脑太老了)。</p>\n<p>相比于PhotoShop，FastStone Capture就轻巧了不少。整个软件的大小不超过3MB，通过任务管理器看到所占用的内存仅0.3MB，基本上可以忽略不计，每次打开基本上都是秒开的。</p>\n<p>它的主要功能有截图、屏幕录像、图像处理(裁切，改变图像效果等)。附带的特色小功能有屏幕放大器、屏幕取色器、屏幕标尺、图像转为PDF，功能可是非常的强大。</p>\n<h1 id=\"有道云笔记\"><a href=\"#有道云笔记\" class=\"headerlink\" title=\"有道云笔记\"></a>有道云笔记</h1><h4 id=\"推荐指数★★☆☆☆-1\"><a href=\"#推荐指数★★☆☆☆-1\" class=\"headerlink\" title=\"推荐指数★★☆☆☆\"></a>推荐指数★★☆☆☆</h4><p>有的读者可能会说：欸，上面不是有小孩桌面便签可以用来记事了么，怎么还要有道云笔记呢。诚然，便签是可以记录生活中的琐事，但是要想把记录的内容从一台电脑转移到另一台电脑却比较费时。</p>\n<p>笔者的所处的环境就是需要在多个地点记录，比如上班的时候看到有用的东西需要记录下来，下班在家里做一些学习笔记也需要记录下来，虽然小孩桌面便签有强大的导入导出功能，但是频繁的导入导出操作也是比较麻烦的，或许是笔者比较懒。</p>\n<p><img src=\"/images/Windows-Tools-Recommend/YNote.png\" alt=\"有道云笔记\"></p>\n<p>这个时候使用有道云笔记就可以很方便的在“云上”进行办公，而且还支持Android、iPhone、iPad、Mac、WP和web等平台，让工作摆脱了平台和设备的限制。有道云笔记还支持多种编辑格式，可以用富文本进行编辑也可以采用Markdown语法进行编辑，Markdown支持有预览的功能。读者还可以将写的文章比较好的文章在微博、微信和扣扣中进行分享。</p>\n<h1 id=\"Beyond-Compare\"><a href=\"#Beyond-Compare\" class=\"headerlink\" title=\"Beyond Compare\"></a>Beyond Compare</h1><h4 id=\"推荐指数★★★★☆\"><a href=\"#推荐指数★★★★☆\" class=\"headerlink\" title=\"推荐指数★★★★☆\"></a>推荐指数★★★★☆</h4><p>在工作和生活中，笔者经常会将文件添加上版本号以区分，但是时间一长，就会忘记不同的版本号所更改的内容，所以经常需要一一地比对，这就让笔者很苦恼。有一天在上网时无意中发现了这款“神器”，让我们来看看它长什么样：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/Beyond-Compare.png\" alt=\"Beyond Compare\"></p>\n<p>Beyond Compare主要用途是对比两个文件夹或者文件的不同，并将差异 通过颜色的不同以标识。对的，你没有看错，就是文件夹的不同。它还可以按照你的需要进行比较，比如需要对比文件的不同或者对比文件的相同，都可以显示。</p>\n<h1 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a>Everything</h1><h4 id=\"推荐指数★★★★★-1\"><a href=\"#推荐指数★★★★★-1\" class=\"headerlink\" title=\"推荐指数★★★★★\"></a>推荐指数★★★★★</h4><p>由于笔者的每天工作都会收到很多不同文件，但是笔者又不善于对文件归类存放，都是杂乱的放在桌面，需要用到的时候找起来又相当的麻烦。这时候Everything这款文件快速搜索软件就成为我们这种“懒人”的福音了。他的界面如下：</p>\n<p><img src=\"/images/Windows-Tools-Recommend/everything.png\" alt=\"Everything\"></p>\n<p>它的体积也相当的轻巧，才30多MB，和现在动辄几百MB的软件相比确实小了很多；它的界面也很简洁易用，常用的就一个输入框和下面的文件列表，非常方便日常的使用；占用系统资源极低，Everything搜索只基于文件和文件夹的名称，所以建立起搜索数据库非常的快，搜索文件基本上都是秒搜。</p>\n<h1 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h1><h4 id=\"推荐指数★★★★★-2\"><a href=\"#推荐指数★★★★★-2\" class=\"headerlink\" title=\"推荐指数★★★★★\"></a>推荐指数★★★★★</h4><p>Chrome是笔者用过最好用的浏览器，没有之一。不管是日常生活中的使用还是开发中的测试等，Chrome都能够轻松胜任。</p>\n<p><img src=\"/images/Windows-Tools-Recommend/chrome.jpg\" alt=\"Chrome\"></p>\n<p>Chrome的特点是简洁、快速。它支持多个标签进行浏览，即使有一个标签崩溃，其他标签页不会崩溃。而且，Chrome是基于V8 JavaScript引擎的，页面性能更加优异。</p>\n<p>对于像笔者一样的网页开发者来说，Chrome更是开发网页的“利器”。使用F12调出控制台，在这里你能看到Elements(页面元素)、Console(网页运行的提示消息)、Sources(页面运行所加载的源码)、Resources(页面所需要的文件、存储的cookie和session等资源)、Network(可以看到网页加载脚本样式页面的时间还有异步的资源)</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"citcmx7550006y4fi1ywcblnp","category_id":"citcmx7510003y4fi2k4hm3ho","_id":"citcmx75e000by4fit3r9g3u9"},{"post_id":"citcmx74s0000y4fi6y7szxih","category_id":"citcmx7510003y4fi2k4hm3ho","_id":"citcmx75i000fy4firh9fm33z"},{"post_id":"citcmx7570007y4figpp5rm4l","category_id":"citcmx7510003y4fi2k4hm3ho","_id":"citcmx75l000hy4fi6uw7l0lc"},{"post_id":"citcmx75a000ay4fi84w7x520","category_id":"citcmx7510003y4fi2k4hm3ho","_id":"citcmx75n000ky4fismj6oent"},{"post_id":"citcmx74y0002y4finoisg6dh","category_id":"citcmx7510003y4fi2k4hm3ho","_id":"citcmx75o000ny4fidel4vxrp"},{"post_id":"citcmx75f000cy4fiwbei7198","category_id":"citcmx7510003y4fi2k4hm3ho","_id":"citcmx75o000py4fi9uc4lrzp"},{"post_id":"citcmx75j000gy4fisps04pun","category_id":"citcmx7510003y4fi2k4hm3ho","_id":"citcmx75p000sy4figmnaevc0"},{"post_id":"citcmx7530005y4firc4a44i0","category_id":"citcmx7510003y4fi2k4hm3ho","_id":"citcmx75r000ty4fiil4uxqzm"},{"post_id":"citcmx75l000iy4fippkios26","category_id":"citcmx75n000my4fiudvhudyi","_id":"citcmx75t000wy4fijrju62hi"}],"PostTag":[{"post_id":"citcmx74s0000y4fi6y7szxih","tag_id":"citcmx7520004y4fiu1f3vvmb","_id":"citcmx75n000ly4fi664uaemu"},{"post_id":"citcmx74s0000y4fi6y7szxih","tag_id":"citcmx7590009y4fihkygnafh","_id":"citcmx75o000oy4fimbc6a2v9"},{"post_id":"citcmx74s0000y4fi6y7szxih","tag_id":"citcmx75i000ey4fizgirrsjz","_id":"citcmx75p000ry4fih0gbdex6"},{"post_id":"citcmx74y0002y4finoisg6dh","tag_id":"citcmx75m000jy4fiehsmedg1","_id":"citcmx75s000vy4fim65jsx0f"},{"post_id":"citcmx74y0002y4finoisg6dh","tag_id":"citcmx7520004y4fiu1f3vvmb","_id":"citcmx75t000xy4fimreeh5hy"},{"post_id":"citcmx7530005y4firc4a44i0","tag_id":"citcmx75r000uy4fizpirg2la","_id":"citcmx75u000zy4fi6tox3fgj"},{"post_id":"citcmx7550006y4fi1ywcblnp","tag_id":"citcmx75r000uy4fizpirg2la","_id":"citcmx75v0011y4fiwfsja8bf"},{"post_id":"citcmx7570007y4figpp5rm4l","tag_id":"citcmx75r000uy4fizpirg2la","_id":"citcmx75y0013y4fizgra6k01"},{"post_id":"citcmx75a000ay4fi84w7x520","tag_id":"citcmx7520004y4fiu1f3vvmb","_id":"citcmx75z0015y4figzo4jfnz"},{"post_id":"citcmx75a000ay4fi84w7x520","tag_id":"citcmx75x0012y4fia6hoizd3","_id":"citcmx7600016y4fiqdmzhq3j"},{"post_id":"citcmx75f000cy4fiwbei7198","tag_id":"citcmx7520004y4fiu1f3vvmb","_id":"citcmx7600018y4fi8zbe4djf"},{"post_id":"citcmx75f000cy4fiwbei7198","tag_id":"citcmx75x0012y4fia6hoizd3","_id":"citcmx7610019y4fin4l3yrrn"},{"post_id":"citcmx75j000gy4fisps04pun","tag_id":"citcmx7600017y4fid9kowskx","_id":"citcmx762001cy4fi42gko1e1"},{"post_id":"citcmx75j000gy4fisps04pun","tag_id":"citcmx761001ay4fiqq1j3v12","_id":"citcmx762001dy4fi3t3wk99k"},{"post_id":"citcmx75l000iy4fippkios26","tag_id":"citcmx762001by4fi9p8zksfe","_id":"citcmx763001ey4fihav6hd7i"}],"Tag":[{"name":"前端","_id":"citcmx7520004y4fiu1f3vvmb"},{"name":"游戏引擎","_id":"citcmx7590009y4fihkygnafh"},{"name":"CraftyJs","_id":"citcmx75i000ey4fizgirrsjz"},{"name":"JS","_id":"citcmx75m000jy4fiehsmedg1"},{"name":"git","_id":"citcmx75r000uy4fizpirg2la"},{"name":"js","_id":"citcmx75x0012y4fia6hoizd3"},{"name":"Java","_id":"citcmx7600017y4fid9kowskx"},{"name":"异步跨域","_id":"citcmx761001ay4fiqq1j3v12"},{"name":"推荐","_id":"citcmx762001by4fi9p8zksfe"}]}}